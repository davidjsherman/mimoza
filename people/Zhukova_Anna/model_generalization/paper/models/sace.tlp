(tlp "2.3"
(date "05-24-2013")
(comments "This file was generated by Tulip.")
(nb_nodes 96)
;(nodes <node_id> <node_id> ...)
(nodes 0..95)
(nb_edges 139)
;(edge <edge_id> <source_id> <target_id>)
(edge 0 49 1)
(edge 1 3 50)
(edge 2 3 51)
(edge 3 50 2)
(edge 4 3 52)
(edge 5 4 50)
(edge 6 3 53)
(edge 7 51 8)
(edge 8 3 55)
(edge 9 11 51)
(edge 10 3 58)
(edge 11 52 14)
(edge 12 20 52)
(edge 13 51 7)
(edge 14 58 7)
(edge 15 53 18)
(edge 16 52 7)
(edge 17 24 53)
(edge 18 54 22)
(edge 19 53 7)
(edge 20 26 54)
(edge 21 55 7)
(edge 22 50 7)
(edge 23 9 2)
(edge 24 55 23)
(edge 25 28 55)
(edge 26 4 9)
(edge 27 30 56)
(edge 28 38 56)
(edge 29 39 56)
(edge 30 56 26)
(edge 31 56 37)
(edge 32 3 9)
(edge 33 30 57)
(edge 34 41 57)
(edge 35 42 57)
(edge 36 57 35)
(edge 37 57 43)
(edge 38 57 40)
(edge 39 58 36)
(edge 40 58 27)
(edge 41 31 58)
(edge 42 9 7)
(edge 43 59 34)
(edge 44 59 44)
(edge 45 59 6)
(edge 46 33 59)
(edge 47 45 59)
(edge 48 46 59)
(edge 49 2 60)
(edge 50 9 8)
(edge 51 60 0)
(edge 52 11 9)
(edge 53 8 61)
(edge 54 9 14)
(edge 55 61 5)
(edge 56 20 9)
(edge 57 14 62)
(edge 58 9 18)
(edge 59 62 13)
(edge 60 24 9)
(edge 61 18 63)
(edge 62 9 23)
(edge 63 63 17)
(edge 64 28 9)
(edge 65 23 64)
(edge 66 9 27)
(edge 67 64 25)
(edge 68 31 9)
(edge 69 27 65)
(edge 70 60 10)
(edge 71 65 29)
(edge 72 61 10)
(edge 73 33 66)
(edge 74 47 66)
(edge 75 66 32)
(edge 76 66 48)
(edge 77 49 67)
(edge 78 68 50)
(edge 79 69 51)
(edge 80 70 52)
(edge 81 71 53)
(edge 82 72 55)
(edge 83 73 58)
(edge 84 74 49)
(edge 85 50 75)
(edge 86 51 76)
(edge 87 52 77)
(edge 88 53 78)
(edge 89 55 79)
(edge 90 54 80)
(edge 91 81 54)
(edge 92 82 54)
(edge 93 56 83)
(edge 94 84 60)
(edge 95 85 61)
(edge 96 86 62)
(edge 97 87 63)
(edge 98 88 64)
(edge 99 89 65)
(edge 100 60 90)
(edge 101 61 91)
(edge 102 62 92)
(edge 103 63 93)
(edge 104 64 94)
(edge 105 65 95)
(edge 106 62 10)
(edge 107 63 10)
(edge 108 64 10)
(edge 109 65 10)
(edge 110 66 10)
(edge 111 12 66)
(edge 112 12 60)
(edge 113 12 61)
(edge 114 12 62)
(edge 115 12 63)
(edge 116 12 64)
(edge 117 12 65)
(edge 118 66 15)
(edge 119 60 15)
(edge 120 61 15)
(edge 121 62 15)
(edge 122 63 15)
(edge 123 64 15)
(edge 124 65 15)
(edge 125 2 16)
(edge 126 16 10)
(edge 127 12 16)
(edge 128 16 15)
(edge 129 8 16)
(edge 130 14 16)
(edge 131 18 16)
(edge 132 23 16)
(edge 133 27 16)
(edge 134 33 16)
(edge 135 9 19)
(edge 136 19 16)
(edge 137 19 59)
(edge 138 21 9)
(cluster 7
(nodes 0..95)
(edges 0..138)
(cluster 65
(nodes 0..2 4..6 8 11 13..14 17..18 20 22..95)
(edges 0 3 5 7 9 11..12 15 17..18 20 24..25 27..31 33..41 43..49 51 53 55 57 59 61 63 65 67 69 71 73..105)
(cluster 66
(nodes 2 4 8 11 14 18 20 23..24 27..28 31 36 50..53 55 58 68..73 75..79)
(edges 3 5 7 9 11..12 15 17 24..25 39..41 78..83 85..89)
(cluster 67
(nodes 75 50 2 68 4)
(edges 85 5 3 78)
)
(cluster 68
(nodes 11 51 76 8 69)
(edges 86 7 9 79)
)
(cluster 69
(nodes 70 20 52 77 14)
(edges 80 11..12 87)
)
(cluster 70
(nodes 71 78 18 53 24)
(edges 15 81 17 88)
)
(cluster 71
(nodes 55 72 23 28 79)
(edges 25 82 24 89)
)
(cluster 72
(nodes 36 58 73 31 27)
(edges 40..41 83 39)
)
)
(cluster 73
(nodes 0 2 5 8 13..14 17..18 23 25 27 29 32..33 47..48 60..66 84..95)
(edges 49 51 53 55 57 59 61 63 65 67 69 71 73..76 94..105)
(cluster 74
(nodes 0 60 90 2 84)
(edges 100 51 94 49)
)
(cluster 75
(nodes 85 5 91 61 8)
(edges 55 95 101 53)
)
(cluster 76
(nodes 86 62 92 13..14)
(edges 96 57 102 59)
)
(cluster 77
(nodes 17 87 18 93 63)
(edges 61 97 103 63)
)
(cluster 78
(nodes 25 88 23 94 64)
(edges 65 67 98 104)
)
(cluster 79
(nodes 65 95 27 89 29)
(edges 105 71 99 69)
)
(cluster 80
(nodes 32..33 47..48 66)
(edges 73..76)
)
)
)
(cluster 81
(nodes 0..2 4..6 8 11 13..14 17..18 20 22..95)
(edges 0 3 5 7 9 11..12 15 17..18 20 24..25 27..31 33..41 43..49 51 53 55 57 59 61 63 65 67 69 71 73..105)
)
(cluster 82
(nodes 3 6..7 9..10 12 15..16 19 21..22 26 30 34..35 37..46 54 56..57 59 80..83)
(edges 18 20 27..38 42..45 47..48 90..93 126..128 135..138)
)
(cluster 83
(nodes 68..73)
)
(cluster 84
(nodes 77 36 78..79 75..76)
)
(cluster 85
(nodes 50..53 55 58)
)
(cluster 86
(nodes 0 5 13 17 25 29 32)
)
(cluster 87
(nodes 47 84..89)
)
(cluster 88
(nodes 48 90..95)
)
(cluster 89
(nodes 60..66)
)
(cluster 90
(nodes 2 8 14 18 23 27 33)
)
(cluster 91
(nodes 4 11 20 24 28 31)
)
)
(property  0 bool "boundaryCondition"
(default "false" "false")
)
(property  0 int "charge"
(default "0" "0")
)
(property  0 vector<string> "chebi_id"
(default "()" "()")
(node 0 "(\"kegg.compound:c00877\")")
(node 1 "(\"pdb-ccd:caa\", \"chebi:15345\")")
(node 2 "(\"kegg.compound:c00136\")")
(node 3 "(\"chebi:15346\")")
(node 4 "(\"chebi:27648\")")
(node 5 "(\"chebi:28706\")")
(node 6 "(\"chebi:15346\")")
(node 7 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 8 "(\"chebi:27540\")")
(node 10 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 11 "(\"chebi:28264\")")
(node 12 "(\"kegg.compound:c00016\")")
(node 13 "(\"kegg.compound:c05276\")")
(node 14 "(\"pdb-ccd:co8\", \"chebi:15533\")")
(node 15 "(\"chebi:17877\")")
(node 17 "(\"kegg.compound:c05275\")")
(node 18 "(\"chebi:28493\")")
(node 19 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 20 "(\"kegg.compound:c05265\")")
(node 21 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 22 "(\"kegg.compound:c00226\")")
(node 23 "(\"pdb-ccd:dcc\", \"chebi:15521\")")
(node 24 "(\"chebi:27868\")")
(node 25 "(\"chebi:15471\")")
(node 26 "(\"chebi:17478\")")
(node 27 "(\"kegg.compound:c02593\")")
(node 28 "(\"kegg.compound:c05261\")")
(node 29 "(\"chebi:27721\")")
(node 30 "(\"kegg.compound:c00162\")")
(node 31 "(\"kegg.compound:c05259\")")
(node 32 "(\"chebi:28935\")")
(node 33 "(\"kegg.compound:c00154\")")
(node 34 "(\"pdb-ccd:plm\", \"chebi:7896\")")
(node 35 "(\"kegg.compound:c05102\")")
(node 36 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 37 "(\"chebi:15846\")")
(node 38 "(\"chebi:16908\")")
(node 39 "(\"chebi:15378\")")
(node 40 "(\"kegg.drug:d00001\", \"chebi:15377\")")
(node 41 "(\"kegg.compound:c03024\")")
(node 42 "(\"kegg.compound:c00007\")")
(node 43 "(\"kegg.compound:c03161\")")
(node 44 "(\"chebi:15422\")")
(node 45 "(\"kegg.compound:c00020\")")
(node 46 "(\"kegg.compound:c00013\")")
(node 47 "(\"kegg.compound:c00016\")")
(node 48 "(\"chebi:17877\")")
(node 67 "(\"chebi:15346\")")
(node 68 "(\"chebi:15346\")")
(node 69 "(\"chebi:15346\")")
(node 70 "(\"chebi:15346\")")
(node 71 "(\"chebi:15346\")")
(node 72 "(\"chebi:15346\")")
(node 73 "(\"chebi:15346\")")
(node 74 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 75 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 76 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 77 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 78 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 79 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 80 "(\"chebi:15846\")")
(node 81 "(\"chebi:16908\")")
(node 82 "(\"chebi:15378\")")
(node 83 "(\"kegg.drug:d00001\", \"chebi:15377\")")
(node 84 "(\"kegg.compound:c00016\")")
(node 85 "(\"kegg.compound:c00016\")")
(node 86 "(\"kegg.compound:c00016\")")
(node 87 "(\"kegg.compound:c00016\")")
(node 88 "(\"kegg.compound:c00016\")")
(node 89 "(\"kegg.compound:c00016\")")
(node 90 "(\"chebi:17877\")")
(node 91 "(\"chebi:17877\")")
(node 92 "(\"chebi:17877\")")
(node 93 "(\"chebi:17877\")")
(node 94 "(\"chebi:17877\")")
(node 95 "(\"chebi:17877\")")
)
(property  0 string "class"
(default "" "")
(node 0 "simple chemical")
(node 1 "simple chemical")
(node 2 "simple chemical")
(node 4 "simple chemical")
(node 5 "simple chemical")
(node 6 "simple chemical")
(node 8 "simple chemical")
(node 11 "simple chemical")
(node 13 "simple chemical")
(node 14 "simple chemical")
(node 17 "simple chemical")
(node 18 "simple chemical")
(node 20 "simple chemical")
(node 22 "simple chemical")
(node 23 "simple chemical")
(node 24 "simple chemical")
(node 25 "simple chemical")
(node 26 "simple chemical")
(node 27 "simple chemical")
(node 28 "simple chemical")
(node 29 "simple chemical")
(node 30 "simple chemical")
(node 31 "simple chemical")
(node 32 "simple chemical")
(node 33 "simple chemical")
(node 34 "simple chemical")
(node 35 "simple chemical")
(node 36 "simple chemical")
(node 37 "simple chemical")
(node 38 "simple chemical")
(node 39 "simple chemical")
(node 40 "simple chemical")
(node 41 "simple chemical")
(node 42 "simple chemical")
(node 43 "simple chemical")
(node 44 "simple chemical")
(node 45 "simple chemical")
(node 46 "simple chemical")
(node 47 "simple chemical")
(node 48 "simple chemical")
(node 49 "process")
(node 50 "process")
(node 51 "process")
(node 52 "process")
(node 53 "process")
(node 54 "process")
(node 55 "process")
(node 56 "process")
(node 57 "process")
(node 58 "process")
(node 59 "process")
(node 60 "process")
(node 61 "process")
(node 62 "process")
(node 63 "process")
(node 64 "process")
(node 65 "process")
(node 66 "process")
(node 67 "simple chemical")
(node 68 "simple chemical")
(node 69 "simple chemical")
(node 70 "simple chemical")
(node 71 "simple chemical")
(node 72 "simple chemical")
(node 73 "simple chemical")
(node 74 "simple chemical")
(node 75 "simple chemical")
(node 76 "simple chemical")
(node 77 "simple chemical")
(node 78 "simple chemical")
(node 79 "simple chemical")
(node 80 "simple chemical")
(node 81 "simple chemical")
(node 82 "simple chemical")
(node 83 "simple chemical")
(node 84 "simple chemical")
(node 85 "simple chemical")
(node 86 "simple chemical")
(node 87 "simple chemical")
(node 88 "simple chemical")
(node 89 "simple chemical")
(node 90 "simple chemical")
(node 91 "simple chemical")
(node 92 "simple chemical")
(node 93 "simple chemical")
(node 94 "simple chemical")
(node 95 "simple chemical")
)
(property  0 bool "clone"
(default "false" "false")
(node 3 "true")
(node 6 "true")
(node 7 "true")
(node 12 "true")
(node 15 "true")
(node 36 "true")
(node 37 "true")
(node 38 "true")
(node 39 "true")
(node 40 "true")
(node 41 "true")
(node 42 "true")
(node 43 "true")
(node 44 "true")
(node 45 "true")
(node 46 "true")
(node 47 "true")
(node 48 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
)
(property  0 string "compartment"
(default "" "")
(node 0 "default")
(node 1 "default")
(node 2 "default")
(node 3 "default")
(node 4 "default")
(node 5 "default")
(node 6 "default")
(node 7 "default")
(node 8 "default")
(node 10 "default")
(node 11 "default")
(node 12 "default")
(node 13 "default")
(node 14 "default")
(node 15 "default")
(node 17 "default")
(node 18 "default")
(node 19 "default")
(node 20 "default")
(node 21 "default")
(node 22 "default")
(node 23 "default")
(node 24 "default")
(node 25 "default")
(node 26 "default")
(node 27 "default")
(node 28 "default")
(node 29 "default")
(node 30 "default")
(node 31 "default")
(node 32 "default")
(node 33 "default")
(node 34 "default")
(node 35 "default")
(node 36 "default")
(node 37 "default")
(node 38 "default")
(node 39 "default")
(node 40 "default")
(node 41 "default")
(node 42 "default")
(node 43 "default")
(node 44 "default")
(node 45 "default")
(node 46 "default")
(node 47 "default")
(node 48 "default")
(node 67 "default")
(node 68 "default")
(node 69 "default")
(node 70 "default")
(node 71 "default")
(node 72 "default")
(node 73 "default")
(node 74 "default")
(node 75 "default")
(node 76 "default")
(node 77 "default")
(node 78 "default")
(node 79 "default")
(node 80 "default")
(node 81 "default")
(node 82 "default")
(node 83 "default")
(node 84 "default")
(node 85 "default")
(node 86 "default")
(node 87 "default")
(node 88 "default")
(node 89 "default")
(node 90 "default")
(node 91 "default")
(node 92 "default")
(node 93 "default")
(node 94 "default")
(node 95 "default")
)
(property  0 bool "constant"
(default "false" "false")
)
(property  0 string "ecNumber"
(default "" "")
)
(property  0 vector<string> "encodes"
(default "()" "()")
)
(property  0 bool "fastReaction"
(default "false" "false")
)
(property  0 string "geneAssociation"
(default "" "")
(node 9 " or  or  or  or  or ")
(node 16 " or  or  or  or  or  or ")
)
(property  0 bool "hasOnlySubstanceUnits"
(default "false" "false")
)
(property  0 bool "hasOutsideConnections"
(default "false" "false")
(node 30 "true")
(node 57 "true")
)
(property  0 vector<string> "hasPart"
(default "()" "()")
)
(property  0 vector<string> "hasProperty"
(default "()" "()")
)
(property  0 vector<string> "hasVersion"
(default "()" "()")
)
(property  0 string "id"
(default "" "")
(node 0 "CrotonylCoA")
(node 1 "AcetoacetylCoA")
(node 2 "ButyrylCoA")
(node 3 "meta_CoA")
(node 4 "SId_OxohexanoylCoA")
(node 5 "SId_2EHexenoylCoA")
(node 6 "CoA")
(node 7 "meta_AcetylCoA")
(node 8 "HexanoylCoA")
(node 9 "meta_rnR01177")
(node 10 "meta_CrotonylCoA")
(node 11 "SId_OxooctanoylCoA")
(node 12 "meta_FAD")
(node 13 "SId_2EOctenoylCoA")
(node 14 "OctanoylCoA")
(node 15 "meta_FADH2")
(node 16 "meta_rnR01175")
(node 17 "SId_2EDecenoylCoA")
(node 18 "DecanoylCoA")
(node 19 "meta_ButyrylCoA")
(node 20 "SId_OxodecanoylCoA")
(node 21 "meta_SId_OxohexanoylCoA")
(node 22 "SId_Alcohol")
(node 23 "LauroylCoA")
(node 24 "SId_OxododecanoylCoA")
(node 25 "SId_2EDodecenoylCoA")
(node 26 "RCHO")
(node 27 "MyristoylCoA")
(node 28 "SId_OxotetradecanoylCoA")
(node 29 "SId_2ETetradecenoylCoA")
(node 30 "Fatty_acid")
(node 31 "SId_OxopalmitoylCoA")
(node 32 "SId_2EHexadecenoylCoA")
(node 33 "PalmitoylCoA")
(node 34 "Palmitate")
(node 35 "alphaHydroxy_fatty_acid")
(node 36 "AcetylCoA")
(node 37 "NAD")
(node 38 "NADH")
(node 39 "H")
(node 40 "H2O")
(node 41 "Reduced_flavoprotein")
(node 42 "O2")
(node 43 "Oxidized_flavoprotein")
(node 44 "ATP")
(node 45 "AMP")
(node 46 "PPi")
(node 47 "FAD")
(node 48 "FADH2")
(node 49 "rnR00238")
(node 50 "rnR01177")
(node 51 "rnR04747")
(node 52 "rnR03778")
(node 53 "rnR04742")
(node 54 "rnR00623")
(node 55 "rnR03858")
(node 56 "rnR00631")
(node 57 "rnR04121")
(node 58 "rnR03991")
(node 59 "rnR01280")
(node 60 "rnR01175")
(node 61 "rnR04751")
(node 62 "rnR03777")
(node 63 "rnR04754")
(node 64 "rnR03857")
(node 65 "rnR03990")
(node 66 "rnR01279")
(node 67 "CoA")
(node 68 "CoA")
(node 69 "CoA")
(node 70 "CoA")
(node 71 "CoA")
(node 72 "CoA")
(node 73 "CoA")
(node 74 "AcetylCoA")
(node 75 "AcetylCoA")
(node 76 "AcetylCoA")
(node 77 "AcetylCoA")
(node 78 "AcetylCoA")
(node 79 "AcetylCoA")
(node 80 "NAD")
(node 81 "NADH")
(node 82 "H")
(node 83 "H2O")
(node 84 "FAD")
(node 85 "FAD")
(node 86 "FAD")
(node 87 "FAD")
(node 88 "FAD")
(node 89 "FAD")
(node 90 "FADH2")
(node 91 "FADH2")
(node 92 "FADH2")
(node 93 "FADH2")
(node 94 "FADH2")
(node 95 "FADH2")
)
(property  0 double "initialAmount"
(default "0" "0")
(node 0 "1")
(node 1 "1")
(node 2 "1")
(node 3 "1")
(node 4 "1")
(node 5 "1")
(node 6 "1")
(node 7 "1")
(node 8 "1")
(node 10 "1")
(node 11 "1")
(node 12 "1")
(node 13 "1")
(node 14 "1")
(node 15 "1")
(node 17 "1")
(node 18 "1")
(node 19 "1")
(node 20 "1")
(node 21 "1")
(node 22 "1")
(node 23 "1")
(node 24 "1")
(node 25 "1")
(node 26 "1")
(node 27 "1")
(node 28 "1")
(node 29 "1")
(node 30 "1")
(node 31 "1")
(node 32 "1")
(node 33 "1")
(node 34 "1")
(node 35 "1")
(node 36 "1")
(node 37 "1")
(node 38 "1")
(node 39 "1")
(node 40 "1")
(node 41 "1")
(node 42 "1")
(node 43 "1")
(node 44 "1")
(node 45 "1")
(node 46 "1")
(node 47 "1")
(node 48 "1")
(node 67 "1")
(node 68 "1")
(node 69 "1")
(node 70 "1")
(node 71 "1")
(node 72 "1")
(node 73 "1")
(node 74 "1")
(node 75 "1")
(node 76 "1")
(node 77 "1")
(node 78 "1")
(node 79 "1")
(node 80 "1")
(node 81 "1")
(node 82 "1")
(node 83 "1")
(node 84 "1")
(node 85 "1")
(node 86 "1")
(node 87 "1")
(node 88 "1")
(node 89 "1")
(node 90 "1")
(node 91 "1")
(node 92 "1")
(node 93 "1")
(node 94 "1")
(node 95 "1")
)
(property  0 double "initialConcentration"
(default "0" "0")
)
(property  0 vector<string> "is"
(default "()" "()")
(node 0 "(\"http://identifiers.org/kegg.compound/C00877\")")
(node 1 "(\"http://identifiers.org/pdb-ccd/CAA\", \"http://identifiers.org/obo.chebi/chebi:15345\")")
(node 2 "(\"http://identifiers.org/kegg.compound/C00136\")")
(node 4 "(\"http://identifiers.org/obo.chebi/CHEBI:27648\")")
(node 5 "(\"http://identifiers.org/obo.chebi/CHEBI:28706\")")
(node 6 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 8 "(\"http://identifiers.org/obo.chebi/CHEBI:27540\")")
(node 11 "(\"http://identifiers.org/obo.chebi/CHEBI:28264\")")
(node 13 "(\"http://identifiers.org/kegg.compound/C05276\")")
(node 14 "(\"http://identifiers.org/pdb-ccd/CO8\", \"http://identifiers.org/obo.chebi/chebi:15533\")")
(node 17 "(\"http://identifiers.org/kegg.compound/C05275\")")
(node 18 "(\"http://identifiers.org/obo.chebi/CHEBI:28493\")")
(node 20 "(\"http://identifiers.org/kegg.compound/C05265\")")
(node 22 "(\"http://identifiers.org/kegg.compound/C00226\")")
(node 23 "(\"http://identifiers.org/pdb-ccd/DCC\", \"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 24 "(\"http://identifiers.org/obo.chebi/CHEBI:27868\")")
(node 25 "(\"http://identifiers.org/obo.chebi/CHEBI:15471\")")
(node 26 "(\"http://identifiers.org/obo.chebi/CHEBI:17478\")")
(node 27 "(\"http://identifiers.org/kegg.compound/C02593\")")
(node 28 "(\"http://identifiers.org/kegg.compound/C05261\")")
(node 29 "(\"http://identifiers.org/obo.chebi/CHEBI:27721\")")
(node 30 "(\"http://identifiers.org/kegg.compound/C00162\")")
(node 31 "(\"http://identifiers.org/kegg.compound/C05259\")")
(node 32 "(\"http://identifiers.org/obo.chebi/CHEBI:28935\")")
(node 33 "(\"http://identifiers.org/kegg.compound/C00154\")")
(node 34 "(\"http://identifiers.org/pdb-ccd/PLM\", \"http://identifiers.org/obo.chebi/chebi:7896\")")
(node 35 "(\"http://identifiers.org/kegg.compound/C05102\")")
(node 36 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 37 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 38 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 39 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 40 "(\"http://identifiers.org/kegg.drug/D00001\", \"http://identifiers.org/obo.chebi/chebi:15377\")")
(node 41 "(\"http://identifiers.org/kegg.compound/C03024\")")
(node 42 "(\"http://identifiers.org/kegg.compound/C00007\")")
(node 43 "(\"http://identifiers.org/kegg.compound/C03161\")")
(node 44 "(\"http://identifiers.org/obo.chebi/CHEBI:15422\")")
(node 45 "(\"http://identifiers.org/kegg.compound/C00020\")")
(node 46 "(\"http://identifiers.org/kegg.compound/C00013\")")
(node 47 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 48 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 49 "(\"http://identifiers.org/kegg.reaction/R00238\")")
(node 50 "(\"http://identifiers.org/kegg.reaction/R01177\")")
(node 51 "(\"http://identifiers.org/kegg.reaction/R04747\")")
(node 52 "(\"http://identifiers.org/kegg.reaction/R03778\")")
(node 53 "(\"http://identifiers.org/kegg.reaction/R04742\")")
(node 54 "(\"http://identifiers.org/kegg.reaction/R00623\")")
(node 55 "(\"http://identifiers.org/kegg.reaction/R03858\")")
(node 56 "(\"http://identifiers.org/kegg.reaction/R00631\")")
(node 57 "(\"http://identifiers.org/kegg.reaction/R04121\")")
(node 58 "(\"http://identifiers.org/kegg.reaction/R03991\")")
(node 59 "(\"http://identifiers.org/kegg.reaction/R01280\")")
(node 60 "(\"http://identifiers.org/kegg.reaction/R01175\")")
(node 61 "(\"http://identifiers.org/kegg.reaction/R04751\")")
(node 62 "(\"http://identifiers.org/kegg.reaction/R03777\")")
(node 63 "(\"http://identifiers.org/kegg.reaction/R04754\")")
(node 64 "(\"http://identifiers.org/kegg.reaction/R03857\")")
(node 65 "(\"http://identifiers.org/kegg.reaction/R03990\")")
(node 66 "(\"http://identifiers.org/kegg.reaction/R01279\")")
(node 67 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 68 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 69 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 70 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 71 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 72 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 73 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 74 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 75 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 76 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 77 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 78 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 79 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 80 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 81 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 82 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 83 "(\"http://identifiers.org/kegg.drug/D00001\", \"http://identifiers.org/obo.chebi/chebi:15377\")")
(node 84 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 85 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 86 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 87 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 88 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 89 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 90 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 91 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 92 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 93 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 94 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 95 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
)
(property  0 vector<string> "isDescribedBy"
(default "()" "()")
(node 49 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 50 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 51 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 52 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 53 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 54 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 55 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 56 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 57 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 58 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 59 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 60 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 61 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 62 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 63 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 64 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 65 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 66 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
)
(property  0 vector<string> "isEncodedBy"
(default "()" "()")
)
(property  0 vector<string> "isHomologTo"
(default "()" "()")
)
(property  0 vector<string> "isPartOf"
(default "()" "()")
)
(property  0 vector<string> "isPropertyOf"
(default "()" "()")
)
(property  0 vector<string> "isVersionOf"
(default "()" "()")
(node 49 "(\"_.4.0.0.True\")")
(node 50 "(\"_.5.0.0.True\")")
(node 51 "(\"_.5.1.0.True\")")
(node 52 "(\"_.5.2.0.True\")")
(node 53 "(\"_.5.3.0.True\")")
(node 54 "(\"_.0.0.0.True\")")
(node 55 "(\"_.5.4.0.True\")")
(node 56 "(\"_.1.0.0.True\")")
(node 57 "(\"_.3.0.0.True\")")
(node 58 "(\"_.5.5.0.True\")")
(node 59 "(\"_.2.0.0.True\")")
(node 60 "(\"_.6.0.0.True\")")
(node 61 "(\"_.6.1.0.True\")")
(node 62 "(\"_.6.2.0.True\")")
(node 63 "(\"_.6.3.0.True\")")
(node 64 "(\"_.6.4.0.True\")")
(node 65 "(\"_.6.5.0.True\")")
(node 66 "(\"_.6.6.0.True\")")
)
(property  0 vector<int> "listOfProducts"
(default "()" "()")
(node 49 "(13, 18)")
(node 50 "(18, 16)")
(node 51 "(18, 23)")
(node 52 "(32, 18)")
(node 53 "(18, 37)")
(node 54 "(39, 58, 59)")
(node 55 "(42, 18)")
(node 56 "(39, 57, 61)")
(node 57 "(51, 64, 61)")
(node 58 "(46, 18)")
(node 59 "(49, 67, 68)")
(node 60 "(12, 70)")
(node 61 "(17, 70)")
(node 62 "(25, 70)")
(node 63 "(29, 70)")
(node 64 "(38, 70)")
(node 65 "(43, 70)")
(node 66 "(48, 70)")
)
(property  0 vector<int> "listOfReactants"
(default "()" "()")
(node 49 "(55)")
(node 50 "(55, 14)")
(node 51 "(55, 20)")
(node 52 "(55, 26)")
(node 53 "(55, 30)")
(node 54 "(34, 57)")
(node 55 "(55, 36)")
(node 56 "(44, 58, 59)")
(node 57 "(44, 62, 63)")
(node 58 "(55, 41)")
(node 59 "(50, 66, 18)")
(node 60 "(14, 69)")
(node 61 "(20, 69)")
(node 62 "(26, 69)")
(node 63 "(30, 69)")
(node 64 "(36, 69)")
(node 65 "(41, 69)")
(node 66 "(49, 69)")
)
(property  0 bool "membrane"
(default "false" "false")
)
(property  0 int "membranePos"
(default "-1" "0")
)
(property  0 string "name"
(default "" "")
(node 0 "Crotonyl-CoA")
(node 1 "Acetoacetyl-CoA")
(node 2 "Butyryl-CoA")
(node 3 "CoA")
(node 4 "3-Oxohexanoyl-CoA")
(node 5 "(2E)-Hexenoyl-CoA")
(node 6 "CoA")
(node 7 "Acetyl-CoA")
(node 8 "Hexanoyl-CoA")
(node 9 "generalized rn:R01177")
(node 10 "unsaturated fatty acyl-CoA")
(node 11 "3-Oxooctanoyl-CoA")
(node 12 "FAD")
(node 13 "(2E)-Octenoyl-CoA")
(node 14 "Octanoyl-CoA")
(node 15 "FADH2")
(node 16 "generalized rn:R01175")
(node 17 "(2E)-Decenoyl-CoA")
(node 18 "Decanoyl-CoA")
(node 19 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 20 "3-Oxodecanoyl-CoA")
(node 21 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 22 "1-Alcohol")
(node 23 "Lauroyl-CoA")
(node 24 "3-Oxododecanoyl-CoA")
(node 25 "(2E)-Dodecenoyl-CoA")
(node 26 "RCHO")
(node 27 "Myristoyl-CoA")
(node 28 "3-Oxotetradecanoyl-CoA")
(node 29 "(2E)-Tetradecenoyl-CoA")
(node 30 "Fatty acid")
(node 31 "3-Oxopalmitoyl-CoA")
(node 32 "(2E)-Hexadecenoyl-CoA")
(node 33 "Palmitoyl-CoA")
(node 34 "Palmitate")
(node 35 "alpha-Hydroxy fatty acid")
(node 36 "Acetyl-CoA")
(node 37 "NAD")
(node 38 "NADH")
(node 39 "H+")
(node 40 "H2O")
(node 41 "Reduced flavoprotein")
(node 42 "O2")
(node 43 "Oxidized flavoprotein")
(node 44 "ATP")
(node 45 "AMP")
(node 46 "PPi")
(node 47 "FAD")
(node 48 "FADH2")
(node 49 "rn:R00238")
(node 50 "rn:R01177")
(node 51 "rn:R04747")
(node 52 "rn:R03778")
(node 53 "rn:R04742")
(node 54 "rn:R00623")
(node 55 "rn:R03858")
(node 56 "rn:R00631")
(node 57 "rn:R04121")
(node 58 "rn:R03991")
(node 59 "rn:R01280")
(node 60 "rn:R01175")
(node 61 "rn:R04751")
(node 62 "rn:R03777")
(node 63 "rn:R04754")
(node 64 "rn:R03857")
(node 65 "rn:R03990")
(node 66 "rn:R01279")
(node 67 "CoA")
(node 68 "CoA")
(node 69 "CoA")
(node 70 "CoA")
(node 71 "CoA")
(node 72 "CoA")
(node 73 "CoA")
(node 74 "Acetyl-CoA")
(node 75 "Acetyl-CoA")
(node 76 "Acetyl-CoA")
(node 77 "Acetyl-CoA")
(node 78 "Acetyl-CoA")
(node 79 "Acetyl-CoA")
(node 80 "NAD")
(node 81 "NADH")
(node 82 "H+")
(node 83 "H2O")
(node 84 "FAD")
(node 85 "FAD")
(node 86 "FAD")
(node 87 "FAD")
(node 88 "FAD")
(node 89 "FAD")
(node 90 "FADH2")
(node 91 "FADH2")
(node 92 "FADH2")
(node 93 "FADH2")
(node 94 "FADH2")
(node 95 "FADH2")
)
(property  0 int "nbClones"
(default "0" "0")
(node 6 "8")
(node 36 "7")
(node 37 "2")
(node 38 "2")
(node 39 "2")
(node 40 "2")
(node 42 "1")
(node 44 "1")
(node 45 "1")
(node 46 "1")
(node 47 "7")
(node 48 "7")
(node 67 "8")
(node 68 "8")
(node 69 "8")
(node 70 "8")
(node 71 "8")
(node 72 "8")
(node 73 "8")
(node 74 "7")
(node 75 "7")
(node 76 "7")
(node 77 "7")
(node 78 "7")
(node 79 "7")
(node 80 "2")
(node 81 "2")
(node 82 "2")
(node 83 "2")
(node 84 "7")
(node 85 "7")
(node 86 "7")
(node 87 "7")
(node 88 "7")
(node 89 "7")
(node 90 "7")
(node 91 "7")
(node 92 "7")
(node 93 "7")
(node 94 "7")
(node 95 "7")
)
(property  0 vector<string> "occursIn"
(default "()" "()")
(node 49 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn00072\", \"http://identifiers.org/kegg.pathway/rn00280\", \"http://identifiers.org/kegg.pathway/rn00310\", \"http://identifiers.org/kegg.pathway/rn00362\", \"http://identifiers.org/kegg.pathway/rn00380\", \"http://identifiers.org/kegg.pathway/rn00620\", \"http://identifiers.org/kegg.pathway/rn00630\", \"http://identifiers.org/kegg.pathway/rn00640\", \"http://identifiers.org/kegg.pathway/rn00650\", \"http://identifiers.org/kegg.pathway/rn00720\", \"http://identifiers.org/kegg.pathway/rn00900\", \"http://identifiers.org/kegg.pathway/rn01100\", \"http://identifiers.org/kegg.pathway/rn01110\", \"http://identifiers.org/kegg.pathway/rn01120\")")
(node 50 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 51 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 52 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 53 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 54 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
(node 55 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 56 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
(node 57 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
(node 58 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 59 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 60 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 61 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 62 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 63 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 64 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 65 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 66 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
)
(property  0 string "outsideCompartment"
(default "" "")
)
(property  0 bool "outsideMembrane"
(default "false" "false")
)
(property  0 string "proteinAssociation"
(default "" "")
)
(property  0 bool "reaction"
(default "false" "false")
(node 9 "true")
(node 16 "true")
(node 49 "true")
(node 50 "true")
(node 51 "true")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 56 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 60 "true")
(node 61 "true")
(node 62 "true")
(node 63 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
)
(property  0 bool "reversible"
(default "false" "false")
(node 9 "true")
(node 49 "true")
(node 50 "true")
(node 51 "true")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 58 "true")
(node 59 "true")
(edge 0 "true")
(edge 3 "true")
(edge 5 "true")
(edge 7 "true")
(edge 9 "true")
(edge 11 "true")
(edge 12 "true")
(edge 15 "true")
(edge 17 "true")
(edge 18 "true")
(edge 20 "true")
(edge 24 "true")
(edge 25 "true")
(edge 39 "true")
(edge 40 "true")
(edge 41 "true")
(edge 43 "true")
(edge 44 "true")
(edge 45 "true")
(edge 46 "true")
(edge 47 "true")
(edge 48 "true")
(edge 77 "true")
(edge 78 "true")
(edge 79 "true")
(edge 80 "true")
(edge 81 "true")
(edge 82 "true")
(edge 83 "true")
(edge 84 "true")
(edge 85 "true")
(edge 86 "true")
(edge 87 "true")
(edge 88 "true")
(edge 89 "true")
(edge 90 "true")
(edge 91 "true")
(edge 92 "true")
)
(property  0 string "sboTerm"
(default "" "")
(node 9 "SBO:0000176")
(node 49 "SBO:0000176")
(node 50 "SBO:0000176")
(node 51 "SBO:0000176")
(node 52 "SBO:0000176")
(node 16 "SBO:0000176")
(node 53 "SBO:0000176")
(node 54 "SBO:0000176")
(node 55 "SBO:0000176")
(node 56 "SBO:0000176")
(node 57 "SBO:0000176")
(node 58 "SBO:0000176")
(node 59 "SBO:0000176")
(node 60 "SBO:0000176")
(node 61 "SBO:0000176")
(node 62 "SBO:0000176")
(node 63 "SBO:0000176")
(node 64 "SBO:0000176")
(node 65 "SBO:0000176")
(node 66 "SBO:0000176")
)
(property  0 string "speciesType"
(default "" "")
(node 0 "Crotonyl-CoA")
(node 1 "Acetoacetyl-CoA")
(node 2 "Butyryl-CoA")
(node 3 "CoA")
(node 4 "3-Oxohexanoyl-CoA")
(node 5 "(2E)-Hexenoyl-CoA")
(node 6 "CoA")
(node 7 "Acetyl-CoA")
(node 8 "Hexanoyl-CoA")
(node 10 "Crotonyl-CoA")
(node 11 "3-Oxooctanoyl-CoA")
(node 12 "FAD")
(node 13 "(2E)-Octenoyl-CoA")
(node 14 "Octanoyl-CoA")
(node 15 "FADH2")
(node 17 "(2E)-Decenoyl-CoA")
(node 18 "Decanoyl-CoA")
(node 19 "Butyryl-CoA")
(node 20 "3-Oxodecanoyl-CoA")
(node 21 "3-Oxohexanoyl-CoA")
(node 22 "1-Alcohol")
(node 23 "Lauroyl-CoA")
(node 24 "3-Oxododecanoyl-CoA")
(node 25 "(2E)-Dodecenoyl-CoA")
(node 26 "RCHO")
(node 27 "Myristoyl-CoA")
(node 28 "3-Oxotetradecanoyl-CoA")
(node 29 "(2E)-Tetradecenoyl-CoA")
(node 30 "Fatty acid")
(node 31 "3-Oxopalmitoyl-CoA")
(node 32 "(2E)-Hexadecenoyl-CoA")
(node 33 "Palmitoyl-CoA")
(node 34 "Palmitate")
(node 35 "alpha-Hydroxy fatty acid")
(node 36 "Acetyl-CoA")
(node 37 "NAD")
(node 38 "NADH")
(node 39 "H+")
(node 40 "H2O")
(node 41 "Reduced flavoprotein")
(node 42 "O2")
(node 43 "Oxidized flavoprotein")
(node 44 "ATP")
(node 45 "AMP")
(node 46 "PPi")
(node 47 "FAD")
(node 48 "FADH2")
(node 67 "CoA")
(node 68 "CoA")
(node 69 "CoA")
(node 70 "CoA")
(node 71 "CoA")
(node 72 "CoA")
(node 73 "CoA")
(node 74 "Acetyl-CoA")
(node 75 "Acetyl-CoA")
(node 76 "Acetyl-CoA")
(node 77 "Acetyl-CoA")
(node 78 "Acetyl-CoA")
(node 79 "Acetyl-CoA")
(node 80 "NAD")
(node 81 "NADH")
(node 82 "H+")
(node 83 "H2O")
(node 84 "FAD")
(node 85 "FAD")
(node 86 "FAD")
(node 87 "FAD")
(node 88 "FAD")
(node 89 "FAD")
(node 90 "FADH2")
(node 91 "FADH2")
(node 92 "FADH2")
(node 93 "FADH2")
(node 94 "FADH2")
(node 95 "FADH2")
)
(property  0 double "stoichiometry"
(default "0" "0")
(edge 0 "1")
(edge 1 "1")
(edge 2 "1")
(edge 3 "1")
(edge 4 "1")
(edge 5 "1")
(edge 6 "1")
(edge 7 "1")
(edge 8 "1")
(edge 9 "1")
(edge 10 "1")
(edge 11 "1")
(edge 12 "1")
(edge 13 "1")
(edge 14 "1")
(edge 15 "1")
(edge 16 "1")
(edge 17 "1")
(edge 18 "1")
(edge 19 "1")
(edge 20 "1")
(edge 21 "1")
(edge 22 "1")
(edge 23 "1")
(edge 24 "1")
(edge 25 "1")
(edge 26 "1")
(edge 27 "1")
(edge 28 "1")
(edge 29 "1")
(edge 30 "1")
(edge 31 "1")
(edge 32 "1")
(edge 33 "1")
(edge 34 "1")
(edge 35 "1")
(edge 36 "1")
(edge 37 "1")
(edge 38 "1")
(edge 39 "1")
(edge 40 "1")
(edge 41 "1")
(edge 42 "1")
(edge 43 "1")
(edge 44 "1")
(edge 45 "1")
(edge 46 "1")
(edge 47 "1")
(edge 48 "1")
(edge 49 "1")
(edge 50 "1")
(edge 51 "1")
(edge 52 "1")
(edge 53 "1")
(edge 54 "1")
(edge 55 "1")
(edge 56 "1")
(edge 57 "1")
(edge 58 "1")
(edge 59 "1")
(edge 60 "1")
(edge 61 "1")
(edge 62 "1")
(edge 63 "1")
(edge 64 "1")
(edge 65 "1")
(edge 66 "1")
(edge 67 "1")
(edge 68 "1")
(edge 69 "1")
(edge 70 "1")
(edge 71 "1")
(edge 72 "1")
(edge 73 "1")
(edge 74 "1")
(edge 75 "1")
(edge 76 "1")
(edge 77 "1")
(edge 78 "1")
(edge 79 "1")
(edge 80 "1")
(edge 81 "1")
(edge 82 "1")
(edge 83 "1")
(edge 84 "2")
(edge 85 "1")
(edge 86 "1")
(edge 87 "1")
(edge 88 "1")
(edge 89 "1")
(edge 90 "1")
(edge 91 "1")
(edge 92 "1")
(edge 93 "1")
(edge 94 "1")
(edge 95 "1")
(edge 96 "1")
(edge 97 "1")
(edge 98 "1")
(edge 99 "1")
(edge 100 "1")
(edge 101 "1")
(edge 102 "1")
(edge 103 "1")
(edge 104 "1")
(edge 105 "1")
(edge 106 "1")
(edge 107 "1")
(edge 108 "1")
(edge 109 "1")
(edge 110 "1")
(edge 111 "1")
(edge 112 "1")
(edge 113 "1")
(edge 114 "1")
(edge 115 "1")
(edge 116 "1")
(edge 117 "1")
(edge 118 "1")
(edge 119 "1")
(edge 120 "1")
(edge 121 "1")
(edge 122 "1")
(edge 123 "1")
(edge 124 "1")
(edge 125 "1")
(edge 126 "1")
(edge 127 "1")
(edge 128 "1")
(edge 129 "1")
(edge 130 "1")
(edge 131 "1")
(edge 132 "1")
(edge 133 "1")
(edge 134 "1")
(edge 135 "1")
(edge 136 "1")
(edge 137 "1")
(edge 138 "1")
)
(property  0 vector<string> "subSystem"
(default "()" "()")
)
(property  0 bool "ubiquitous"
(default "false" "false")
(node 3 "true")
(node 6 "true")
(node 7 "true")
(node 12 "true")
(node 15 "true")
(node 36 "true")
(node 37 "true")
(node 38 "true")
(node 39 "true")
(node 40 "true")
(node 42 "true")
(node 44 "true")
(node 45 "true")
(node 46 "true")
(node 47 "true")
(node 48 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
)
(property  0 color "viewBorderColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 double "viewBorderWidth"
(default "1" "1")
)
(property  0 color "viewColor"
(default "(255,0,0,255)" "(0,0,0,255)")
(node 1 "(204,102,102,255)")
(node 3 "(211,211,211,255)")
(node 6 "(211,211,211,255)")
(node 7 "(211,211,211,255)")
(node 9 "(211,211,211,255)")
(node 10 "(204,170,102,255)")
(node 12 "(211,211,211,255)")
(node 15 "(211,211,211,255)")
(node 16 "(211,211,211,255)")
(node 19 "(170,102,204,255)")
(node 21 "(102,204,102,255)")
(node 22 "(102,102,204,255)")
(node 26 "(102,170,204,255)")
(node 30 "(102,204,170,255)")
(node 34 "(170,204,102,255)")
(node 35 "(204,102,170,255)")
(node 37 "(211,211,211,255)")
(node 38 "(211,211,211,255)")
(node 39 "(211,211,211,255)")
(node 40 "(211,211,211,255)")
(node 41 "(211,211,211,255)")
(node 42 "(211,211,211,255)")
(node 43 "(211,211,211,255)")
(node 44 "(211,211,211,255)")
(node 45 "(211,211,211,255)")
(node 46 "(211,211,211,255)")
(node 49 "(211,211,211,255)")
(node 50 "(0,255,0,255)")
(node 51 "(0,255,0,255)")
(node 52 "(0,255,0,255)")
(node 53 "(0,255,0,255)")
(node 54 "(211,211,211,255)")
(node 55 "(0,255,0,255)")
(node 56 "(211,211,211,255)")
(node 57 "(211,211,211,255)")
(node 58 "(0,255,0,255)")
(node 59 "(211,211,211,255)")
(node 60 "(0,255,0,255)")
(node 61 "(0,255,0,255)")
(node 62 "(0,255,0,255)")
(node 63 "(0,255,0,255)")
(node 64 "(0,255,0,255)")
(node 65 "(0,255,0,255)")
(node 66 "(0,255,0,255)")
(node 67 "(211,211,211,255)")
(node 74 "(211,211,211,255)")
(node 80 "(211,211,211,255)")
(node 81 "(211,211,211,255)")
(node 82 "(211,211,211,255)")
(node 83 "(211,211,211,255)")
(edge 1 "(204,102,102,255)")
(edge 2 "(204,102,102,255)")
(edge 3 "(204,102,102,255)")
(edge 4 "(204,102,102,255)")
(edge 5 "(204,102,102,255)")
(edge 6 "(204,102,102,255)")
(edge 7 "(204,102,102,255)")
(edge 8 "(204,102,102,255)")
(edge 9 "(204,102,102,255)")
(edge 10 "(204,102,102,255)")
(edge 11 "(204,102,102,255)")
(edge 12 "(204,102,102,255)")
(edge 13 "(204,102,102,255)")
(edge 14 "(204,102,102,255)")
(edge 15 "(204,102,102,255)")
(edge 16 "(204,102,102,255)")
(edge 17 "(204,102,102,255)")
(edge 19 "(204,102,102,255)")
(edge 21 "(204,102,102,255)")
(edge 22 "(204,102,102,255)")
(edge 23 "(204,102,102,255)")
(edge 24 "(204,102,102,255)")
(edge 25 "(204,102,102,255)")
(edge 26 "(204,102,102,255)")
(edge 32 "(204,102,102,255)")
(edge 39 "(204,102,102,255)")
(edge 40 "(204,102,102,255)")
(edge 41 "(204,102,102,255)")
(edge 42 "(204,102,102,255)")
(edge 49 "(102,204,204,255)")
(edge 50 "(204,102,102,255)")
(edge 51 "(102,204,204,255)")
(edge 52 "(204,102,102,255)")
(edge 53 "(102,204,204,255)")
(edge 54 "(204,102,102,255)")
(edge 55 "(102,204,204,255)")
(edge 56 "(204,102,102,255)")
(edge 57 "(102,204,204,255)")
(edge 58 "(204,102,102,255)")
(edge 59 "(102,204,204,255)")
(edge 60 "(204,102,102,255)")
(edge 61 "(102,204,204,255)")
(edge 62 "(204,102,102,255)")
(edge 63 "(102,204,204,255)")
(edge 64 "(204,102,102,255)")
(edge 65 "(102,204,204,255)")
(edge 66 "(204,102,102,255)")
(edge 67 "(102,204,204,255)")
(edge 68 "(204,102,102,255)")
(edge 69 "(102,204,204,255)")
(edge 70 "(102,204,204,255)")
(edge 71 "(102,204,204,255)")
(edge 72 "(102,204,204,255)")
(edge 73 "(102,204,204,255)")
(edge 74 "(102,204,204,255)")
(edge 75 "(102,204,204,255)")
(edge 76 "(102,204,204,255)")
(edge 78 "(204,102,102,255)")
(edge 79 "(204,102,102,255)")
(edge 80 "(204,102,102,255)")
(edge 81 "(204,102,102,255)")
(edge 82 "(204,102,102,255)")
(edge 83 "(204,102,102,255)")
(edge 85 "(204,102,102,255)")
(edge 86 "(204,102,102,255)")
(edge 87 "(204,102,102,255)")
(edge 88 "(204,102,102,255)")
(edge 89 "(204,102,102,255)")
(edge 94 "(102,204,204,255)")
(edge 95 "(102,204,204,255)")
(edge 96 "(102,204,204,255)")
(edge 97 "(102,204,204,255)")
(edge 98 "(102,204,204,255)")
(edge 99 "(102,204,204,255)")
(edge 100 "(102,204,204,255)")
(edge 101 "(102,204,204,255)")
(edge 102 "(102,204,204,255)")
(edge 103 "(102,204,204,255)")
(edge 104 "(102,204,204,255)")
(edge 105 "(102,204,204,255)")
(edge 106 "(102,204,204,255)")
(edge 107 "(102,204,204,255)")
(edge 108 "(102,204,204,255)")
(edge 109 "(102,204,204,255)")
(edge 110 "(102,204,204,255)")
(edge 111 "(102,204,204,255)")
(edge 112 "(102,204,204,255)")
(edge 113 "(102,204,204,255)")
(edge 114 "(102,204,204,255)")
(edge 115 "(102,204,204,255)")
(edge 116 "(102,204,204,255)")
(edge 117 "(102,204,204,255)")
(edge 118 "(102,204,204,255)")
(edge 119 "(102,204,204,255)")
(edge 120 "(102,204,204,255)")
(edge 121 "(102,204,204,255)")
(edge 122 "(102,204,204,255)")
(edge 123 "(102,204,204,255)")
(edge 124 "(102,204,204,255)")
(edge 125 "(102,204,204,255)")
(edge 126 "(102,204,204,255)")
(edge 127 "(102,204,204,255)")
(edge 128 "(102,204,204,255)")
(edge 129 "(102,204,204,255)")
(edge 130 "(102,204,204,255)")
(edge 131 "(102,204,204,255)")
(edge 132 "(102,204,204,255)")
(edge 133 "(102,204,204,255)")
(edge 134 "(102,204,204,255)")
(edge 135 "(204,102,102,255)")
(edge 136 "(102,204,204,255)")
(edge 138 "(204,102,102,255)")
)
(property  0 string "viewFont"
(default "TulipBitmapDir/font.ttf" "TulipBitmapDir/font.ttf")
)
(property  0 int "viewFontSize"
(default "18" "18")
)
(property  0 string "viewLabel"
(default "" "")
(node 0 "Crotonyl-CoA")
(node 1 "Acetoac-\netyl-CoA")
(node 2 "Butyryl-CoA")
(node 3 "CoA")
(node 4 "3-Oxohexanoyl-CoA")
(node 5 "(2E)-Hexenoyl-CoA")
(node 6 "CoA")
(node 7 "Acetyl-\nCoA")
(node 8 "Hexanoyl-CoA")
(node 9 "rn:R011-\n77")
(node 10 "dehydro-\nacyl-CoA")
(node 11 "3-Oxooctanoyl-CoA")
(node 12 "FAD")
(node 13 "(2E)-Octenoyl-CoA")
(node 14 "Octanoyl-CoA")
(node 15 "FADH2")
(node 16 "rn:R011-\n75")
(node 17 "(2E)-Decenoyl-CoA")
(node 18 "Decanoyl-CoA")
(node 19 "fatty\nacyl-\nCoA")
(node 20 "3-Oxodecanoyl-CoA")
(node 21 "3-ketoa-\ncyl-CoA")
(node 22 "CH3OR")
(node 23 "Lauroyl-CoA")
(node 24 "3-Oxododecanoyl-CoA")
(node 25 "(2E)-Dodecenoyl-CoA")
(node 26 "RCHO")
(node 27 "Myristoyl-CoA")
(node 28 "3-Oxotetradecanoyl-CoA")
(node 29 "(2E)-Tetradecenoyl-CoA")
(node 30 "CHO2R")
(node 31 "3-Oxopalmitoyl-CoA")
(node 32 "(2E)-Hexadecenoyl-CoA")
(node 33 "Palmitoyl-CoA")
(node 34 "Palmita-\nte")
(node 35 "C2H3O3R\n(CH2)n")
(node 36 "Acetyl-CoA")
(node 37 "NAD")
(node 38 "NADH")
(node 39 "H+")
(node 40 "H2O")
(node 41 "Reduced\nflavopr-\notein")
(node 42 "O2")
(node 43 "Oxidized\nflavopr-\notein")
(node 44 "ATP")
(node 45 "AMP")
(node 46 "PPi")
(node 47 "FAD")
(node 48 "FADH2")
(node 49 "rn:R002-\n38")
(node 50 "rn:R01177")
(node 51 "rn:R04747")
(node 52 "rn:R03778")
(node 53 "rn:R04742")
(node 54 "rn:R006-\n23")
(node 55 "rn:R03858")
(node 56 "rn:R006-\n31")
(node 57 "rn:R041-\n21")
(node 58 "rn:R03991")
(node 59 "rn:R012-\n80")
(node 60 "rn:R01175")
(node 61 "rn:R04751")
(node 62 "rn:R03777")
(node 63 "rn:R04754")
(node 64 "rn:R03857")
(node 65 "rn:R03990")
(node 66 "rn:R01279")
(node 67 "CoA")
(node 68 "CoA")
(node 69 "CoA")
(node 70 "CoA")
(node 71 "CoA")
(node 72 "CoA")
(node 73 "CoA")
(node 74 "Acetyl-\nCoA")
(node 75 "Acetyl-CoA")
(node 76 "Acetyl-CoA")
(node 77 "Acetyl-CoA")
(node 78 "Acetyl-CoA")
(node 79 "Acetyl-CoA")
(node 80 "NAD")
(node 81 "NADH")
(node 82 "H+")
(node 83 "H2O")
(node 84 "FAD")
(node 85 "FAD")
(node 86 "FAD")
(node 87 "FAD")
(node 88 "FAD")
(node 89 "FAD")
(node 90 "FADH2")
(node 91 "FADH2")
(node 92 "FADH2")
(node 93 "FADH2")
(node 94 "FADH2")
(node 95 "FADH2")
)
(property  0 color "viewLabelColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 int "viewLabelPosition"
(default "0" "0")
)
(property  0 layout "viewLayout"
(default "(0,0,0)" "()")
(node 0 "(-14,11.5,0)")
(node 1 "(-26.6012,10.3594,0)")
(node 2 "(-6,32.5,0)")
(node 3 "(5.96277,17.5812,0)")
(node 4 "(2,11.5,0)")
(node 5 "(30,11.5,0)")
(node 6 "(-1.26283,47.5565,0)")
(node 7 "(5.71903,26.5,0)")
(node 8 "(38,32.5,0)")
(node 9 "(2,22,0)")
(node 10 "(-14,11.5,0)")
(node 11 "(46,11.5,0)")
(node 12 "(-18,26.5,0)")
(node 13 "(14,-24.5,0)")
(node 14 "(6,-3.5,0)")
(node 15 "(-18,17.5,0)")
(node 16 "(-14,22,0)")
(node 17 "(45,-22.5,0)")
(node 18 "(37,-1.5,0)")
(node 19 "(-6,32.5,0)")
(node 20 "(-2,-24.5,0)")
(node 21 "(2,11.5,0)")
(node 22 "(-5.05327,-43.8901,0)")
(node 23 "(-19,-9.5,0)")
(node 24 "(29,-22.5,0)")
(node 25 "(-11,-30.5,0)")
(node 26 "(-5.19585,-31.2589,0)")
(node 27 "(41,54.5,0)")
(node 28 "(-27,-30.5,0)")
(node 29 "(33,33.5,0)")
(node 30 "(-5.19493,-17.5746,0)")
(node 31 "(49,33.5,0)")
(node 32 "(20,6,0)")
(node 33 "(20,27,0)")
(node 34 "(-6.01954,50.7439,0)")
(node 35 "(-5.28421,0.568066,-4.89859e-16)")
(node 36 "(45,48.5,0)")
(node 37 "(-9.15633,-20.4632,0)")
(node 38 "(-1.15633,-20.4632,0)")
(node 39 "(-1.15633,-28.4632,0)")
(node 40 "(-9.5422,-4.64959,4.89859e-16)")
(node 41 "(-9.42117,-12.5303,-4.89859e-16)")
(node 42 "(-1.01966,-12.1828,4.89859e-16)")
(node 43 "(-1.24712,-4.25322,4.89859e-16)")
(node 44 "(-10.8507,47.6563,0)")
(node 45 "(-0.756699,37.4004,0)")
(node 46 "(-10.788,37.4816,0)")
(node 47 "(16,21,0)")
(node 48 "(16,12,0)")
(node 49 "(-26.6012,20.8594,0)")
(node 50 "(2,22,0)")
(node 51 "(46,22,0)")
(node 52 "(-2,-14,0)")
(node 53 "(29,-12,0)")
(node 54 "(-5.08762,-38.7933,0)")
(node 55 "(-27,-20,0)")
(node 56 "(-5.15633,-24.4632,0)")
(node 57 "(-5.33776,-8.63674,0)")
(node 58 "(49,44,0)")
(node 59 "(-6.02893,42.4967,0)")
(node 60 "(-14,22,0)")
(node 61 "(30,22,0)")
(node 62 "(14,-14,0)")
(node 63 "(45,-12,0)")
(node 64 "(-11,-20,0)")
(node 65 "(33,44,0)")
(node 66 "(20,16.5,0)")
(node 67 "(-30.6012,16.3594,0)")
(node 68 "(-2,17.5,0)")
(node 69 "(42,17.5,0)")
(node 70 "(-6,-18.5,0)")
(node 71 "(25,-16.5,0)")
(node 72 "(-31,-24.5,0)")
(node 73 "(45,39.5,0)")
(node 74 "(-26.6012,31.3594,0)")
(node 75 "(-2,26.5,0)")
(node 76 "(42,26.5,0)")
(node 77 "(-6,-9.5,0)")
(node 78 "(25,-7.5,0)")
(node 79 "(-31,-15.5,0)")
(node 80 "(-9.08762,-34.7933,0)")
(node 81 "(-1.08762,-34.7933,0)")
(node 82 "(-1.08762,-42.7933,0)")
(node 83 "(-9.15633,-28.4632,0)")
(node 84 "(-18,26.5,0)")
(node 85 "(26,26.5,0)")
(node 86 "(10,-9.5,0)")
(node 87 "(41,-7.5,0)")
(node 88 "(-15,-15.5,0)")
(node 89 "(29,48.5,0)")
(node 90 "(-18,17.5,0)")
(node 91 "(26,17.5,0)")
(node 92 "(10,-18.5,0)")
(node 93 "(41,-16.5,0)")
(node 94 "(-15,-24.5,0)")
(node 95 "(29,39.5,0)")
)
(property  0 graph "viewMetaGraph"
(default "" "()")
(node 3 "83")
(node 7 "84")
(node 9 "85")
(node 10 "86")
(node 12 "87")
(node 15 "88")
(node 16 "89")
(node 19 "90")
(node 21 "91")
(edge 1 "(79 )")
(edge 2 "(80 )")
(edge 4 "(81 )")
(edge 6 "(82 )")
(edge 8 "(83 )")
(edge 10 "(84 )")
(edge 13 "(87 )")
(edge 14 "(40 )")
(edge 16 "(88 )")
(edge 19 "(89 )")
(edge 21 "(90 )")
(edge 22 "(86 )")
(edge 23 "(4 )")
(edge 26 "(6 )")
(edge 32 "(2 3 5 7 9 11 )")
(edge 42 "(14 15 17 20 22 23 )")
(edge 50 "(8 )")
(edge 52 "(10 )")
(edge 54 "(12 )")
(edge 56 "(13 )")
(edge 58 "(16 )")
(edge 60 "(18 )")
(edge 62 "(25 )")
(edge 64 "(26 )")
(edge 66 "(41 )")
(edge 68 "(42 )")
(edge 70 "(52 )")
(edge 72 "(56 )")
(edge 106 "(60 )")
(edge 107 "(64 )")
(edge 108 "(68 )")
(edge 109 "(72 )")
(edge 110 "(76 )")
(edge 111 "(75 )")
(edge 112 "(95 )")
(edge 113 "(96 )")
(edge 114 "(97 )")
(edge 115 "(98 )")
(edge 116 "(99 )")
(edge 117 "(100 )")
(edge 118 "(77 )")
(edge 119 "(101 )")
(edge 120 "(102 )")
(edge 121 "(103 )")
(edge 122 "(104 )")
(edge 123 "(105 )")
(edge 124 "(106 )")
(edge 125 "(50 )")
(edge 126 "(71 73 107 108 109 110 111 )")
(edge 127 "(112 113 114 115 116 117 118 )")
(edge 128 "(119 120 121 122 123 124 125 )")
(edge 129 "(54 )")
(edge 130 "(58 )")
(edge 131 "(62 )")
(edge 132 "(66 )")
(edge 133 "(70 )")
(edge 134 "(74 )")
(edge 135 "(24 51 55 59 63 67 )")
(edge 136 "(126 130 131 132 133 134 135 )")
(edge 137 "(47 )")
(edge 138 "(27 53 57 61 65 69 )")
)
(property  0 double "viewRotation"
(default "0" "0")
)
(property  0 bool "viewSelection"
(default "false" "false")
)
(property  0 int "viewShape"
(default "4" "0")
(node 0 "120")
(node 1 "120")
(node 2 "120")
(node 3 "120")
(node 4 "120")
(node 5 "120")
(node 6 "120")
(node 7 "120")
(node 8 "120")
(node 9 "124")
(node 10 "120")
(node 11 "120")
(node 12 "120")
(node 13 "120")
(node 14 "120")
(node 15 "120")
(node 16 "124")
(node 17 "120")
(node 18 "120")
(node 19 "120")
(node 20 "120")
(node 21 "120")
(node 22 "120")
(node 23 "120")
(node 24 "120")
(node 25 "120")
(node 26 "120")
(node 27 "120")
(node 28 "120")
(node 29 "120")
(node 30 "120")
(node 31 "120")
(node 32 "120")
(node 33 "120")
(node 34 "120")
(node 35 "120")
(node 36 "120")
(node 37 "120")
(node 38 "120")
(node 39 "120")
(node 40 "120")
(node 41 "120")
(node 42 "120")
(node 43 "120")
(node 44 "120")
(node 45 "120")
(node 46 "120")
(node 47 "120")
(node 48 "120")
(node 49 "124")
(node 50 "124")
(node 51 "124")
(node 52 "124")
(node 53 "124")
(node 54 "124")
(node 55 "124")
(node 56 "124")
(node 57 "124")
(node 58 "124")
(node 59 "124")
(node 60 "124")
(node 61 "124")
(node 62 "124")
(node 63 "124")
(node 64 "124")
(node 65 "124")
(node 66 "124")
(node 67 "120")
(node 68 "120")
(node 69 "120")
(node 70 "120")
(node 71 "120")
(node 72 "120")
(node 73 "120")
(node 74 "120")
(node 75 "120")
(node 76 "120")
(node 77 "120")
(node 78 "120")
(node 79 "120")
(node 80 "120")
(node 81 "120")
(node 82 "120")
(node 83 "120")
(node 84 "120")
(node 85 "120")
(node 86 "120")
(node 87 "120")
(node 88 "120")
(node 89 "120")
(node 90 "120")
(node 91 "120")
(node 92 "120")
(node 93 "120")
(node 94 "120")
(node 95 "120")
)
(property  0 size "viewSize"
(default "(1,1,1)" "(0.125,0.125,0.5)")
(node 0 "(3,3,3)")
(node 1 "(3,3,3)")
(node 2 "(3,3,3)")
(node 3 "(4,4,4)")
(node 4 "(3,3,3)")
(node 5 "(3,3,3)")
(node 6 "(4,4,4)")
(node 7 "(4,4,4)")
(node 8 "(3,3,3)")
(node 9 "(5,5,5)")
(node 10 "(9,9,9)")
(node 11 "(3,3,3)")
(node 12 "(4,4,4)")
(node 13 "(3,3,3)")
(node 14 "(3,3,3)")
(node 15 "(4,4,4)")
(node 16 "(5,5,5)")
(node 17 "(3,3,3)")
(node 18 "(3,3,3)")
(node 19 "(9,9,9)")
(node 20 "(3,3,3)")
(node 21 "(9,9,9)")
(node 22 "(4,4,4)")
(node 23 "(3,3,3)")
(node 24 "(3,3,3)")
(node 25 "(3,3,3)")
(node 26 "(4,4,4)")
(node 27 "(3,3,3)")
(node 28 "(3,3,3)")
(node 29 "(3,3,3)")
(node 30 "(4,4,4)")
(node 31 "(3,3,3)")
(node 32 "(3,3,3)")
(node 33 "(3,3,3)")
(node 34 "(4,4,4)")
(node 35 "(4,4,4)")
(node 36 "(3,3,3)")
(node 37 "(4,4,4)")
(node 38 "(4,4,4)")
(node 39 "(4,4,4)")
(node 40 "(4,4,4)")
(node 41 "(4,4,4)")
(node 42 "(4,4,4)")
(node 43 "(4,4,4)")
(node 44 "(4,4,4)")
(node 45 "(4,4,4)")
(node 46 "(4,4,4)")
(node 47 "(3,3,3)")
(node 48 "(3,3,3)")
(node 54 "(3,3,3)")
(node 56 "(3,3,3)")
(node 57 "(3,3,3)")
(node 59 "(3,3,3)")
(node 67 "(3,3,3)")
(node 68 "(3,3,3)")
(node 69 "(3,3,3)")
(node 70 "(3,3,3)")
(node 71 "(3,3,3)")
(node 72 "(3,3,3)")
(node 73 "(3,3,3)")
(node 74 "(3,3,3)")
(node 75 "(3,3,3)")
(node 76 "(3,3,3)")
(node 77 "(3,3,3)")
(node 78 "(3,3,3)")
(node 79 "(3,3,3)")
(node 80 "(4,4,4)")
(node 81 "(4,4,4)")
(node 82 "(4,4,4)")
(node 83 "(4,4,4)")
(node 84 "(3,3,3)")
(node 85 "(3,3,3)")
(node 86 "(3,3,3)")
(node 87 "(3,3,3)")
(node 88 "(3,3,3)")
(node 89 "(3,3,3)")
(node 90 "(3,3,3)")
(node 91 "(3,3,3)")
(node 92 "(3,3,3)")
(node 93 "(3,3,3)")
(node 94 "(3,3,3)")
(node 95 "(3,3,3)")
)
(property  0 int "viewSrcAnchorShape"
(default "0" "-1")
(edge 24 "50")
(edge 3 "50")
(edge 7 "50")
(edge 11 "50")
(edge 84 "50")
(edge 15 "50")
(edge 85 "50")
(edge 39 "50")
(edge 86 "50")
(edge 40 "50")
(edge 87 "50")
(edge 18 "50")
(edge 88 "50")
(edge 89 "50")
(edge 43 "50")
(edge 44 "50")
(edge 90 "50")
(edge 45 "50")
)
(property  0 size "viewSrcAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  0 string "viewTexture"
(default "" "")
)
(property  0 int "viewTgtAnchorShape"
(default "0" "50")
(edge 24 "-1")
(edge 3 "-1")
(edge 7 "-1")
(edge 11 "-1")
(edge 84 "-1")
(edge 15 "-1")
(edge 85 "-1")
(edge 39 "-1")
(edge 86 "-1")
(edge 40 "-1")
(edge 87 "-1")
(edge 18 "-1")
(edge 88 "-1")
(edge 89 "-1")
(edge 43 "-1")
(edge 44 "-1")
(edge 90 "-1")
(edge 45 "-1")
)
(property  0 size "viewTgtAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  7 string "ancestor"
(default "" "")
(node 0 "unsaturated fatty acyl-CoA")
(node 1 "acetoacetyl-CoA")
(node 2 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 4 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 5 "unsaturated fatty acyl-CoA")
(node 8 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 9 "5.0")
(node 10 "unsaturated fatty acyl-CoA")
(node 11 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 13 "unsaturated fatty acyl-CoA")
(node 14 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 16 "6.0")
(node 17 "unsaturated fatty acyl-CoA")
(node 18 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 19 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 20 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 21 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 22 "primary alcohol")
(node 23 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 24 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 25 "unsaturated fatty acyl-CoA")
(node 26 "aldehyde")
(node 27 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 28 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 29 "unsaturated fatty acyl-CoA")
(node 30 "fatty acid anion, but not palmitic acid")
(node 31 "3-oxo-fatty acyl-CoA(4-), but not acetoacetyl-CoA")
(node 32 "unsaturated fatty acyl-CoA")
(node 33 "fatty acyl-CoA, but not acetoacetyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor unsaturated fatty acyl-CoA")
(node 34 "palmitic acid")
(node 35 "2-hydroxy fatty acid")
(node 49 "4.0")
(node 50 "5.0")
(node 51 "5.0")
(node 52 "5.0")
(node 53 "5.0")
(node 54 "0.0")
(node 55 "5.0")
(node 56 "1.0")
(node 57 "3.0")
(node 58 "5.0")
(node 59 "2.0")
(node 60 "6.0")
(node 61 "6.0")
(node 62 "6.0")
(node 63 "6.0")
(node 64 "6.0")
(node 65 "6.0")
(node 66 "6.0")
)
(property  7 vector<string> "ancestor_chebi_id"
(default "()" "()")
(node 0 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 1 "(\"chebi:15345\", \"chebi:13706\", \"citexplore:6150478\", \"chebi:41333\", \"chebi:11756\", \"drugbank:db03059\", \"kegg.compound:1420-36-6\", \"citexplore:239468\", \"chebi:2392\", \"chemidplus:1420-36-6\", \"citexplore:1682408\", \"chebi:22173\", \"kegg.compound:c00332\", \"reaxys:78273\", \"citexplore:10806397\", \"citexplore:6118268\", \"um-bbd:c0229\", \"lipid.maps:lmfa07050030\")")
(node 2 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 4 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 5 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 8 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 11 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 13 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 14 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 17 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 18 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 20 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 22 "(\"chebi:8406\", \"chebi:15734\", \"chebi:57489\", \"kegg.compound:c00226\", \"chebi:13676\", \"chebi:14887\", \"chebi:26262\")")
(node 23 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 24 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 25 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 26 "(\"kegg.compound:c00071\", \"chebi:13432\", \"chebi:13805\", \"chebi:13806\", \"chebi:13753\", \"chebi:22291\", \"chebi:17478\", \"chebi:2554\", \"chebi:8750\")")
(node 27 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 28 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 29 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 30 "(\"kegg.compound:c02403\", \"chebi:28868\", \"citexplore:18628202\", \"chebi:13634\", \"chebi:4985\", \"chebi:24022\")")
(node 31 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 32 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 33 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 34 "(\"metacyc:palmitate\", \"chebi:14730\", \"citexplore:12492626\", \"chembl:15357969\", \"gmelin:190200\", \"chembl:16884313\", \"chebi:24541\", \"chebi:24540\", \"chemidplus:57-10-3\", \"lipid.maps:lmfa01010001\", \"chembl:17502136\", \"chebi:15756\", \"kegg.compound:c00249\", \"chembl:16509590\", \"chebi:44952\", \"wikipedia:palmitic_acid\", \"drugbank:db03796\", \"kegg.drug:d05341\", \"beilstein:607489\", \"nist.chemistry.webbook:57-10-3\", \"citexplore:17439666\", \"reaxys:607489\", \"citexplore:22735334\", \"hmdb:hmdb00220\", \"chebi:233028\", \"chebi:29889\", \"pdbechem:plm\")")
(node 35 "(\"citexplore:9826358\", \"citexplore:6423633\", \"kegg.compound:c05102\", \"chebi:10283\")")
)
(property  81 vector<string> "comprises"
(default "()" "()")
)
(property  82 vector<string> "comprises"
(default "()" "()")
(node 3 "(\"CoA\", \"CoA\", \"CoA\", \"CoA\", \"CoA\", \"CoA\")")
(node 7 "(\"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\")")
(node 9 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 10 "(\"Crotonyl-CoA\", \"(2E)-Hexenoyl-CoA\", \"(2E)-Octenoyl-CoA\", \"(2E)-Decenoyl-CoA\", \"(2E)-Dodecenoyl-CoA\", \"(2E)-Tetradecenoyl-CoA\", \"(2E)-Hexadecenoyl-CoA\")")
(node 12 "(\"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\")")
(node 15 "(\"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\")")
(node 16 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 19 "(\"Butyryl-CoA\", \"Hexanoyl-CoA\", \"Octanoyl-CoA\", \"Decanoyl-CoA\", \"Lauroyl-CoA\", \"Myristoyl-CoA\", \"Palmitoyl-CoA\")")
(node 21 "(\"3-Oxohexanoyl-CoA\", \"3-Oxooctanoyl-CoA\", \"3-Oxodecanoyl-CoA\", \"3-Oxododecanoyl-CoA\", \"3-Oxotetradecanoyl-CoA\", \"3-Oxopalmitoyl-CoA\")")
)
(property  82 vector<color> "multiColor"
(default "()" "()")
(node 3 "((211,211,211,255))")
(node 6 "((211,211,211,255))")
(node 7 "((211,211,211,255))")
(node 9 "((211,211,211,255))")
(node 10 "((204,170,102,255))")
(node 12 "((211,211,211,255))")
(node 15 "((211,211,211,255))")
(node 16 "((211,211,211,255))")
(node 19 "((170,102,204,255))")
(node 21 "((102,204,102,255))")
(node 22 "((102,102,204,255))")
(node 26 "((102,170,204,255))")
(node 30 "((102,204,170,255))")
(node 34 "((170,204,102,255))")
(node 35 "((204,102,170,255))")
(node 37 "((211,211,211,255))")
(node 38 "((211,211,211,255))")
(node 39 "((211,211,211,255))")
(node 40 "((211,211,211,255))")
(node 41 "((211,211,211,255))")
(node 42 "((211,211,211,255))")
(node 43 "((211,211,211,255))")
(node 44 "((211,211,211,255))")
(node 45 "((211,211,211,255))")
(node 46 "((211,211,211,255))")
(node 54 "((211,211,211,255))")
(node 56 "((211,211,211,255))")
(node 57 "((211,211,211,255))")
(node 59 "((211,211,211,255))")
(node 80 "((211,211,211,255))")
(node 81 "((211,211,211,255))")
(node 82 "((211,211,211,255))")
(node 83 "((211,211,211,255))")
)
(property  82 vector<string> "synonyms"
(default "()" "()")
(node 22 "(\"primary alcohol\", \"1-Alcohol\", \"[H]C([H])(O)[*]\", \"a primary alcohol\", \"Primary alcohol\", \"CH3OR\", \"primary alcohols\")")
(node 35 "(\"2-hydroxy fatty acid\", \"2-OH fatty acid\", \"alpha-hydroxy fatty acids\", \"2-OH fatty acids\", \"C2H3O3R(CH2)n\", \"alpha-OH fatty acid\", \"alpha-OH fatty acids\", \"2-hydroxy fatty acids\", \"alpha-hydroxy fatty acid\", \"alpha-Hydroxy fatty acid\")")
(node 26 "(\"aldehyde\", \"aldehydes\", \"aldehidos\", \"aldehyde\", \"aldehido\", \"Aldehyd\", \"CHOR\", \"aldehydum\", \"Aldehyde\", \"RC(=O)H\", \"[H]C([*])=O\")")
(node 19 "(\"fatty acyl-CoA\", \"C22H35N7O17P3SR\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC([*])=O\", \"fatty acyl-coenzyme As\", \"Fatty acyl CoA\", \"fatty acyl-coenzyme A\")")
(node 30 "(\"fatty acid\", \"fatty acids\", \"Fettsaeuren\", \"OC([*])=O\", \"acidos grasos\", \"Fatty acid\", \"acido graso\", \"acides gras\", \"Fettsaeure\", \"acide gras\", \"CHO2R\")")
(node 10 "(\"unsaturated fatty acyl-CoA\", \"unsaturated acyl-CoA\", \"dehydroacyl-CoAs\", \"unsaturated fatty acyl-coenzyme A\", \"unsaturated FA-CoA\", \"dehydroacyl-CoA\", \"unsaturated fatty acyl-CoAs\")")
(node 21 "(\"3-oxo-fatty acyl-CoA(4-)\", \"3-oxoacyl-coenzyme A\", \"3-ketoacyl-CoA\", \"3-ketoacyl-coenzyme A\", \"CC(C)(COP([O-])(=O)OP([O-])(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP([O-])([O-])=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC(=O)CC([*])=O\", \"C24H33N7O18P3SR\")")
)
(property  84 vector<string> "comprises"
(default "()" "()")
)
(property  85 vector<string> "comprises"
(default "()" "()")
)
(property  86 vector<string> "comprises"
(default "()" "()")
)
(property  87 vector<string> "comprises"
(default "()" "()")
)
(property  88 vector<string> "comprises"
(default "()" "()")
)
(property  89 vector<string> "comprises"
(default "()" "()")
)
(property  90 vector<string> "comprises"
(default "()" "()")
)
(property  91 vector<string> "comprises"
(default "()" "()")
)
(graph_attributes 0 
(string "name" "Fatty acid metabolism")
(string "id" "BMID000000089673")
(string "compartments" "default")
(string "file" "/Users/anna/Desktop/models/sace.tlp")
(string "outside_compartments" "")
)
(graph_attributes 7 
(string "name" "Fatty acid metabolism")
)
(graph_attributes 65 
(string "name" "similar reactions")
)
(graph_attributes 66 
(string "name" "rn:R01177")
)
(graph_attributes 67 
(string "name" "rn:R01177")
)
(graph_attributes 68 
(string "name" "rn:R04747")
)
(graph_attributes 69 
(string "name" "rn:R03778")
)
(graph_attributes 70 
(string "name" "rn:R04742")
)
(graph_attributes 71 
(string "name" "rn:R03858")
)
(graph_attributes 72 
(string "name" "rn:R03991")
)
(graph_attributes 73 
(string "name" "rn:R01175")
)
(graph_attributes 74 
(string "name" "rn:R01175")
)
(graph_attributes 75 
(string "name" "rn:R04751")
)
(graph_attributes 76 
(string "name" "rn:R03777")
)
(graph_attributes 77 
(string "name" "rn:R04754")
)
(graph_attributes 78 
(string "name" "rn:R03857")
)
(graph_attributes 79 
(string "name" "rn:R03990")
)
(graph_attributes 80 
(string "name" "rn:R01279")
)
(graph_attributes 81 
(string "name" "Fatty acid metabolism")
)
(graph_attributes 82 
(string "name" "Fatty acid metabolism quotient")
(string "file" "/Users/anna/Desktop/models/sace.tlp")
)
(graph_attributes 83 
(string "name" "grp_00083")
)
(graph_attributes 84 
(string "name" "grp_00084")
)
(graph_attributes 85 
(string "name" "grp_00085")
)
(graph_attributes 86 
(string "name" "grp_00086")
)
(graph_attributes 87 
(string "name" "grp_00087")
)
(graph_attributes 88 
(string "name" "grp_00088")
)
(graph_attributes 89 
(string "name" "grp_00089")
)
(graph_attributes 90 
(string "name" "grp_00090")
)
(graph_attributes 91 
(string "name" "grp_00091")
)
(controller 
(DataSet "Tulip Classic" 
(DataSet "views" 
(DataSet "view0" 
(DataSet "Node Link Diagram view" 
(DataSet "data" 
(DataSet "Display" 
(bool "antialiased" true)
(bool "arrow" true)
(bool "displayNodes" true)
(bool "displayEdges" true)
(bool "displayMetaNodes" true)
(bool "nodeLabel" true)
(bool "edgeLabel" false)
(bool "metaLabel" false)
(bool "outScreenLabel" false)
(bool "elementOrdered" false)
(bool "elementZOrdered" false)
(bool "edgeColorInterpolation" false)
(bool "edgeSizeInterpolation" false)
(bool "edge3D" false)
(bool "labelScaled" true)
(int "labelMinSize" 10)
(int "labelMaxSize" 30)
(int "selectedNodesStencil" 2)
(int "selectedMetaNodesStencil" 2)
(int "selectedEdgesStencil" 2)
(int "nodesStencil" 65535)
(int "metaNodesStencil" 65535)
(int "edgesStencil" 65535)
(int "nodesLabelStencil" 65535)
(int "metaNodesLabelStencil" 65535)
(int "edgesLabelStencil" 65535)
(bool "edgesMaxSizeToNodesSize" true)
(color "selectionColor" "(255,0,255,255)")
(int "labelsDensity" 100)
(bool "labelsAreBillboarded" false)
(bool "polylines3DAreBicolored" false)
)
(string "scene" "<?xml version=\"1.0\"?>
<scene>
  <data>
    <viewport>(0,0,1432,1032)</viewport>
    <background>(255,255,255,255)</background>
  </data>
  <children>
    <GlLayer name=\"Background\">
      <data>
        <camera>
          <data>
            <center>(0,20,0)</center>
            <eyes>(0,20,63)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>63</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(-31.5,-5.5,-1.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(31.5,45.5,1.5)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>0</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"background\" type=\"Gl2DRect\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
              <top>0</top>
              <bottom>1</bottom>
              <left>0</left>
              <right>1</right>
              <inPercent>1</inPercent>
              <textureName>TulipBitmapDir/tex_back.png</textureName>
              <xInv>0</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Main\">
      <data>
        <camera>
          <data>
            <center>(-1.46796,4.48606,0)</center>
            <eyes>(-1.46796,4.48606,63)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>0.620921</zoomFactor>
            <sceneRadius>63</sceneRadius>
            <d3>1</d3>
            <sceneBoundingBox0>(-20,-45.8901,-4.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(711.972,1026.04,63)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"Hulls\" type=\"GlComposite\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
            </data>
            <children/>
          </GlEntity>
          <GlEntity name=\"graph\" type=\"GlGraphComposite\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Foreground\">
      <data>
        <camera>
          <data>
            <center>(0,20,0)</center>
            <eyes>(0,20,63)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>63</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(-20,-45.8901,-4.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(711.972,1026.04,63)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"labrilogo\" type=\"Gl2DRect\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
              <top>55</top>
              <bottom>5</bottom>
              <left>5</left>
              <right>55</right>
              <inPercent>0</inPercent>
              <textureName>TulipBitmapDir/logolabri.jpg</textureName>
              <xInv>1</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
  </children>
</scene>
")
)
)
(uint "id" 82)
(int "x" 0)
(int "y" 0)
(int "width" 1434)
(int "height" 1059)
(bool "maximized" true)
)
(DataSet "view1" 
(DataSet "Python Script view" 
(string "script code" "# Powered by Python 2.7

# To cancel the modifications performed by the script
# on the current graph, click on the undo button.

# Some useful keyboards shortcuts : 
#   * Ctrl + D : comment selected lines.
#   * Ctrl + Shift + D  : uncomment selected lines.
#   * Ctrl + I : indent selected lines.
#   * Ctrl + Shift + I  : unindent selected lines.
#   * Ctrl + Return  : run script.
#   * Ctrl + F  : find selected text.
#   * Ctrl + R  : replace selected text.
#   * Ctrl + Space  : show auto-completion dialog.

from tulip import *

# the updateVisualization(centerViews = True) function can be called
# during script execution to update the opened views

# the pauseScript() function can be called to pause the script execution.
# To resume the script execution, you will have to click on the \"Run script \" button.

# the runGraphScript(scriptFile, graph) function can be called to launch another edited script on a tlp.Graph object.
# The scriptFile parameter defines the script name to call (in the form [a-zA-Z0-9_]+.py)

# the main(graph) function must be defined 
# to run the script on the current graph

def main(graph): 
	comprises =  graph.getStringVectorProperty(\"comprises\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	synonyms =  graph.getStringVectorProperty(\"synonyms\")
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	boundaryCondition =  graph.getBooleanProperty(\"boundaryCondition\")
	charge =  graph.getIntegerProperty(\"charge\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	class_ =  graph.getStringProperty(\"class\")
	clone =  graph.getBooleanProperty(\"clone\")
	compartment =  graph.getStringProperty(\"compartment\")
	constant =  graph.getBooleanProperty(\"constant\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	encodes =  graph.getStringVectorProperty(\"encodes\")
	fastReaction =  graph.getBooleanProperty(\"fastReaction\")
	geneAssociation =  graph.getStringProperty(\"geneAssociation\")
	hasOnlySubstanceUnits =  graph.getBooleanProperty(\"hasOnlySubstanceUnits\")
	hasOutsideConnections =  graph.getBooleanProperty(\"hasOutsideConnections\")
	hasPart =  graph.getStringVectorProperty(\"hasPart\")
	hasProperty =  graph.getStringVectorProperty(\"hasProperty\")
	hasVersion =  graph.getStringVectorProperty(\"hasVersion\")
	id_ =  graph.getStringProperty(\"id\")
	initialAmount =  graph.getDoubleProperty(\"initialAmount\")
	initialConcentration =  graph.getDoubleProperty(\"initialConcentration\")
	is_ =  graph.getStringVectorProperty(\"is\")
	isDescribedBy =  graph.getStringVectorProperty(\"isDescribedBy\")
	isEncodedBy =  graph.getStringVectorProperty(\"isEncodedBy\")
	isHomologTo =  graph.getStringVectorProperty(\"isHomologTo\")
	isPartOf =  graph.getStringVectorProperty(\"isPartOf\")
	isPropertyOf =  graph.getStringVectorProperty(\"isPropertyOf\")
	isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
	listOfProducts =  graph.getIntegerVectorProperty(\"listOfProducts\")
	listOfReactants =  graph.getIntegerVectorProperty(\"listOfReactants\")
	membrane =  graph.getBooleanProperty(\"membrane\")
	membranePos =  graph.getIntegerProperty(\"membranePos\")
	name =  graph.getStringProperty(\"name\")
	nbClones =  graph.getIntegerProperty(\"nbClones\")
	occursIn =  graph.getStringVectorProperty(\"occursIn\")
	outsideCompartment =  graph.getStringProperty(\"outsideCompartment\")
	outsideMembrane =  graph.getBooleanProperty(\"outsideMembrane\")
	proteinAssociation =  graph.getStringProperty(\"proteinAssociation\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	reversible =  graph.getBooleanProperty(\"reversible\")
	sboTerm =  graph.getStringProperty(\"sboTerm\")
	speciesType =  graph.getStringProperty(\"speciesType\")
	stoichiometry =  graph.getDoubleProperty(\"stoichiometry\")
	subSystem =  graph.getStringVectorProperty(\"subSystem\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	viewFont =  graph.getStringProperty(\"viewFont\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	viewLabel =  graph.getStringProperty(\"viewLabel\")
	viewLabelColor =  graph.getColorProperty(\"viewLabelColor\")
	viewLabelPosition =  graph.getIntegerProperty(\"viewLabelPosition\")
	viewLayout =  graph.getLayoutProperty(\"viewLayout\")
	viewMetaGraph =  graph.getGraphProperty(\"viewMetaGraph\")
	viewRotation =  graph.getDoubleProperty(\"viewRotation\")
	viewSelection =  graph.getBooleanProperty(\"viewSelection\")
	viewShape =  graph.getIntegerProperty(\"viewShape\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	viewSrcAnchorShape =  graph.getIntegerProperty(\"viewSrcAnchorShape\")
	viewSrcAnchorSize =  graph.getSizeProperty(\"viewSrcAnchorSize\")
	viewTexture =  graph.getStringProperty(\"viewTexture\")
	viewTgtAnchorShape =  graph.getIntegerProperty(\"viewTgtAnchorShape\")
	viewTgtAnchorSize =  graph.getSizeProperty(\"viewTgtAnchorSize\")

	grey = tlp.Color(211,211,211)
	for n in graph.getNodes():
		if viewColor[n] != grey:
			print viewLabel[n], viewColor[n]
")
(DataSet "main_scripts" 
(string "main_script0" "/Users/anna/Documents/PhD/tulip/src/python/new_pipeline.py")
(string "main_script_src0" "from tulip import *
from filter_root import filter_graph
from metabolic_widgets import SpeciesTypeSelectionDialog
from extract_chebi import saveOnto, getOnto
from ontology import save
from shorten_names import shorten
from generalize import generalize
from graph_tools import findSubGraphByName
import sys
import os

def main(graph):
#	root = graph.getRoot()
#	mark_ubiquitous_species(root)
	generalize(graph)
####	saveOnto(graph, \"/Users/anna/Documents/chebi_slimo.obo\")
#	root = graph.getRoot()
#	runGraphScript(\"draw_arrows.py\", root)
#	dataSet = tlp.getDefaultPluginParameters(\"ChebiAnnotator\", root)
#	tlp.applyAlgorithm(root, dataSet, \"ChebiAnnotator\")
#	runGraphScript(\"update_chebi_id_values.py\", root)
#	mark_ubiquitous_species(root)
#	runGraphScript(\"build_compartments_hierarchy.py\", root)
#
#	cNames = set(root.getAttribute(\"compartments\").split(\";\"))
#	for comp_name in cNames:
#		if not comp_name: continue
#		if comp_name == \"cytoplasm\": continue
#		comp = findSubGraphByName(root, comp_name)
#		if not comp or not len(list(comp.getNodes())): continue
#		subs = list(comp.getSubGraphs())
#		if subs:
#			names = {sub.getName() for sub in subs}
#			if names & cNames: continue
#			else: 
#				comp = subs[0]
#				comp_name = comp.getName()
#		runGraphScript(\"draw_compartment.py\", comp)
#		cd = findSubGraphByName(root, \"compartment drawings\")
#		if not cd: continue
#		comp = findSubGraphByName(cd, comp_name)
#		if not comp: continue
#		print comp_name
#		qo = findSubGraphByName(comp, \"quotient opened\")
#		if not qo: continue
#		filter_graph(comp, qo)
####		print \"GENERALIZE\"
####		gc = generalize(comp)
####		if not gc: continue
#######		runGraphScript(\"build_compartments_hierarchy.py\", generalized_comp)
#######		gc = findSubGraphByName(generalized_comp, comp_name)
#######		if not gc: continue
#######		runGraphScript(\"shorten_names.py\", gc)
####		runGraphScript(\"draw_compartment.py\", gc)	
###	runGraphScript(\"shorten_names.py\", root)
##

def mark_ubiquitous_species(root):
	ub = root.getBooleanProperty(\"ubiquitous\")
	speciesTypeSelDialog = SpeciesTypeSelectionDialog(root, title=\"Select ubiquitous species\",\\
	condition=\"Mark ubiquitous those with degree greater than: \", left_label=\"Specific species:\",\\
	right_label=\"Ubiquitous species:\")
	speciesTypeSelDialog.exec_()
	ub_sps = speciesTypeSelDialog.getSpeciesTypesToDuplicate()
#	print ub_sps
	for n in root.getNodes():
		if root[\"speciesType\"][n] in ub_sps:
			ub[n] = True
")
(string "main_script1" "/Users/anna/Documents/PhD/tulip/src/python/filter_root.py")
(string "main_script_src1" "from tulip import *

def main(graph):
	root = graph.getRoot()
#	root = graph.getSuperGraph()
#	while root.getName() != graph.getName():
#		root = graph.getSuperGraph()
	
	filter_graph(root, graph)
		
def filter_graph(root, graph):
	nds = list(root.getNodes())
	for n in nds:
		if not graph.isElement(n) or not list(graph.getInOutEdges(n)):
			root.delNode(n)
	for e in root.getEdges():
		if not graph.isElement(e):
			root.delEdge(e, True)
		
	for n in graph.getNodes():
		for prop in root.getProperties():
			root[prop][n] = graph[prop][n]
			
	for sub in root.getSubGraphs():
		root.delAllSubGraphs(sub)
")
(string "main_script2" "/Users/anna/Documents/PhD/tulip/src/python/modules/reaction_clusters_2_metanodes.py")
(string "main_script_src2" "from tulip import *
import ontology
import os

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	clones = [node]
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())
		
def factor(graph):
	clone = graph.addCloneSubGraph(graph.getName())
	quotient = graph.addCloneSubGraph(graph.getName() + \" quotient\")
	ancestor2nodes = {}
	for node in quotient.getNodes():
		ancestor = graph[\"ancestor\"][node]
		if ancestor:
			isReaction = graph[\"reaction\"][node]
			if not isReaction: 				
				neighbours = set()
#				for nn in getClones(quotient, node):
#					for n in quotient.getInNodes(nn):
#						neighbours.add((\"in\", graph[\"ancestor\"][n]))
#					for n in quotient.getOutNodes(nn):
#						neighbours.add((\"out\", graph[\"ancestor\"][n]))
				ancestor = ancestor, tuple(sorted(neighbours))
			ancestor = ancestor, isReaction 
			if ancestor2nodes.has_key(ancestor):
				ancestor2nodes[ancestor].append(node)
			else:
				ancestor2nodes[ancestor] = [node]
	
	ancestor2node_neighbours = {}		
	keys = list(ancestor2nodes.keys())
	for (ancestor, isReaction) in keys:
		if isReaction: continue
		nodes = ancestor2nodes[(ancestor, isReaction)]
		del ancestor2nodes[(ancestor, isReaction)]
		ancestor, neighbours = ancestor
		if ancestor2node_neighbours.has_key(ancestor):
			ancestor2node_neighbours[ancestor].append((nodes, set(neighbours)))
		else:
			ancestor2node_neighbours[ancestor] = [(nodes, set(neighbours))]
		
	for ancestor, lst in ancestor2node_neighbours.iteritems():
		changed = True
		while changed:
			changed = False
			new_lst = []
			for (nodes, neighbours) in lst:
				not_found = True
				for (new_nodes, new_neighbours) in new_lst:
					if neighbours & new_neighbours:
						new_neighbours |= neighbours
						new_nodes.extend(nodes)
						not_found = False
						changed = True
						break
				if not_found:
					new_lst.append((nodes, neighbours))
			lst = new_lst
		for (nodes, neighbours) in lst:
			new_ancestor = (ancestor, tuple(sorted(neighbours))), False
			if ancestor2nodes.has_key(new_ancestor):
				ancestor2nodes[new_ancestor].extend(nodes)
			else:
				ancestor2nodes[new_ancestor] = nodes
		
#	dir_ = os.path.dirname(ontology.__file__)
#	onto = ontology.parse(\"{0}/chebi.obo\".format(dir_))
			
	for (ancestor, isReaction), nodes in ancestor2nodes.iteritems():
		if len(nodes) <= 1: continue		
		all_nodes = list(nodes)
		id2ubN = {}
		if isReaction:
			for node in nodes:
				for n in quotient.getInOutNodes(node):
					if quotient.getRoot()[\"ubiquitous\"][n]:
						id_ = quotient.getRoot()[\"id\"][n]
						if id2ubN.has_key(id_): id2ubN[id_].append(n)
						else: id2ubN[id_] = [n]
		
			ubs = list(quotient.getInOutNodes(nodes[0]))
			isUb = quotient.getRoot()[\"ubiquitous\"]
			for n in ubs:
				if not isUb[n]: continue
				id_ = quotient.getRoot()[\"id\"][n]
				metaNode = quotient.createMetaNode(id2ubN[id_], False)
				updateProps(metaNode, n, quotient, clone)
				isUb[metaNode] = True
				quotient[\"viewSize\"][metaNode] = tlp.Size(5, 5) #bb.width(), bb.height())	
				quotient[\"viewLabel\"][metaNode] = clone[\"viewLabel\"][n]
				graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"chebi_id\"][n]
				quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]	
				quotient[\"clone\"][metaNode] = clone[\"clone\"][n]	
				updateComprises(id2ubN[id_], quotient, clone, metaNode)
					
		metaNode = quotient.createMetaNode(all_nodes, False)
		updateProps(metaNode, nodes[0], quotient, clone)
			
		if isReaction:	
			quotient[\"viewSize\"][metaNode] = tlp.Size(6, 6) #bb.width(), bb.height())
			quotient[\"viewLabel\"][metaNode] = \"generalized {0}\".format(clone[\"name\"][nodes[0]])
			for n in nodes:
				if not clone[\"reversible\"][metaNode]:
					quotient[\"reversible\"][metaNode] = False	
					break
			quotient[\"geneAssociation\"][metaNode] = \" or \".join(clone[\"geneAssociation\"][it] for it in nodes)	
			updateEcNumber(metaNode, nodes, quotient, clone)			
		else:		
			quotient[\"viewSize\"][metaNode] = tlp.Size(10, 10) #bb.width(), bb.height())	
			quotient[\"viewLabel\"][metaNode] = quotient[\"ancestor\"][metaNode]
			graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"ancestor_chebi_id\"][nodes[0]]
#			updateChebiInfo(metaNode, nodes, quotient, clone, onto)	
							
		quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]
			
		updateComprises(nodes, quotient, clone, metaNode)
		
def updateComprises(nodes, quotient, clone, metaNode):
	comprises = []
	for it in nodes:
		if not clone.isElement(it):
			print it
			continue
		if clone.getStringVectorProperty(\"comprises\")[it]:
			comprises.extend(clone[\"comprises\"][it])
		else:
			comprises.append(clone[\"speciesType\"][it])
	quotient.getStringVectorProperty(\"comprises\")[metaNode] = comprises

def updateChebiInfo(metaNode, nodes, quotient, clone, onto):
	common_parent = findCommonParent(nodes, clone, onto)
	if common_parent:
		quotient[\"viewLabel\"][metaNode] = common_parent.getName()
		par_id = list(common_parent.getAllIds())
		quotient[\"chebi_id\"][metaNode] = par_id
	
def updateEcNumber(metaNode, nodes, quotient, clone):
	ec = set()
	ecNum = clone.getStringProperty(\"ecNumber\")
	for n in nodes:
		numbers = ecNum[n]
		if numbers:
			numbers = set(numbers.split(\",\"))
			if not ec:
				ec = numbers
			else:
				intersection = ec & numbers
				if not intersection:
					print ec
					print numbers
					concensus = list(ec)[0].split(\".\")
					for num in ec | numbers:
						i = 0
						for it in num.split(\".\"):
							if concensus[i] == '-': break
							if concensus[i] != it:
								if i == 0:
									ec = set()
									break
								while i < 4:
									concensus[i] = '-'
									i += 1
								break
							i += 1
					ec = {'.'.join(concensus)}
				else:
					ec = intersection
	quotient[\"ecNumber\"][metaNode] = \",\".join(ec)
		
def findCommonParent(nodes, clone, onto):
	common_parent = None
	for n in nodes:
		chebi_ids = clone[\"chebi_id\"][n]
		if not chebi_ids: continue
		term = None
		for chebi_id in chebi_ids:
			term = onto.getTerm(chebi_id)
			if term: break
		if not term:
			common_parent = None
			break
		if not common_parent:
			common_parent = term
		else:
			common_parent = onto.commonParent(common_parent, term)
			if not common_parent:
				break
	return common_parent
	
def updateProps(metaNode, node, quotient, clone):
	for prop in [\"ancestor\", \"compartment\", \"outsideCompartment\", \\
	\"reaction\", \"reversible\", \"sboTerm\", \"speciesType\", \"ubiquitous\", \\
	\"viewBorderColor\", \"viewBorderWidth\", \"viewColor\", \"viewFont\", \"viewFontSize\", \\
	\"viewLabelColor\", \"viewLabelPosition\", \"viewLayout\", \"viewRotation\", \"viewSelection\", \\
	\"viewShape\", \"viewTexture\"]:
		quotient[prop][metaNode] = clone[prop][node]
	quotient[\"id\"][metaNode] = \"meta_\" + clone[\"id\"][node]
")
(string "main_script3" "")
(string "main_script_src3" "# Powered by Python 2.7

# To cancel the modifications performed by the script
# on the current graph, click on the undo button.

# Some useful keyboards shortcuts : 
#   * Ctrl + D : comment selected lines.
#   * Ctrl + Shift + D  : uncomment selected lines.
#   * Ctrl + I : indent selected lines.
#   * Ctrl + Shift + I  : unindent selected lines.
#   * Ctrl + Return  : run script.
#   * Ctrl + F  : find selected text.
#   * Ctrl + R  : replace selected text.
#   * Ctrl + Space  : show auto-completion dialog.

from tulip import *

# the updateVisualization(centerViews = True) function can be called
# during script execution to update the opened views

# the pauseScript() function can be called to pause the script execution.
# To resume the script execution, you will have to click on the \"Run script \" button.

# the runGraphScript(scriptFile, graph) function can be called to launch another edited script on a tlp.Graph object.
# The scriptFile parameter defines the script name to call (in the form [a-zA-Z0-9_]+.py)

# the main(graph) function must be defined 
# to run the script on the current graph

def main(graph): 
	comprises =  graph.getStringVectorProperty(\"comprises\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	synonyms =  graph.getStringVectorProperty(\"synonyms\")
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	boundaryCondition =  graph.getBooleanProperty(\"boundaryCondition\")
	charge =  graph.getIntegerProperty(\"charge\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	class_ =  graph.getStringProperty(\"class\")
	clone =  graph.getBooleanProperty(\"clone\")
	compartment =  graph.getStringProperty(\"compartment\")
	constant =  graph.getBooleanProperty(\"constant\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	encodes =  graph.getStringVectorProperty(\"encodes\")
	fastReaction =  graph.getBooleanProperty(\"fastReaction\")
	geneAssociation =  graph.getStringProperty(\"geneAssociation\")
	hasOnlySubstanceUnits =  graph.getBooleanProperty(\"hasOnlySubstanceUnits\")
	hasOutsideConnections =  graph.getBooleanProperty(\"hasOutsideConnections\")
	hasPart =  graph.getStringVectorProperty(\"hasPart\")
	hasProperty =  graph.getStringVectorProperty(\"hasProperty\")
	hasVersion =  graph.getStringVectorProperty(\"hasVersion\")
	id_ =  graph.getStringProperty(\"id\")
	initialAmount =  graph.getDoubleProperty(\"initialAmount\")
	initialConcentration =  graph.getDoubleProperty(\"initialConcentration\")
	is_ =  graph.getStringVectorProperty(\"is\")
	isDescribedBy =  graph.getStringVectorProperty(\"isDescribedBy\")
	isEncodedBy =  graph.getStringVectorProperty(\"isEncodedBy\")
	isHomologTo =  graph.getStringVectorProperty(\"isHomologTo\")
	isPartOf =  graph.getStringVectorProperty(\"isPartOf\")
	isPropertyOf =  graph.getStringVectorProperty(\"isPropertyOf\")
	isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
	listOfProducts =  graph.getIntegerVectorProperty(\"listOfProducts\")
	listOfReactants =  graph.getIntegerVectorProperty(\"listOfReactants\")
	membrane =  graph.getBooleanProperty(\"membrane\")
	membranePos =  graph.getIntegerProperty(\"membranePos\")
	name =  graph.getStringProperty(\"name\")
	nbClones =  graph.getIntegerProperty(\"nbClones\")
	occursIn =  graph.getStringVectorProperty(\"occursIn\")
	outsideCompartment =  graph.getStringProperty(\"outsideCompartment\")
	outsideMembrane =  graph.getBooleanProperty(\"outsideMembrane\")
	proteinAssociation =  graph.getStringProperty(\"proteinAssociation\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	reversible =  graph.getBooleanProperty(\"reversible\")
	sboTerm =  graph.getStringProperty(\"sboTerm\")
	speciesType =  graph.getStringProperty(\"speciesType\")
	stoichiometry =  graph.getDoubleProperty(\"stoichiometry\")
	subSystem =  graph.getStringVectorProperty(\"subSystem\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	viewFont =  graph.getStringProperty(\"viewFont\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	viewLabel =  graph.getStringProperty(\"viewLabel\")
	viewLabelColor =  graph.getColorProperty(\"viewLabelColor\")
	viewLabelPosition =  graph.getIntegerProperty(\"viewLabelPosition\")
	viewLayout =  graph.getLayoutProperty(\"viewLayout\")
	viewMetaGraph =  graph.getGraphProperty(\"viewMetaGraph\")
	viewRotation =  graph.getDoubleProperty(\"viewRotation\")
	viewSelection =  graph.getBooleanProperty(\"viewSelection\")
	viewShape =  graph.getIntegerProperty(\"viewShape\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	viewSrcAnchorShape =  graph.getIntegerProperty(\"viewSrcAnchorShape\")
	viewSrcAnchorSize =  graph.getSizeProperty(\"viewSrcAnchorSize\")
	viewTexture =  graph.getStringProperty(\"viewTexture\")
	viewTgtAnchorShape =  graph.getIntegerProperty(\"viewTgtAnchorShape\")
	viewTgtAnchorSize =  graph.getSizeProperty(\"viewTgtAnchorSize\")

	for n in graph.getNodes():
		if viewSize[n].getH() == 6:
			viewSize[n] = tlp.Size(9,9,9)
			
		if viewSize[n].getH() == 4:
			viewSize[n] = tlp.Size(5,5,5)
				
		if viewSize[n].getH() == 3:
			viewSize[n] = tlp.Size(4,4,4)
			
		if viewSize[n].getH() == 1:
			viewSize[n] = tlp.Size(3,3,3)
			
			
")
(string "main_script4" "")
(string "main_script_src4" "# Powered by Python 2.7

# To cancel the modifications performed by the script
# on the current graph, click on the undo button.

# Some useful keyboards shortcuts : 
#   * Ctrl + D : comment selected lines.
#   * Ctrl + Shift + D  : uncomment selected lines.
#   * Ctrl + I : indent selected lines.
#   * Ctrl + Shift + I  : unindent selected lines.
#   * Ctrl + Return  : run script.
#   * Ctrl + F  : find selected text.
#   * Ctrl + R  : replace selected text.
#   * Ctrl + Space  : show auto-completion dialog.

from tulip import *

# the updateVisualization(centerViews = True) function can be called
# during script execution to update the opened views

# the pauseScript() function can be called to pause the script execution.
# To resume the script execution, you will have to click on the \"Run script \" button.

# the runGraphScript(scriptFile, graph) function can be called to launch another edited script on a tlp.Graph object.
# The scriptFile parameter defines the script name to call (in the form [a-zA-Z0-9_]+.py)

# the main(graph) function must be defined 
# to run the script on the current graph

def main(graph): 
	comprises =  graph.getStringVectorProperty(\"comprises\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	synonyms =  graph.getStringVectorProperty(\"synonyms\")
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	boundaryCondition =  graph.getBooleanProperty(\"boundaryCondition\")
	charge =  graph.getIntegerProperty(\"charge\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	class_ =  graph.getStringProperty(\"class\")
	clone =  graph.getBooleanProperty(\"clone\")
	compartment =  graph.getStringProperty(\"compartment\")
	constant =  graph.getBooleanProperty(\"constant\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	encodes =  graph.getStringVectorProperty(\"encodes\")
	fastReaction =  graph.getBooleanProperty(\"fastReaction\")
	geneAssociation =  graph.getStringProperty(\"geneAssociation\")
	hasOnlySubstanceUnits =  graph.getBooleanProperty(\"hasOnlySubstanceUnits\")
	hasOutsideConnections =  graph.getBooleanProperty(\"hasOutsideConnections\")
	hasPart =  graph.getStringVectorProperty(\"hasPart\")
	hasProperty =  graph.getStringVectorProperty(\"hasProperty\")
	hasVersion =  graph.getStringVectorProperty(\"hasVersion\")
	id_ =  graph.getStringProperty(\"id\")
	initialAmount =  graph.getDoubleProperty(\"initialAmount\")
	initialConcentration =  graph.getDoubleProperty(\"initialConcentration\")
	is_ =  graph.getStringVectorProperty(\"is\")
	isDescribedBy =  graph.getStringVectorProperty(\"isDescribedBy\")
	isEncodedBy =  graph.getStringVectorProperty(\"isEncodedBy\")
	isHomologTo =  graph.getStringVectorProperty(\"isHomologTo\")
	isPartOf =  graph.getStringVectorProperty(\"isPartOf\")
	isPropertyOf =  graph.getStringVectorProperty(\"isPropertyOf\")
	isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
	listOfProducts =  graph.getIntegerVectorProperty(\"listOfProducts\")
	listOfReactants =  graph.getIntegerVectorProperty(\"listOfReactants\")
	membrane =  graph.getBooleanProperty(\"membrane\")
	membranePos =  graph.getIntegerProperty(\"membranePos\")
	name =  graph.getStringProperty(\"name\")
	nbClones =  graph.getIntegerProperty(\"nbClones\")
	occursIn =  graph.getStringVectorProperty(\"occursIn\")
	outsideCompartment =  graph.getStringProperty(\"outsideCompartment\")
	outsideMembrane =  graph.getBooleanProperty(\"outsideMembrane\")
	proteinAssociation =  graph.getStringProperty(\"proteinAssociation\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	reversible =  graph.getBooleanProperty(\"reversible\")
	sboTerm =  graph.getStringProperty(\"sboTerm\")
	speciesType =  graph.getStringProperty(\"speciesType\")
	stoichiometry =  graph.getDoubleProperty(\"stoichiometry\")
	subSystem =  graph.getStringVectorProperty(\"subSystem\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	viewFont =  graph.getStringProperty(\"viewFont\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	viewLabel =  graph.getStringProperty(\"viewLabel\")
	viewLabelColor =  graph.getColorProperty(\"viewLabelColor\")
	viewLabelPosition =  graph.getIntegerProperty(\"viewLabelPosition\")
	viewLayout =  graph.getLayoutProperty(\"viewLayout\")
	viewMetaGraph =  graph.getGraphProperty(\"viewMetaGraph\")
	viewRotation =  graph.getDoubleProperty(\"viewRotation\")
	viewSelection =  graph.getBooleanProperty(\"viewSelection\")
	viewShape =  graph.getIntegerProperty(\"viewShape\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	viewSrcAnchorShape =  graph.getIntegerProperty(\"viewSrcAnchorShape\")
	viewSrcAnchorSize =  graph.getSizeProperty(\"viewSrcAnchorSize\")
	viewTexture =  graph.getStringProperty(\"viewTexture\")
	viewTgtAnchorShape =  graph.getIntegerProperty(\"viewTgtAnchorShape\")
	viewTgtAnchorSize =  graph.getSizeProperty(\"viewTgtAnchorSize\")

	grey = tlp.Color(211,211,211)
	for n in graph.getNodes():
		if viewColor[n] != grey:
			print viewLabel[n], viewColor[n]
")
(int "main_script_id" 4)
)
(DataSet "modules" 
(string "module0" "/Users/anna/Documents/PhD/tulip/src/python/modules/edge_length_optimizer.py")
(string "module_src0" "from tulip import *
import itertools
import metabolic_utils

def findBestLayoutConfiguration(sg, layoutConfigurations):
	spacing = 30
	minAvgEdgeLength = 1000000
	bestConf = None
	wholeConfs = list(itertools.product(*layoutConfigurations))
	
	trSg = sg.addSubGraph()
	contentSg = sg.addSubGraph()
	membranePos = -1
	for n in sg.getNodes():
		if sg[\"membrane\"][n] and sg[\"reaction\"][n]:
			membranePos = sg[\"membranePos\"][n]
			trSg.addNode(n)
			for ne in sg.getInOutNodes(n):
				if sg[\"clone\"][ne] or sg[\"outsideMembrane\"][ne]:
					trSg.addNode(ne)
					trSg.addEdge(sg.existEdge(n, ne, False))
		elif not trSg.isElement(n):
			canAdd = True
			if sg[\"clone\"][n] or sg[\"outsideMembrane\"][n]:
				if sg[\"membrane\"][sg.getInOutNodes(n).next()]:
					canAdd = False
			if not canAdd:
				continue
				
			contentSg.addNode(n)				
			for ne in sg.getInOutNodes(n):
				if not sg[\"membrane\"][ne]:
					contentSg.addNode(ne)
					contentSg.addEdge(sg.existEdge(n, ne, False))	
	
	for conf in wholeConfs:
		for g in conf:
			for n in g.getNodes():
				sg[\"viewLayout\"][n] = g[\"viewLayout\"][n]
			for e in g.getEdges():
				sg[\"viewLayout\"][e] = g[\"viewLayout\"][e]
				
		if membranePos != -1:
			bbTr = tlp.computeBoundingBox(trSg, trSg[\"viewLayout\"], trSg[\"viewSize\"], trSg[\"viewRotation\"])
			bbContent = tlp.computeBoundingBox(contentSg, contentSg[\"viewLayout\"], contentSg[\"viewSize\"], contentSg[\"viewRotation\"])
			if membranePos == 0:
				newCenter = tlp.Vec3f(bbTr[1][0] + spacing + bbContent.width() / 2, bbTr.center()[1], 0)
			elif membranePos == 1:
				newCenter = tlp.Vec3f(bbTr.center()[0], bbTr[0][1] - spacing - bbContent.height() / 2, 0)
			elif membranePos == 2:
				newCenter = tlp.Vec3f(bbTr[0][0] - spacing - bbContent.width() / 2, bbTr.center()[1], 0)
			elif membranePos == 3:
				newCenter = tlp.Vec3f(bbTr.center()[0], bbTr[1][1] + spacing + bbContent.height() / 2, 0)	
			sg[\"viewLayout\"].center(newCenter, contentSg)
			for n in sg.getNodes():
				for g in conf:
					if g.isElement(n):
						g[\"viewLayout\"][n] = sg[\"viewLayout\"][n]
			for e in sg.getEdges():
				for g in conf:
					if g.isElement(e):
						g[\"viewLayout\"][e] = sg[\"viewLayout\"][e]
		avgEdgeLength = sg[\"viewLayout\"].averageEdgeLength()
		if (avgEdgeLength <= minAvgEdgeLength):
			minAvgEdgeLength = avgEdgeLength
			bestConf = conf
	sg.delSubGraph(trSg)
	sg.delSubGraph(contentSg)
				
	for g in bestConf:
		for n in g.getNodes():
			sg[\"viewLayout\"][n] = g[\"viewLayout\"][n]
			sg[\"viewSize\"][n] = g[\"viewSize\"][n]
			sg[\"viewMetaGraph\"][n] = g[\"viewMetaGraph\"][n]
		for e in g.getEdges():
			sg[\"viewLayout\"][e] = g[\"viewLayout\"][e]

def findBestLayoutConfiguration2(sg, selectedNodes):
		ccfp = tlp.ConnectedTest.computeConnectedComponents(selectedNodes)
		for cc in ccfp:
			layoutConfigurations = []
			for n in cc:
				metaSg = sg[\"viewMetaGraph\"][n]
				metaSgConfs = []
				for conf in metaSg.getSubGraphs():
					metaSgConfs.append(conf)
				if len(metaSgConfs) > 0:
					layoutConfigurations.append(metaSgConfs)
			nbConfs = 1
			for confs in layoutConfigurations:
				print nbConfs
				nbConfs *= len(confs)
			print nbConfs
			if nbConfs < 50000:
				findBestLayoutConfiguration(sg, layoutConfigurations)
			else:
				sgCC = selectedNodes.inducedSubGraph(cc)
				betweeness = tlp.DoubleProperty(sgCC)
				dataSet = tlp.getDefaultPluginParameters(\"Betweenness Centrality\")
				dataSet[\"norm\"] = True
				sgCC.computeDoubleProperty(\"Betweenness Centrality\", betweeness, dataSet)
				firstPass = []
				secondPass = []
				for n in sgCC.getNodes():
					if betweeness[n] > betweeness.getNodeMax()/2:
						firstPass.append(n)
					else:
						secondPass.append(n)
						
				fpSg = sgCC.inducedSubGraph(firstPass)
				spSg = sgCC.inducedSubGraph(secondPass)
												
				findBestLayoutConfiguration2(sg, fpSg)
				findBestLayoutConfiguration2(sg, spSg)
				
				selectedNodes.delAllSubGraphs(sgCC)	

def optimizeEdgeLengthOnQuotient(quotient):
	origLayoutSg = quotient.getSuperGraph().addSubGraph(quotient.getName() + \" original\")
	origLayoutSgLayout = origLayoutSg.getLocalLayoutProperty(\"viewLayout\")
	finalLayoutSg = quotient.getSuperGraph().addSubGraph(quotient.getName() + \" final\")
	finalLayoutSgLayout = finalLayoutSg.getLocalLayoutProperty(\"viewLayout\")
	layoutConfigurations = []
	metaNodes = []
	nodesToRemove = []
	for n in quotient.getNodes():
		if quotient.isMetaNode(n):
			metaNodes.append(n)
			metaGraph = quotient[\"viewMetaGraph\"][n]
			metaGraph[\"viewLayout\"].center(quotient[\"viewLayout\"][n])
			
			metaSgConfs = []
			for conf in metaGraph.getSubGraphs():
				metaSgConfs.append(conf)
				conf[\"viewLayout\"].center(quotient[\"viewLayout\"][n])
			if len(metaSgConfs) > 0:	
				layoutConfigurations.append(metaSgConfs)	
			
			for ne in metaGraph.getNodes():
				nodesToRemove.append(ne)
				origLayoutSg.addNode(ne)
				finalLayoutSg.addNode(ne)
				origLayoutSgLayout[ne] = metaGraph[\"viewLayout\"][ne] 
				finalLayoutSgLayout[ne] = metaGraph[\"viewLayout\"][ne]
			for e in metaGraph.getEdges():
				origLayoutSg.addEdge(e)
				finalLayoutSg.addEdge(e)
				origLayoutSgLayout[e] = metaGraph[\"viewLayout\"][e] 
				finalLayoutSgLayout[e] = metaGraph[\"viewLayout\"][e]	
		else:
			origLayoutSg.addNode(n)
			finalLayoutSg.addNode(n)
			origLayoutSgLayout[n] = quotient[\"viewLayout\"][n] 
			finalLayoutSgLayout[n] = quotient[\"viewLayout\"][n]
			
	for e in quotient.getEdges():
		if quotient.isMetaEdge(e):
			for ee in metabolic_utils.getOriginalEdgesInMetaEdge(quotient, e):
				if origLayoutSg.isElement(quotient.getRoot().source(ee)) and origLayoutSg.isElement(quotient.getRoot().target(ee)):
					origLayoutSg.addEdge(ee)
					finalLayoutSg.addEdge(ee)
		else:
			origLayoutSg.addEdge(e)
			finalLayoutSg.addEdge(e)
			
	if len(layoutConfigurations) > 0:
			nbConfs = 1
			for confs in layoutConfigurations:
				nbConfs *= len(confs)
			print nbConfs
			if nbConfs < 50000:	
				findBestLayoutConfiguration(finalLayoutSg, layoutConfigurations)
			else:
				firstPass = []
				secondPass = []
				quotient.push(False)
				tlp.SimpleTest.makeSimple(quotient)
				for n in metaNodes:
					if quotient.deg(n) > 2 and not quotient[\"membrane\"][n]:
						firstPass.append(n)
					elif not quotient[\"membrane\"][n]:
						secondPass.append(n)	
				quotient.pop()
				fpSg = quotient.inducedSubGraph(firstPass)
				spSg = quotient.inducedSubGraph(secondPass)
				
				fpSg.setName(\"first pass\")
				spSg.setName(\"second pass\")
					
				findBestLayoutConfiguration2(finalLayoutSg, fpSg)
				findBestLayoutConfiguration2(finalLayoutSg, spSg)
				
				quotient.delSubGraph(fpSg)
				quotient.delSubGraph(spSg)	
	
	for n in quotient.getNodes():
		if quotient.isMetaNode(n):
			sel = tlp.BooleanProperty(quotient.getSuperGraph())
			metaNodeSg = quotient[\"viewMetaGraph\"][n]
			for nm in metaNodeSg.getNodes():
				metaNodeSg[\"viewLayout\"][nm] = finalLayoutSgLayout[nm]
				sel[nm] = True
			for e in metaNodeSg.getEdges():
				metaNodeSg[\"viewLayout\"][e] = finalLayoutSg[\"viewLayout\"][e]	
				sel[e] = True
				
			bbOld = tlp.computeBoundingBox(origLayoutSg, origLayoutSg[\"viewLayout\"], origLayoutSg[\"viewSize\"], origLayoutSg[\"viewRotation\"], sel)	
			bbNew = tlp.computeBoundingBox(finalLayoutSg, finalLayoutSg[\"viewLayout\"], finalLayoutSg[\"viewSize\"], finalLayoutSg[\"viewRotation\"], sel)
			
			quotient[\"viewLayout\"][n] = tlp.Coord(bbNew.center())	
			quotient[\"viewSize\"][n] = tlp.Size(bbNew.width(), bbNew.height())	
			            
		else:
			quotient[\"viewLayout\"][n] = finalLayoutSgLayout[n]
	
	forDataSet = tlp.getDefaultPluginParameters(\"Fast Overlap Removal\", quotient)
	forDataSet[\"x border\"] = 10
	forDataSet[\"y border\"] = 10
	quotient.computeLayoutProperty(\"Fast Overlap Removal\", quotient[\"viewLayout\"], forDataSet)
		
	quotient.getSuperGraph().delSubGraph(origLayoutSg)
	quotient.getSuperGraph().delSubGraph(finalLayoutSg)
")
)
(DataSet "plugins" 
)
)
(uint "id" 82)
(int "x" 735)
(int "y" 0)
(int "width" 735)
(int "height" 1059)
(bool "maximized" false)
)
)
)
)
)
