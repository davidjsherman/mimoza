(tlp "2.3"
(date "05-27-2013")
(comments "This file was generated by Tulip.")
(nb_nodes 472)
;(nodes <node_id> <node_id> ...)
(nodes 0..471)
(nb_edges 1062)
;(edge <edge_id> <source_id> <target_id>)
(edge 0 0 52)
(edge 1 52 43)
(edge 2 2 53)
(edge 3 53 44)
(edge 4 54 45)
(edge 5 1 54)
(edge 6 3 55)
(edge 7 55 21)
(edge 8 5 56)
(edge 9 56 46)
(edge 10 4 57)
(edge 11 57 47)
(edge 12 6 58)
(edge 13 58 0)
(edge 14 8 59)
(edge 15 59 2)
(edge 16 60 1)
(edge 17 7 60)
(edge 18 10 61)
(edge 19 61 3)
(edge 20 9 62)
(edge 21 62 5)
(edge 22 11 63)
(edge 23 63 4)
(edge 24 9 64)
(edge 25 64 38)
(edge 26 65 7)
(edge 27 41 65)
(edge 28 10 66)
(edge 29 66 28)
(edge 30 11 67)
(edge 31 6 68)
(edge 32 68 33)
(edge 33 8 69)
(edge 34 69 18)
(edge 35 18 70)
(edge 36 70 43)
(edge 37 71 44)
(edge 38 20 72)
(edge 39 72 45)
(edge 40 38 73)
(edge 41 73 21)
(edge 42 40 74)
(edge 43 74 46)
(edge 44 28 75)
(edge 45 75 47)
(edge 46 76 42)
(edge 47 77 21)
(edge 48 78 21)
(edge 49 79 34)
(edge 50 80 34)
(edge 51 31 81)
(edge 52 31 82)
(edge 53 31 83)
(edge 54 84 42)
(edge 55 33 85)
(edge 56 86 41)
(edge 57 40 86)
(edge 58 87 17)
(edge 59 18 87)
(edge 60 88 23)
(edge 61 89 36)
(edge 62 38 89)
(edge 63 90 37)
(edge 64 21 90)
(edge 65 91 25)
(edge 66 41 91)
(edge 67 92 15)
(edge 68 20 92)
(edge 69 93 32)
(edge 70 33 93)
(edge 71 94 26)
(edge 72 28 94)
(edge 73 95 27)
(edge 74 42 95)
(edge 75 18 96)
(edge 76 96 17)
(edge 77 24 97)
(edge 78 97 23)
(edge 79 98 41)
(edge 80 25 98)
(edge 81 38 99)
(edge 82 99 36)
(edge 83 28 100)
(edge 84 100 26)
(edge 85 40 101)
(edge 86 101 39)
(edge 87 33 102)
(edge 88 102 32)
(edge 89 103 50)
(edge 90 103 14)
(edge 91 51 103)
(edge 92 13 103)
(edge 93 19 103)
(edge 94 16 104)
(edge 95 29 104)
(edge 96 51 104)
(edge 97 35 104)
(edge 98 49 104)
(edge 99 104 12)
(edge 100 104 48)
(edge 101 104 22)
(edge 102 104 30)
(edge 103 64 105)
(edge 104 106 65)
(edge 105 66 107)
(edge 106 67 108)
(edge 107 68 109)
(edge 108 69 110)
(edge 109 111 76)
(edge 110 112 77)
(edge 111 113 78)
(edge 112 114 79)
(edge 113 115 80)
(edge 114 81 116)
(edge 115 82 117)
(edge 116 83 118)
(edge 117 119 84)
(edge 118 85 120)
(edge 119 121 86)
(edge 120 122 87)
(edge 121 123 88)
(edge 122 124 89)
(edge 123 125 90)
(edge 124 126 91)
(edge 125 127 92)
(edge 126 128 93)
(edge 127 129 94)
(edge 128 130 95)
(edge 129 87 131)
(edge 130 88 132)
(edge 131 89 133)
(edge 132 90 134)
(edge 133 91 135)
(edge 134 92 136)
(edge 135 93 137)
(edge 136 94 138)
(edge 137 95 139)
(edge 138 140 64)
(edge 139 65 141)
(edge 140 142 66)
(edge 141 143 67)
(edge 142 144 68)
(edge 143 145 69)
(edge 144 76 146)
(edge 145 77 147)
(edge 146 78 148)
(edge 147 79 149)
(edge 148 80 150)
(edge 149 151 81)
(edge 150 152 82)
(edge 151 153 83)
(edge 152 84 154)
(edge 153 155 85)
(edge 154 86 156)
(edge 155 87 157)
(edge 156 88 158)
(edge 157 89 159)
(edge 158 90 160)
(edge 159 91 161)
(edge 160 92 162)
(edge 161 93 163)
(edge 162 94 164)
(edge 163 95 165)
(edge 164 96 166)
(edge 165 97 167)
(edge 166 168 98)
(edge 167 99 169)
(edge 168 100 170)
(edge 169 101 171)
(edge 170 102 172)
(edge 171 103 173)
(edge 172 174 87)
(edge 173 175 88)
(edge 174 176 89)
(edge 175 177 90)
(edge 176 178 91)
(edge 177 179 92)
(edge 178 180 93)
(edge 179 181 94)
(edge 180 182 95)
(edge 181 70 183)
(edge 182 71 184)
(edge 183 72 185)
(edge 184 73 186)
(edge 185 74 187)
(edge 186 75 188)
(edge 187 189 76)
(edge 188 190 77)
(edge 189 191 78)
(edge 190 192 79)
(edge 191 193 80)
(edge 192 81 194)
(edge 193 82 195)
(edge 194 83 196)
(edge 195 197 84)
(edge 196 85 198)
(edge 197 199 86)
(edge 198 67 200)
(edge 199 201 71)
(edge 200 202 88)
(edge 201 58 203)
(edge 202 59 204)
(edge 203 60 205)
(edge 204 61 206)
(edge 205 62 207)
(edge 206 63 208)
(edge 207 76 209)
(edge 208 77 210)
(edge 209 78 211)
(edge 210 79 212)
(edge 211 80 213)
(edge 212 214 81)
(edge 213 215 82)
(edge 214 216 83)
(edge 215 84 217)
(edge 216 218 85)
(edge 217 86 219)
(edge 218 220 58)
(edge 219 221 59)
(edge 220 222 60)
(edge 221 223 61)
(edge 222 224 62)
(edge 223 225 63)
(edge 224 226 76)
(edge 225 227 77)
(edge 226 228 78)
(edge 227 229 79)
(edge 228 230 80)
(edge 229 81 231)
(edge 230 82 232)
(edge 231 83 233)
(edge 232 234 84)
(edge 233 85 235)
(edge 234 236 86)
(edge 235 237 77)
(edge 236 238 79)
(edge 237 81 239)
(edge 238 82 240)
(edge 239 241 84)
(edge 240 77 242)
(edge 241 79 243)
(edge 242 244 81)
(edge 243 245 82)
(edge 244 84 246)
(edge 245 247 70)
(edge 246 248 71)
(edge 247 249 72)
(edge 248 250 73)
(edge 249 251 74)
(edge 250 252 75)
(edge 251 76 253)
(edge 252 77 254)
(edge 253 78 255)
(edge 254 79 256)
(edge 255 80 257)
(edge 256 258 81)
(edge 257 259 82)
(edge 258 260 83)
(edge 259 84 261)
(edge 260 262 85)
(edge 261 86 263)
(edge 262 264 58)
(edge 263 265 59)
(edge 264 266 60)
(edge 265 267 61)
(edge 266 268 62)
(edge 267 269 63)
(edge 268 270 76)
(edge 269 271 77)
(edge 270 272 78)
(edge 271 273 79)
(edge 272 274 80)
(edge 273 81 275)
(edge 274 82 276)
(edge 275 83 277)
(edge 276 278 84)
(edge 277 85 279)
(edge 278 280 86)
(edge 279 96 281)
(edge 280 97 282)
(edge 281 283 98)
(edge 282 99 284)
(edge 283 100 285)
(edge 284 101 286)
(edge 285 102 287)
(edge 286 52 288)
(edge 287 53 289)
(edge 288 54 290)
(edge 289 55 291)
(edge 290 56 292)
(edge 291 57 293)
(edge 292 76 294)
(edge 293 77 295)
(edge 294 78 296)
(edge 295 79 297)
(edge 296 80 298)
(edge 297 299 81)
(edge 298 300 82)
(edge 299 301 83)
(edge 300 84 302)
(edge 301 303 85)
(edge 302 86 304)
(edge 303 305 96)
(edge 304 306 97)
(edge 305 98 307)
(edge 306 308 99)
(edge 307 309 100)
(edge 308 310 101)
(edge 309 311 102)
(edge 310 70 312)
(edge 311 71 312)
(edge 312 72 312)
(edge 313 313 70)
(edge 314 313 71)
(edge 315 313 72)
(edge 316 18 314)
(edge 317 314 43)
(edge 318 314 312)
(edge 319 313 314)
(edge 320 314 44)
(edge 321 201 314)
(edge 322 20 314)
(edge 323 314 45)
(edge 324 315 52)
(edge 325 58 315)
(edge 326 315 54)
(edge 327 60 315)
(edge 328 315 53)
(edge 329 59 315)
(edge 330 315 55)
(edge 331 61 315)
(edge 332 315 57)
(edge 333 63 315)
(edge 334 315 56)
(edge 335 62 315)
(edge 336 316 94)
(edge 337 316 100)
(edge 338 316 95)
(edge 339 316 89)
(edge 340 316 99)
(edge 341 316 90)
(edge 342 316 101)
(edge 343 58 317)
(edge 344 59 317)
(edge 345 60 317)
(edge 346 61 317)
(edge 347 62 317)
(edge 348 63 317)
(edge 349 318 58)
(edge 350 318 59)
(edge 351 318 60)
(edge 352 318 61)
(edge 353 318 62)
(edge 354 318 63)
(edge 355 319 58)
(edge 356 319 59)
(edge 357 319 60)
(edge 358 319 61)
(edge 359 319 62)
(edge 360 319 63)
(edge 361 6 320)
(edge 362 320 315)
(edge 363 320 317)
(edge 364 318 320)
(edge 365 319 320)
(edge 366 8 320)
(edge 367 7 320)
(edge 368 10 320)
(edge 369 9 320)
(edge 370 11 320)
(edge 371 321 68)
(edge 372 321 320)
(edge 373 321 65)
(edge 374 321 69)
(edge 375 321 64)
(edge 376 321 66)
(edge 377 321 67)
(edge 378 85 322)
(edge 379 104 322)
(edge 380 83 322)
(edge 381 323 85)
(edge 382 323 104)
(edge 383 323 83)
(edge 384 83 324)
(edge 385 104 324)
(edge 386 85 324)
(edge 387 325 83)
(edge 388 325 85)
(edge 389 325 104)
(edge 390 85 326)
(edge 391 104 326)
(edge 392 83 326)
(edge 393 327 104)
(edge 394 327 83)
(edge 395 327 85)
(edge 396 83 328)
(edge 397 104 328)
(edge 398 85 328)
(edge 399 329 83)
(edge 400 329 85)
(edge 401 329 104)
(edge 402 31 330)
(edge 403 330 322)
(edge 404 323 330)
(edge 405 330 324)
(edge 406 325 330)
(edge 407 330 326)
(edge 408 327 330)
(edge 409 330 328)
(edge 410 329 330)
(edge 411 33 330)
(edge 412 51 330)
(edge 413 65 331)
(edge 414 67 331)
(edge 415 68 331)
(edge 416 69 331)
(edge 417 332 65)
(edge 418 332 67)
(edge 419 332 68)
(edge 420 332 69)
(edge 421 333 41)
(edge 422 321 333)
(edge 423 333 331)
(edge 424 332 333)
(edge 425 333 200)
(edge 426 333 33)
(edge 427 333 18)
(edge 428 89 334)
(edge 429 94 334)
(edge 430 335 89)
(edge 431 335 94)
(edge 432 336 89)
(edge 433 336 94)
(edge 434 89 337)
(edge 435 94 337)
(edge 436 338 38)
(edge 437 316 338)
(edge 438 338 334)
(edge 439 335 338)
(edge 440 336 338)
(edge 441 338 337)
(edge 442 338 28)
(edge 443 52 339)
(edge 444 53 339)
(edge 445 54 339)
(edge 446 55 339)
(edge 447 56 339)
(edge 448 57 339)
(edge 449 340 43)
(edge 450 315 340)
(edge 451 340 339)
(edge 452 340 44)
(edge 453 340 45)
(edge 454 340 21)
(edge 455 340 46)
(edge 456 340 47)
(edge 457 341 87)
(edge 458 341 103)
(edge 459 341 88)
(edge 460 341 91)
(edge 461 341 92)
(edge 462 341 93)
(edge 463 88 342)
(edge 464 103 342)
(edge 465 91 342)
(edge 466 92 342)
(edge 467 93 342)
(edge 468 87 342)
(edge 469 87 343)
(edge 470 88 343)
(edge 471 91 343)
(edge 472 92 343)
(edge 473 93 343)
(edge 474 103 343)
(edge 475 344 91)
(edge 476 344 92)
(edge 477 344 93)
(edge 478 344 103)
(edge 479 344 87)
(edge 480 344 88)
(edge 481 345 17)
(edge 482 18 345)
(edge 483 341 345)
(edge 484 345 342)
(edge 485 345 343)
(edge 486 344 345)
(edge 487 345 23)
(edge 488 202 345)
(edge 489 345 25)
(edge 490 41 345)
(edge 491 345 15)
(edge 492 20 345)
(edge 493 345 32)
(edge 494 33 345)
(edge 495 345 50)
(edge 496 51 345)
(edge 497 96 346)
(edge 498 97 346)
(edge 499 98 346)
(edge 500 102 346)
(edge 501 96 347)
(edge 502 97 347)
(edge 503 98 347)
(edge 504 102 347)
(edge 505 348 96)
(edge 506 348 97)
(edge 507 348 98)
(edge 508 348 102)
(edge 509 18 349)
(edge 510 349 17)
(edge 511 349 346)
(edge 512 349 347)
(edge 513 348 349)
(edge 514 24 349)
(edge 515 349 23)
(edge 516 41 349)
(edge 517 349 25)
(edge 518 33 349)
(edge 519 349 32)
(edge 520 350 77)
(edge 521 350 79)
(edge 522 350 84)
(edge 523 77 351)
(edge 524 79 351)
(edge 525 84 351)
(edge 526 352 77)
(edge 527 352 79)
(edge 528 352 84)
(edge 529 77 353)
(edge 530 79 353)
(edge 531 84 353)
(edge 532 354 77)
(edge 533 354 79)
(edge 534 354 84)
(edge 535 355 77)
(edge 536 355 79)
(edge 537 355 84)
(edge 538 77 356)
(edge 539 79 356)
(edge 540 84 356)
(edge 541 77 357)
(edge 542 79 357)
(edge 543 84 357)
(edge 544 358 77)
(edge 545 358 79)
(edge 546 358 84)
(edge 547 77 359)
(edge 548 79 359)
(edge 549 84 359)
(edge 550 360 21)
(edge 551 350 360)
(edge 552 360 351)
(edge 553 352 360)
(edge 554 360 353)
(edge 555 354 360)
(edge 556 355 360)
(edge 557 360 356)
(edge 558 360 357)
(edge 559 358 360)
(edge 560 360 359)
(edge 561 360 34)
(edge 562 360 42)
(edge 563 90 361)
(edge 564 95 361)
(edge 565 362 90)
(edge 566 362 95)
(edge 567 363 90)
(edge 568 363 95)
(edge 569 90 364)
(edge 570 95 364)
(edge 571 365 21)
(edge 572 316 365)
(edge 573 365 361)
(edge 574 362 365)
(edge 575 363 365)
(edge 576 365 364)
(edge 577 365 42)
(edge 578 81 366)
(edge 579 82 366)
(edge 580 367 81)
(edge 581 367 82)
(edge 582 81 368)
(edge 583 82 368)
(edge 584 369 81)
(edge 585 369 82)
(edge 586 81 370)
(edge 587 82 370)
(edge 588 81 371)
(edge 589 82 371)
(edge 590 372 81)
(edge 591 372 82)
(edge 592 373 81)
(edge 593 373 82)
(edge 594 81 374)
(edge 595 82 374)
(edge 596 375 81)
(edge 597 375 82)
(edge 598 31 376)
(edge 599 376 366)
(edge 600 367 376)
(edge 601 376 368)
(edge 602 369 376)
(edge 603 376 370)
(edge 604 376 371)
(edge 605 372 376)
(edge 606 373 376)
(edge 607 376 374)
(edge 608 375 376)
(edge 609 377 76)
(edge 610 377 78)
(edge 611 377 80)
(edge 612 76 378)
(edge 613 78 378)
(edge 614 80 378)
(edge 615 379 76)
(edge 616 379 78)
(edge 617 379 80)
(edge 618 76 380)
(edge 619 78 380)
(edge 620 80 380)
(edge 621 381 76)
(edge 622 381 78)
(edge 623 381 80)
(edge 624 76 382)
(edge 625 78 382)
(edge 626 80 382)
(edge 627 383 76)
(edge 628 383 78)
(edge 629 383 80)
(edge 630 76 384)
(edge 631 78 384)
(edge 632 80 384)
(edge 633 385 42)
(edge 634 377 385)
(edge 635 385 378)
(edge 636 379 385)
(edge 637 385 380)
(edge 638 381 385)
(edge 639 385 382)
(edge 640 383 385)
(edge 641 385 384)
(edge 642 385 21)
(edge 643 385 34)
(edge 644 345 386)
(edge 645 349 386)
(edge 646 73 387)
(edge 647 340 387)
(edge 648 360 387)
(edge 649 365 387)
(edge 650 385 387)
(edge 651 314 387)
(edge 652 74 387)
(edge 653 75 387)
(edge 654 66 388)
(edge 655 388 75)
(edge 656 100 388)
(edge 657 338 388)
(edge 658 64 388)
(edge 659 388 73)
(edge 660 99 388)
(edge 661 388 74)
(edge 662 388 86)
(edge 663 101 388)
(edge 664 389 330)
(edge 665 389 345)
(edge 666 389 314)
(edge 667 333 389)
(edge 668 389 349)
(edge 669 86 389)
(edge 670 389 376)
(edge 671 73 390)
(edge 672 74 390)
(edge 673 75 390)
(edge 674 391 73)
(edge 675 391 74)
(edge 676 391 75)
(edge 677 392 387)
(edge 678 388 392)
(edge 679 392 390)
(edge 680 391 392)
(edge 681 393 99)
(edge 682 393 100)
(edge 683 393 101)
(edge 684 394 99)
(edge 685 394 100)
(edge 686 394 101)
(edge 687 99 395)
(edge 688 100 395)
(edge 689 101 395)
(edge 690 316 396)
(edge 691 396 388)
(edge 692 393 396)
(edge 693 394 396)
(edge 694 396 395)
(edge 695 64 397)
(edge 696 66 397)
(edge 697 398 64)
(edge 698 398 66)
(edge 699 321 399)
(edge 700 399 388)
(edge 701 399 397)
(edge 702 398 399)
(edge 703 70 400)
(edge 704 71 400)
(edge 705 72 400)
(edge 706 73 400)
(edge 707 74 400)
(edge 708 75 400)
(edge 709 401 70)
(edge 710 401 71)
(edge 711 401 72)
(edge 712 401 73)
(edge 713 401 74)
(edge 714 401 75)
(edge 715 18 402)
(edge 716 402 43)
(edge 717 402 400)
(edge 718 401 402)
(edge 719 402 44)
(edge 720 201 402)
(edge 721 20 402)
(edge 722 402 45)
(edge 723 38 402)
(edge 724 402 21)
(edge 725 40 402)
(edge 726 402 46)
(edge 727 28 402)
(edge 728 402 47)
(edge 729 81 403)
(edge 730 82 403)
(edge 731 404 81)
(edge 732 404 82)
(edge 733 81 405)
(edge 734 82 405)
(edge 735 406 81)
(edge 736 406 82)
(edge 737 81 407)
(edge 738 82 407)
(edge 739 81 408)
(edge 740 82 408)
(edge 741 409 81)
(edge 742 409 82)
(edge 743 410 81)
(edge 744 410 82)
(edge 745 81 411)
(edge 746 82 411)
(edge 747 412 81)
(edge 748 412 82)
(edge 749 31 413)
(edge 750 413 403)
(edge 751 404 413)
(edge 752 413 405)
(edge 753 406 413)
(edge 754 413 407)
(edge 755 413 408)
(edge 756 409 413)
(edge 757 410 413)
(edge 758 413 411)
(edge 759 412 413)
(edge 760 95 414)
(edge 761 90 414)
(edge 762 415 52)
(edge 763 58 415)
(edge 764 415 54)
(edge 765 60 415)
(edge 766 415 53)
(edge 767 59 415)
(edge 768 415 55)
(edge 769 61 415)
(edge 770 415 57)
(edge 771 63 415)
(edge 772 415 56)
(edge 773 62 415)
(edge 774 416 90)
(edge 775 416 95)
(edge 776 90 417)
(edge 777 95 417)
(edge 778 90 418)
(edge 779 95 418)
(edge 780 419 90)
(edge 781 419 95)
(edge 782 21 420)
(edge 783 420 414)
(edge 784 416 420)
(edge 785 420 417)
(edge 786 420 418)
(edge 787 419 420)
(edge 788 42 420)
(edge 789 421 76)
(edge 790 421 78)
(edge 791 421 80)
(edge 792 76 422)
(edge 793 78 422)
(edge 794 80 422)
(edge 795 423 76)
(edge 796 423 78)
(edge 797 423 80)
(edge 798 76 424)
(edge 799 78 424)
(edge 800 80 424)
(edge 801 425 76)
(edge 802 425 78)
(edge 803 425 80)
(edge 804 76 426)
(edge 805 78 426)
(edge 806 80 426)
(edge 807 427 76)
(edge 808 427 78)
(edge 809 427 80)
(edge 810 76 428)
(edge 811 78 428)
(edge 812 80 428)
(edge 813 429 42)
(edge 814 421 429)
(edge 815 429 422)
(edge 816 423 429)
(edge 817 429 424)
(edge 818 425 429)
(edge 819 429 426)
(edge 820 427 429)
(edge 821 429 428)
(edge 822 429 21)
(edge 823 429 34)
(edge 824 430 97)
(edge 825 430 103)
(edge 826 430 104)
(edge 827 66 430)
(edge 828 430 94)
(edge 829 430 100)
(edge 830 430 402)
(edge 831 430 83)
(edge 832 430 413)
(edge 833 68 430)
(edge 834 430 85)
(edge 835 430 93)
(edge 836 430 102)
(edge 837 64 430)
(edge 838 430 89)
(edge 839 430 99)
(edge 840 67 430)
(edge 841 430 86)
(edge 842 430 101)
(edge 843 430 88)
(edge 844 69 430)
(edge 845 430 87)
(edge 846 430 96)
(edge 847 430 92)
(edge 848 92 431)
(edge 849 87 431)
(edge 850 96 431)
(edge 851 88 431)
(edge 852 97 431)
(edge 853 94 431)
(edge 854 100 431)
(edge 855 93 431)
(edge 856 102 431)
(edge 857 89 431)
(edge 858 99 431)
(edge 859 101 431)
(edge 860 103 431)
(edge 861 85 432)
(edge 862 104 432)
(edge 863 83 432)
(edge 864 433 85)
(edge 865 433 104)
(edge 866 433 83)
(edge 867 83 434)
(edge 868 104 434)
(edge 869 85 434)
(edge 870 435 83)
(edge 871 435 85)
(edge 872 435 104)
(edge 873 85 436)
(edge 874 104 436)
(edge 875 83 436)
(edge 876 437 104)
(edge 877 437 83)
(edge 878 437 85)
(edge 879 83 438)
(edge 880 104 438)
(edge 881 85 438)
(edge 882 439 83)
(edge 883 439 85)
(edge 884 439 104)
(edge 885 430 440)
(edge 886 440 432)
(edge 887 433 440)
(edge 888 440 434)
(edge 889 435 440)
(edge 890 440 436)
(edge 891 437 440)
(edge 892 440 438)
(edge 893 439 440)
(edge 894 441 77)
(edge 895 441 79)
(edge 896 441 84)
(edge 897 77 442)
(edge 898 79 442)
(edge 899 84 442)
(edge 900 443 77)
(edge 901 443 79)
(edge 902 443 84)
(edge 903 77 444)
(edge 904 79 444)
(edge 905 84 444)
(edge 906 445 77)
(edge 907 445 79)
(edge 908 445 84)
(edge 909 446 77)
(edge 910 446 79)
(edge 911 446 84)
(edge 912 77 447)
(edge 913 79 447)
(edge 914 84 447)
(edge 915 77 448)
(edge 916 79 448)
(edge 917 84 448)
(edge 918 449 77)
(edge 919 449 79)
(edge 920 449 84)
(edge 921 77 450)
(edge 922 79 450)
(edge 923 84 450)
(edge 924 451 21)
(edge 925 441 451)
(edge 926 451 442)
(edge 927 443 451)
(edge 928 451 444)
(edge 929 445 451)
(edge 930 446 451)
(edge 931 451 447)
(edge 932 451 448)
(edge 933 449 451)
(edge 934 451 450)
(edge 935 451 34)
(edge 936 451 42)
(edge 937 452 87)
(edge 938 452 103)
(edge 939 452 88)
(edge 940 452 89)
(edge 941 452 92)
(edge 942 452 93)
(edge 943 452 94)
(edge 944 88 453)
(edge 945 89 453)
(edge 946 103 453)
(edge 947 92 453)
(edge 948 93 453)
(edge 949 94 453)
(edge 950 87 453)
(edge 951 87 454)
(edge 952 88 454)
(edge 953 89 454)
(edge 954 92 454)
(edge 955 93 454)
(edge 956 94 454)
(edge 957 103 454)
(edge 958 455 89)
(edge 959 455 92)
(edge 960 455 93)
(edge 961 455 94)
(edge 962 455 103)
(edge 963 455 87)
(edge 964 455 88)
(edge 965 430 456)
(edge 966 456 431)
(edge 967 452 456)
(edge 968 456 453)
(edge 969 456 454)
(edge 970 455 456)
(edge 971 52 457)
(edge 972 53 457)
(edge 973 54 457)
(edge 974 55 457)
(edge 975 56 457)
(edge 976 57 457)
(edge 977 458 43)
(edge 978 415 458)
(edge 979 458 457)
(edge 980 458 44)
(edge 981 458 45)
(edge 982 458 21)
(edge 983 458 46)
(edge 984 458 47)
(edge 985 402 459)
(edge 986 459 420)
(edge 987 429 459)
(edge 988 451 459)
(edge 989 458 459)
(edge 990 96 460)
(edge 991 97 460)
(edge 992 99 460)
(edge 993 100 460)
(edge 994 101 460)
(edge 995 102 460)
(edge 996 96 461)
(edge 997 97 461)
(edge 998 99 461)
(edge 999 100 461)
(edge 1000 101 461)
(edge 1001 102 461)
(edge 1002 462 96)
(edge 1003 462 97)
(edge 1004 462 99)
(edge 1005 462 100)
(edge 1006 462 101)
(edge 1007 462 102)
(edge 1008 430 463)
(edge 1009 463 431)
(edge 1010 463 460)
(edge 1011 463 461)
(edge 1012 462 463)
(edge 1013 64 464)
(edge 1014 66 464)
(edge 1015 67 464)
(edge 1016 68 464)
(edge 1017 69 464)
(edge 1018 465 64)
(edge 1019 465 66)
(edge 1020 465 67)
(edge 1021 465 68)
(edge 1022 465 69)
(edge 1023 9 466)
(edge 1024 466 430)
(edge 1025 466 464)
(edge 1026 465 466)
(edge 1027 10 466)
(edge 1028 11 466)
(edge 1029 6 466)
(edge 1030 8 466)
(edge 1031 58 467)
(edge 1032 59 467)
(edge 1033 60 467)
(edge 1034 61 467)
(edge 1035 62 467)
(edge 1036 63 467)
(edge 1037 468 58)
(edge 1038 468 59)
(edge 1039 468 60)
(edge 1040 468 61)
(edge 1041 468 62)
(edge 1042 468 63)
(edge 1043 469 58)
(edge 1044 469 59)
(edge 1045 469 60)
(edge 1046 469 61)
(edge 1047 469 62)
(edge 1048 469 63)
(edge 1049 6 470)
(edge 1050 470 415)
(edge 1051 470 467)
(edge 1052 468 470)
(edge 1053 469 470)
(edge 1054 8 470)
(edge 1055 7 470)
(edge 1056 10 470)
(edge 1057 9 470)
(edge 1058 11 470)
(edge 1059 471 466)
(edge 1060 471 470)
(edge 1061 65 471)
(cluster 1
(nodes 0..471)
(edges 0..1061)
(cluster 841
(nodes 0..311)
(edges 0..309)
(cluster 842
(nodes 13..15 17..20 23 25 32..33 41 50..51 87..88 91..93 103 122..123 126..128 131..132 135..137 157..158 161..163 173..175 178..180 202)
(edges 58..60 65..70 89..93 120..121 124..126 129..130 133..135 155..156 159..161 171..173 176..178 200)
(cluster 843
(nodes 122 157 17..18 174 131 87)
(edges 155 58..59 172 129 120)
)
(cluster 844
(nodes 88 132 23 123 158 202 175)
(edges 121 156 200 60 173 130)
)
(cluster 845
(nodes 178 91 25 135 126 161 41)
(edges 176 66 133 124 159 65)
)
(cluster 846
(nodes 179 92 136 15 127 162 20)
(edges 177 67 134 68 125 160)
)
(cluster 847
(nodes 33 180 93 137 128 163 32)
(edges 178 69 135 70 126 161)
)
(cluster 848
(nodes 13..14 103 50..51 19 173)
(edges 91..93 171 89..90)
)
)
(cluster 849
(nodes 139 95 27 165 125 37 130 177 42 134 90 21 182 160)
(edges 163 73..74 123 128 175 63 132 64 180 158 137)
(cluster 850
(nodes 177 134 90 37 125 160 21)
(edges 132 123 158 63..64 175)
)
(cluster 851
(nodes 165 27 182 139 95 130 42)
(edges 180 137 73 128 74 163)
)
)
(cluster 852
(nodes 26 28 99 284 169 100 285 170 101 308 171 286 309..310 36 38..40)
(edges 282 167 306 283 168 307 284 169 308 81..86)
(cluster 853
(nodes 99 308 36 169 38 284)
(edges 81 306 82 167 282)
)
(cluster 854
(nodes 309 100 26 170 28 285)
(edges 307 83 168 283 84)
)
(cluster 855
(nodes 286 101 310 39 171 40)
(edges 85..86 308 284 169)
)
)
(cluster 856
(nodes 47 0..4 52 5 288 53 289 54 290 55 291 56 292 57 293 21 43..46)
(edges 0..10 286 11 287..291)
(cluster 857
(nodes 0 52 43 288)
(edges 0..1 286)
)
(cluster 858
(nodes 2 53 44 289)
(edges 287 2..3)
)
(cluster 859
(nodes 45 290 1 54)
(edges 5 288 4)
)
(cluster 860
(nodes 55 21 291 3)
(edges 6..7 289)
)
(cluster 861
(nodes 5 46 56 292)
(edges 290 8..9)
)
(cluster 862
(nodes 47 57 293 4)
(edges 10 291 11)
)
)
(cluster 863
(nodes 184..185 70..72 247 201 18 248..249 20 43..45 183)
(edges 35..38 245 199 39 246..247 181..183)
(cluster 864
(nodes 70 247 18 43 183)
(edges 35 245 36 181)
)
(cluster 865
(nodes 201 71 248 44 184)
(edges 246 37 182 199)
)
(cluster 866
(nodes 20 45 185 72 249)
(edges 247 38 183 39)
)
)
(cluster 867
(nodes 299 276 116 300 231 117 232 258..259 214..215 31 239 194 240 195 81..82 151..152 244..245 275)
(edges 230 115 256..257 51 212 52 213 237..238 192..193 149 242 150 243 273 297 274 298 114 229)
(cluster 868
(nodes 299 116 231 258 214 31 239 194 81 151 244 275)
(edges 242 297 212 256 114 192 237 149 51 229 273)
)
(cluster 869
(nodes 276 300 117 232 259 31 215 240 195 82 152 245)
(edges 298 243 213 257 115 193 238 150 52 230 274)
)
)
(cluster 870
(nodes 0..11 58..63 203..208 220..225 264..269)
(edges 12 201 13 202 14 203 15 204 16 205 17 206 18..23 262..265 218..219 266 220 267 221..223)
(cluster 871
(nodes 264 0 220 58 203 6)
(edges 201 262 12 218 13)
)
(cluster 872
(nodes 221 265 2 59 204 8)
(edges 15 202 263 219 14)
)
(cluster 873
(nodes 1 222 266 60 205 7)
(edges 220 16..17 203 264)
)
(cluster 874
(nodes 3 223 267 61 206 10)
(edges 265 221 18..19 204)
)
(cluster 875
(nodes 224 268 5 62 207 9)
(edges 205 20 266 21 222)
)
(cluster 876
(nodes 11 4 269 225 63 208)
(edges 206 22 267 223 23)
)
)
(cluster 877
(nodes 6..8 11 18 33 41 65 67..69 106 108..110 141 143..145 200)
(edges 139 141 26 142 27 143 30..34 104 198 106..108)
(cluster 878
(nodes 65 41 106 141 7)
(edges 26..27 104 139)
)
(cluster 879
(nodes 200 11 67 108 143)
(edges 30 106 141 198)
)
(cluster 880
(nodes 6 33 68 109 144)
(edges 31..32 107 142)
)
(cluster 881
(nodes 145 110 18 8 69)
(edges 143 33 108 34)
)
)
(cluster 882
(nodes 138 94 164 26 28 124 36 129 38 176 133 89 181 159)
(edges 162 71..72 122 127 174 61 131 62 179 157 136)
(cluster 883
(nodes 176 89 133 124 36 38 159)
(edges 122 157 61..62 174 131)
)
(cluster 884
(nodes 26 181 94 28 138 129 164)
(edges 179 136 71..72 127 162)
)
)
(cluster 885
(nodes 189 191 193 146 148 150 294 296 298 111 253 113 255 21 209 115 257 211 213 76 78 80 34 270 272 226 274 228 230 42)
(edges 189 48 191 144 50 146 148 292 294 296 109 251 111 253 113 207 255 209 211 268 270 224 272 226 228 187 46)
(cluster 886
(nodes 209 253 111 189 146 226 270 294 42 76)
(edges 187 144 46 224 268 292 207 251 109)
)
(cluster 887
(nodes 78 211 255 113 191 148 228 272 21 296)
(edges 209 253 111 189 146 48 270 226 294)
)
(cluster 888
(nodes 34 298 80 213 257 115 193 150 230 274)
(edges 211 255 113 191 148 50 272 228 296)
)
)
(cluster 889
(nodes 12 16 22 29..31 33 35 48..49 51 83 85 104 118 120 153 155 196 198 216 218 233 235 260 262 277 279 301 303)
(edges 260 151 299 116 301 153 118 231 194 233 196 275 53 277 55 94..102 214 216 258)
(cluster 890
(nodes 233 277 301 83 216 260 118 196 31 153)
(edges 231 275 299 214 258 116 194 151 53)
)
(cluster 891
(nodes 198 33 155 279 235 303 85 218 262 120)
(edges 55 233 277 301 260 216 118 196 153)
)
(cluster 892
(nodes 12 16 22 29..30 35 48..49 51 104)
(edges 94..102)
)
)
(cluster 893
(nodes 66 38 28 105 107 140 64 9..10 142)
(edges 24..25 103 105 138 28..29 140)
(cluster 894
(nodes 105 140 38 9 64)
(edges 25 138 103 24)
)
(cluster 895
(nodes 10 66 107 142 28)
(edges 105 140 28..29)
)
)
(cluster 896
(nodes 21 34 42 77 79 84 112 114 119 147 149 154 190 192 197 210 212 217 227 229 234 237..238 241..243 246 254 256 261 271 273 278 295 297 302)
(edges 47 49 54 110 112 117 145 147 152 188 190 195 208 210 215 225 227 232 235..236 239..241 244 252 254 259 269 271 276 293 295 300)
(cluster 897
(nodes 254 210 190 237 77 147 242 271 295 227 112 21)
(edges 110 188 145 47 235 269 225 293 240 208 252)
)
(cluster 898
(nodes 256 212 238 192 79 149 34 243 273 297 114 229)
(edges 254 210 112 190 147 236 49 271 227 295 241)
)
(cluster 899
(nodes 278 302 119 234 261 217 241 197 84 246 154 42)
(edges 232 276 244 300 215 259 117 195 239 152 54)
)
)
(cluster 900
(nodes 46..47 186..187 73 188 74 28 75 38 40 250 21 251..252)
(edges 40..44 248 45 249..250 184..186)
(cluster 901
(nodes 250 21 186 38 73)
(edges 40..41 248 184)
)
(cluster 902
(nodes 40 46 251 187 74)
(edges 185 42..43 249)
)
(cluster 903
(nodes 75 47 252 28 188)
(edges 45 250 186 44)
)
)
(cluster 904
(nodes 282..283 96..98 287 102 17..18 305 23 306 24 307 166 25 167..168 311 172 32..33 41 281)
(edges 164 279 303 280 165 304 281 166 75 305 76..78 170 285 309 79..80 87..88)
(cluster 905
(nodes 166 17 281 18 96 305)
(edges 75..76 303 164 279)
)
(cluster 906
(nodes 23..24 167 282 97 306)
(edges 165 280 77..78 304)
)
(cluster 907
(nodes 168 25 283 41 98 307)
(edges 305 80 166 281 79)
)
(cluster 908
(nodes 33 287 102 311 172 32)
(edges 285 170 87..88 309)
)
)
)
(cluster 909
(nodes 0..311 400..471)
(edges 0..309 703..1061)
(cluster 2
(nodes 0..311 400..471)
(edges 0..309 703..1061)
(cluster 3
(nodes 0..311)
(edges 0..309)
(cluster 4
(nodes 299 276 116 300 231 117 232 258..259 214 31 215 239..240 194..195 81 151 82 244 152 245 275)
(edges 230 115 256..257 51 212 52 213 237..238 192..193 149..150 242..243 273..274 297 229 114 298)
(cluster 5
(nodes 299 116 231 258 214 31 239 194 81 151 244 275)
(edges 242 297 212 256 114 192 149 237 51 273 229)
)
(cluster 6
(nodes 276 300 117 232 259 31 215 240 195 82 152 245)
(edges 298 243 213 257 115 193 150 238 52 274 230)
)
)
(cluster 7
(nodes 12 16 22 29..31 33 35 48..49 51 83 85 104 118 120 153 155 196 198 216 218 233 235 260 262 277 279 301 303)
(edges 94..99 194 100 53 101..102 196 55 151 153 299 301 116 258 118 260 214 216 275 277 231 233)
(cluster 8
(nodes 233 277 301 83 260 216 118 31 196 153)
(edges 231 275 299 214 258 116 194 151 53)
)
(cluster 9
(nodes 198 33 155 279 235 303 85 262 218 120)
(edges 55 233 277 301 216 260 118 196 153)
)
(cluster 10
(nodes 12 16 22 29..30 35 48..49 51 104)
(edges 94..102)
)
)
(cluster 11
(nodes 13..15 17..20 23 26 28 32..33 36 38 50..51 87..89 92..94 103 122..124 127..129 131..133 136..138 157..159 162..164 173..176 179..181 202)
(edges 58..62 67..72 89..93 120..122 125..127 129..131 134..136 155..157 160..162 171..174 177..179 200)
(cluster 12
(nodes 122 157 17..18 174 87 131)
(edges 155 58..59 172 129 120)
)
(cluster 13
(nodes 88 132 23 123 202 158 175)
(edges 121 156 200 60 173 130)
)
(cluster 14
(nodes 176 89 133 124 36 159 38)
(edges 122 157 61..62 174 131)
)
(cluster 15
(nodes 179 92 136 15 127 162 20)
(edges 67 177 134 68 125 160)
)
(cluster 16
(nodes 33 180 93 137 128 163 32)
(edges 178 69 135 70 126 161)
)
(cluster 17
(nodes 26 181 94 28 138 129 164)
(edges 179 136 71 127 72 162)
)
(cluster 18
(nodes 13..14 103 50..51 173 19)
(edges 91..93 171 89..90)
)
)
(cluster 19
(nodes 6 8..11 18 28 33 38 64 66..69 105 107..110 140 142..145 200)
(edges 24..25 28..34 103 105..108 138 140..143 198)
(cluster 20
(nodes 105 140 38 64 9)
(edges 25 103 138 24)
)
(cluster 21
(nodes 10 66 142 107 28)
(edges 105 140 28..29)
)
(cluster 22
(nodes 200 11 67 143 108)
(edges 30 141 106 198)
)
(cluster 23
(nodes 6 68 33 144 109)
(edges 31 142 107 32)
)
(cluster 24
(nodes 145 110 8 18 69)
(edges 108 33 143 34)
)
)
(cluster 25
(nodes 18 20..21 28 38 40 43..47 70..75 183..188 201 247..252)
(edges 245..246 199 247..250 35..39 181 40 182 41 183 42..43 184 44 185..186 45)
(cluster 26
(nodes 70 247 183 43 18)
(edges 35 245 181 36)
)
(cluster 27
(nodes 201 71 248 184 44)
(edges 246 182 37 199)
)
(cluster 28
(nodes 45 185 20 72 249)
(edges 247 183 38..39)
)
(cluster 29
(nodes 250 186 21 73 38)
(edges 40..41 248 184)
)
(cluster 30
(nodes 40 251 46 187 74)
(edges 185 42..43 249)
)
(cluster 31
(nodes 75 252 47 188 28)
(edges 45 250 186 44)
)
)
(cluster 32
(nodes 47 0..4 52 5 288 53 289 54 290 55 291 56 292 57 293 21 43..46)
(edges 0..9 286 10 287 11 288..291)
(cluster 33
(nodes 0 52 288 43)
(edges 0 286 1)
)
(cluster 34
(nodes 2 53 289 44)
(edges 287 2..3)
)
(cluster 35
(nodes 45 290 1 54)
(edges 5 288 4)
)
(cluster 36
(nodes 55 291 21 3)
(edges 6..7 289)
)
(cluster 37
(nodes 5 56 46 292)
(edges 290 8..9)
)
(cluster 38
(nodes 47 57 293 4)
(edges 10..11 291)
)
)
(cluster 39
(nodes 139 95 27 165 125 37 130 177 42 134 182 21 90 160)
(edges 163 73..74 123 128 175 63 132 64 180 158 137)
(cluster 40
(nodes 177 134 90 37 125 160 21)
(edges 132 123 158 63..64 175)
)
(cluster 41
(nodes 165 27 182 139 95 42 130)
(edges 180 137 128 73..74 163)
)
)
(cluster 42
(nodes 189 191 146 193 148 150 294 296 298 111 253 113 255 21 209 115 257 211 213 76 78 80 34 270 272 226 274 228 42 230)
(edges 189 48 191 144 50 146 148 292 294 296 109 251 111 253 113 207 255 209 211 268 270 224 272 226 228 46 187)
(cluster 43
(nodes 209 253 111 189 146 270 226 294 42 76)
(edges 187 144 46 224 268 292 251 207 109)
)
(cluster 44
(nodes 78 211 255 113 191 148 272 228 296 21)
(edges 209 253 111 189 146 48 226 270 294)
)
(cluster 45
(nodes 34 298 80 213 257 115 193 150 274 230)
(edges 211 255 113 191 148 50 228 272 296)
)
)
(cluster 46
(nodes 0..11 58..63 203..208 220..225 264..269)
(edges 12 201 13 202 14 203 15 204 16 205 17 206 18..23 262..265 218 266 219 267 220..223)
(cluster 47
(nodes 264 0 220 58 203 6)
(edges 201 12 262 13 218)
)
(cluster 48
(nodes 221 265 2 59 204 8)
(edges 15 202 263 14 219)
)
(cluster 49
(nodes 1 222 266 60 7 205)
(edges 220 16..17 203 264)
)
(cluster 50
(nodes 223 3 267 61 206 10)
(edges 265 221 18 204 19)
)
(cluster 51
(nodes 224 268 5 62 9 207)
(edges 205 20..21 266 222)
)
(cluster 52
(nodes 11 4 269 225 63 208)
(edges 206 267 22..23 223)
)
)
(cluster 53
(nodes 21 34 42 77 79 84 112 114 119 147 149 154 190 192 197 210 212 217 227 229 234 237..238 241..243 246 254 256 261 271 273 278 295 297 302)
(edges 47 49 54 110 112 117 145 147 152 188 190 195 208 210 215 225 227 232 235..236 239..241 244 252 254 259 269 271 276 293 295 300)
(cluster 54
(nodes 254 210 190 237 77 147 242 271 295 227 112 21)
(edges 110 188 145 47 235 225 269 293 240 252 208)
)
(cluster 55
(nodes 256 212 238 192 79 149 34 243 273 297 229 114)
(edges 254 210 112 190 147 49 236 227 271 295 241)
)
(cluster 56
(nodes 278 302 119 234 261 217 241 197 84 246 154 42)
(edges 232 276 244 300 259 215 117 239 195 152 54)
)
)
(cluster 57
(nodes 17..18 23..24 26 28 32..33 36 38..40 96..97 99..102 166..167 169..172 281..282 284..287 305..306 308..311)
(edges 75..78 81..88 164..165 167..170 279..280 282..285 303..304 306..309)
(cluster 58
(nodes 166 17 281 18 305 96)
(edges 75..76 303 279 164)
)
(cluster 59
(nodes 23..24 167 282 306 97)
(edges 165 280 77..78 304)
)
(cluster 60
(nodes 99 308 36 169 38 284)
(edges 81 306 282 167 82)
)
(cluster 61
(nodes 309 100 26 170 28 285)
(edges 307 83 283 168 84)
)
(cluster 62
(nodes 286 101 310 39 171 40)
(edges 85..86 308 284 169)
)
(cluster 63
(nodes 33 287 102 311 172 32)
(edges 285 170 87..88 309)
)
)
)
(cluster 64
(nodes 0..311)
(edges 0..309)
)
(cluster 65
(nodes 25 41 65 86 91 98 106 121 126 135 141 156 161 168 178 199 219 236 263 280 283 304 307 400..471)
(edges 1008..1012 814 217 815..821 27 1024..1026 830 234 832 841 1050..1051 56 1052..1053 261 1059..1060 65 1061 66 278 79..80 281 885..893 302 104 305 119 717..718 124 925..929 133 930..934 139 750..751 154 752..756 159 757..759 166 965..970 176 978..979 783..785 985 786 986 787 987..989 197)
(cluster 138
(nodes 400..402 415 430 457..459 464..471)
(edges 989 1059 830 1060 717..718 978 1024..1025 979 1026 1050..1053 985)
)
)
(cluster 66
(nodes 183..188)
)
(cluster 67
(nodes 247..252)
)
(cluster 68
(nodes 70..75)
)
(cluster 69
(nodes 116..117)
)
(cluster 70
(nodes 151..152)
)
(cluster 71
(nodes 194..195)
)
(cluster 72
(nodes 214..215)
)
(cluster 73
(nodes 231..232)
)
(cluster 74
(nodes 239..240)
)
(cluster 75
(nodes 244..245)
)
(cluster 76
(nodes 258..259)
)
(cluster 77
(nodes 275..276)
)
(cluster 78
(nodes 299..300)
)
(cluster 79
(nodes 81..82)
)
(cluster 80
(nodes 27 37)
)
(cluster 81
(nodes 0..5)
)
(cluster 82
(nodes 125 130)
)
(cluster 83
(nodes 134 139)
)
(cluster 84
(nodes 160 165)
)
(cluster 85
(nodes 177 182)
)
(cluster 86
(nodes 90 95)
)
(cluster 87
(nodes 111 113 115)
)
(cluster 88
(nodes 146 148 150)
)
(cluster 89
(nodes 189 191 193)
)
(cluster 90
(nodes 209 211 213)
)
(cluster 91
(nodes 226 228 230)
)
(cluster 92
(nodes 253 255 257)
)
(cluster 93
(nodes 270 272 274)
)
(cluster 94
(nodes 294 296 298)
)
(cluster 95
(nodes 76 78 80)
)
(cluster 96
(nodes 51 18 20 38 40 24 28 200 31 201..202 33)
)
(cluster 97
(nodes 15 17 23 26 32 36 39 50)
)
(cluster 98
(nodes 120 12 118)
)
(cluster 99
(nodes 155 16 153)
)
(cluster 100
(nodes 196 22 198)
)
(cluster 101
(nodes 216 218 29)
)
(cluster 102
(nodes 235 30 233)
)
(cluster 103
(nodes 35 260 262)
)
(cluster 104
(nodes 277 48 279)
)
(cluster 105
(nodes 301 303 49)
)
(cluster 106
(nodes 83 85 104)
)
(cluster 107
(nodes 112 114 119)
)
(cluster 108
(nodes 147 149 154)
)
(cluster 109
(nodes 190 192 197)
)
(cluster 110
(nodes 210 212 217)
)
(cluster 111
(nodes 227 229 234)
)
(cluster 112
(nodes 237..238 241)
)
(cluster 113
(nodes 242..243 246)
)
(cluster 114
(nodes 254 256 261)
)
(cluster 115
(nodes 271 273 278)
)
(cluster 116
(nodes 295 297 302)
)
(cluster 117
(nodes 77 79 84)
)
(cluster 118
(nodes 122 13 123..124 127..129)
)
(cluster 119
(nodes 132..133 14 136..138 131)
)
(cluster 120
(nodes 157..159 162..164 173)
)
(cluster 121
(nodes 176 179..181 19 174..175)
)
(cluster 122
(nodes 87..89 92..94 103)
)
(cluster 123
(nodes 288..293)
)
(cluster 124
(nodes 52..57)
)
(cluster 125
(nodes 21 34 42..47)
)
(cluster 126
(nodes 166..167 169..172)
)
(cluster 127
(nodes 281..282 284..287)
)
(cluster 128
(nodes 305..306 308..311)
)
(cluster 129
(nodes 96..97 99..102)
)
(cluster 130
(nodes 105 107..110)
)
(cluster 131
(nodes 140 142..145)
)
(cluster 132
(nodes 64 66..69)
)
(cluster 133
(nodes 203..208)
)
(cluster 134
(nodes 220..225)
)
(cluster 135
(nodes 264..269)
)
(cluster 136
(nodes 58..63)
)
(cluster 137
(nodes 6..11)
)
)
)
(cluster 910
(nodes 86 121 156 199 219 236 263 280 304 312..399)
(edges 119 154 197 217 234 261 278 302 318..319 362..365 372 403..410 422..424 437..441 450..451 483..486 511..513 551..560 572..576 599..608 634..641 644..645 647..651 657 662 664..670 677..680 690..694 699..702)
)
(cluster 911
(nodes 183..185)
)
(cluster 912
(nodes 247..249)
)
(cluster 913
(nodes 70..72)
)
(cluster 914
(nodes 0..5)
)
(cluster 915
(nodes 26..27 36..37 39)
)
(cluster 916
(nodes 203..208)
)
(cluster 917
(nodes 220..225)
)
(cluster 918
(nodes 264..269)
)
(cluster 919
(nodes 58..63)
)
(cluster 920
(nodes 6..11)
)
(cluster 921
(nodes 120 12 118)
)
(cluster 922
(nodes 155 16 153)
)
(cluster 923
(nodes 196 22 198)
)
(cluster 924
(nodes 216 218 29)
)
(cluster 925
(nodes 235 30 233)
)
(cluster 926
(nodes 35 260 262)
)
(cluster 927
(nodes 277 48 279)
)
(cluster 928
(nodes 301 303 49)
)
(cluster 929
(nodes 83 85 104)
)
(cluster 930
(nodes 106 108..110)
)
(cluster 931
(nodes 141 143..145)
)
(cluster 932
(nodes 65 67..69)
)
(cluster 933
(nodes 124 129)
)
(cluster 934
(nodes 133 138)
)
(cluster 935
(nodes 159 164)
)
(cluster 936
(nodes 176 181)
)
(cluster 937
(nodes 89 94)
)
(cluster 938
(nodes 288..293)
)
(cluster 939
(nodes 52..57)
)
(cluster 940
(nodes 122 13 123 126..128)
)
(cluster 941
(nodes 132 14 135..137 131)
)
(cluster 942
(nodes 157..158 161..163 173)
)
(cluster 943
(nodes 178..180 19 174..175)
)
(cluster 944
(nodes 87..88 91..93 103)
)
(cluster 945
(nodes 166..168 172)
)
(cluster 946
(nodes 281..283 287)
)
(cluster 947
(nodes 305..307 311)
)
(cluster 948
(nodes 96..98 102)
)
(cluster 949
(nodes 112 114 119)
)
(cluster 950
(nodes 147 149 154)
)
(cluster 951
(nodes 190 192 197)
)
(cluster 952
(nodes 210 212 217)
)
(cluster 953
(nodes 227 229 234)
)
(cluster 954
(nodes 237..238 241)
)
(cluster 955
(nodes 242..243 246)
)
(cluster 956
(nodes 254 256 261)
)
(cluster 957
(nodes 271 273 278)
)
(cluster 958
(nodes 295 297 302)
)
(cluster 959
(nodes 77 79 84)
)
(cluster 960
(nodes 125 130)
)
(cluster 961
(nodes 134 139)
)
(cluster 962
(nodes 160 165)
)
(cluster 963
(nodes 177 182)
)
(cluster 964
(nodes 90 95)
)
(cluster 965
(nodes 116..117)
)
(cluster 966
(nodes 151..152)
)
(cluster 967
(nodes 194..195)
)
(cluster 968
(nodes 214..215)
)
(cluster 969
(nodes 231..232)
)
(cluster 970
(nodes 239..240)
)
(cluster 971
(nodes 244..245)
)
(cluster 972
(nodes 258..259)
)
(cluster 973
(nodes 275..276)
)
(cluster 974
(nodes 299..300)
)
(cluster 975
(nodes 81..82)
)
(cluster 976
(nodes 111 113 115)
)
(cluster 977
(nodes 146 148 150)
)
(cluster 978
(nodes 189 191 193)
)
(cluster 979
(nodes 209 211 213)
)
(cluster 980
(nodes 226 228 230)
)
(cluster 981
(nodes 253 255 257)
)
(cluster 982
(nodes 270 272 274)
)
(cluster 983
(nodes 294 296 298)
)
(cluster 984
(nodes 76 78 80)
)
(cluster 985
(nodes 15 17 23 25 32 50)
)
(cluster 986
(nodes 21 34 42..47)
)
(cluster 987
(nodes 28 38 40)
)
(cluster 988
(nodes 33 24 200..202 18 51 41 31 20)
)
(cluster 989
(nodes 186..188)
)
(cluster 990
(nodes 250..252)
)
(cluster 991
(nodes 73..75)
)
(cluster 992
(nodes 169..171)
)
(cluster 993
(nodes 284..286)
)
(cluster 994
(nodes 308..310)
)
(cluster 995
(nodes 99..101)
)
(cluster 996
(nodes 105 107)
)
(cluster 997
(nodes 140 142)
)
(cluster 998
(nodes 64 66)
)
)
(property  0 bool "boundaryCondition"
(default "false" "false")
(node 48 "true")
(node 49 "true")
(node 264 "true")
(node 265 "true")
(node 266 "true")
(node 267 "true")
(node 268 "true")
(node 269 "true")
(node 270 "true")
(node 271 "true")
(node 272 "true")
(node 273 "true")
(node 274 "true")
(node 275 "true")
(node 276 "true")
(node 277 "true")
(node 278 "true")
(node 279 "true")
(node 280 "true")
(node 281 "true")
(node 282 "true")
(node 283 "true")
(node 284 "true")
(node 285 "true")
(node 286 "true")
(node 287 "true")
(node 288 "true")
(node 289 "true")
(node 290 "true")
(node 291 "true")
(node 292 "true")
(node 293 "true")
(node 294 "true")
(node 295 "true")
(node 296 "true")
(node 297 "true")
(node 298 "true")
(node 299 "true")
(node 300 "true")
(node 301 "true")
(node 302 "true")
(node 303 "true")
(node 304 "true")
(node 305 "true")
(node 306 "true")
(node 307 "true")
(node 308 "true")
(node 309 "true")
(node 310 "true")
(node 311 "true")
)
(property  0 int "charge"
(default "0" "0")
)
(property  0 vector<string> "chebi_id"
(default "()" "()")
(node 0 "(\"chebi:28325\")")
(node 1 "(\"chebi:52976\")")
(node 2 "(\"chebi:62558\")")
(node 3 "(\"chebi:27402\")")
(node 4 "(\"chebi:62614\")")
(node 5 "(\"chebi:50583\")")
(node 6 "(\"chebi:28528\")")
(node 7 "(\"chebi:52977\")")
(node 8 "(\"chebi:62615\")")
(node 9 "(\"chebi:50571\")")
(node 10 "(\"chebi:15491\")")
(node 11 "(\"chebi:28726\")")
(node 12 "(\"chebi:15351\")")
(node 13 "(\"chebi:456215\")")
(node 14 "(\"chebi:30616\")")
(node 15 "(\"chebi:31013\")")
(node 16 "(\"chebi:15346\")")
(node 17 "(\"chebi:27689\")")
(node 18 "(\"chebi:61430\")")
(node 19 "(\"chebi:18361\")")
(node 20 "(\"chebi:52966\")")
(node 21 "(\"chebi:52381\")")
(node 22 "(\"chebi:16240\")")
(node 23 "(\"chebi:18262\")")
(node 24 "(\"chebi:15521\")")
(node 25 "(\"chebi:28866\")")
(node 26 "(\"chebi:30807\")")
(node 27 "(\"chebi:32370\")")
(node 28 "(\"chebi:15532\")")
(node 29 "(\"chebi:15846\")")
(node 30 "(\"chebi:16908\")")
(node 31 "(\"chebi:53151\")")
(node 32 "(\"chebi:25646\")")
(node 33 "(\"chebi:15533\")")
(node 34 "(\"chebi:15534\")")
(node 35 "(\"chebi:15379\")")
(node 36 "(\"chebi:7896\")")
(node 37 "(\"chebi:32372\")")
(node 38 "(\"chebi:57379\")")
(node 39 "(\"chebi:25629\")")
(node 40 "(\"chebi:15541\")")
(node 41 "(\"chebi:52974\")")
(node 42 "(\"chebi:26900\")")
(node 43 "(\"chebi:61406\")")
(node 44 "(\"chebi:15471\")")
(node 45 "(\"chebi:52975\")")
(node 46 "(\"chebi:50570\")")
(node 47 "(\"chebi:61405\")")
(node 48 "(\"chebi:15378\")")
(node 49 "(\"chebi:29375\")")
(node 50 "(\"chebi:17968\")")
(node 51 "(\"chebi:15517\")")
(node 105 "(\"chebi:15351\")")
(node 106 "(\"chebi:15351\")")
(node 107 "(\"chebi:15351\")")
(node 108 "(\"chebi:15351\")")
(node 109 "(\"chebi:15351\")")
(node 110 "(\"chebi:15351\")")
(node 111 "(\"chebi:15351\")")
(node 112 "(\"chebi:15351\")")
(node 113 "(\"chebi:15351\")")
(node 114 "(\"chebi:15351\")")
(node 115 "(\"chebi:15351\")")
(node 116 "(\"chebi:15351\")")
(node 117 "(\"chebi:15351\")")
(node 118 "(\"chebi:15351\")")
(node 119 "(\"chebi:15351\")")
(node 120 "(\"chebi:15351\")")
(node 121 "(\"chebi:15351\")")
(node 122 "(\"chebi:456215\")")
(node 123 "(\"chebi:456215\")")
(node 124 "(\"chebi:456215\")")
(node 125 "(\"chebi:456215\")")
(node 126 "(\"chebi:456215\")")
(node 127 "(\"chebi:456215\")")
(node 128 "(\"chebi:456215\")")
(node 129 "(\"chebi:456215\")")
(node 130 "(\"chebi:456215\")")
(node 131 "(\"chebi:30616\")")
(node 132 "(\"chebi:30616\")")
(node 133 "(\"chebi:30616\")")
(node 134 "(\"chebi:30616\")")
(node 135 "(\"chebi:30616\")")
(node 136 "(\"chebi:30616\")")
(node 137 "(\"chebi:30616\")")
(node 138 "(\"chebi:30616\")")
(node 139 "(\"chebi:30616\")")
(node 140 "(\"chebi:15346\")")
(node 141 "(\"chebi:15346\")")
(node 142 "(\"chebi:15346\")")
(node 143 "(\"chebi:15346\")")
(node 144 "(\"chebi:15346\")")
(node 145 "(\"chebi:15346\")")
(node 146 "(\"chebi:15346\")")
(node 147 "(\"chebi:15346\")")
(node 148 "(\"chebi:15346\")")
(node 149 "(\"chebi:15346\")")
(node 150 "(\"chebi:15346\")")
(node 151 "(\"chebi:15346\")")
(node 152 "(\"chebi:15346\")")
(node 153 "(\"chebi:15346\")")
(node 154 "(\"chebi:15346\")")
(node 155 "(\"chebi:15346\")")
(node 156 "(\"chebi:15346\")")
(node 157 "(\"chebi:15346\")")
(node 158 "(\"chebi:15346\")")
(node 159 "(\"chebi:15346\")")
(node 160 "(\"chebi:15346\")")
(node 161 "(\"chebi:15346\")")
(node 162 "(\"chebi:15346\")")
(node 163 "(\"chebi:15346\")")
(node 164 "(\"chebi:15346\")")
(node 165 "(\"chebi:15346\")")
(node 166 "(\"chebi:15346\")")
(node 167 "(\"chebi:15346\")")
(node 168 "(\"chebi:15346\")")
(node 169 "(\"chebi:15346\")")
(node 170 "(\"chebi:15346\")")
(node 171 "(\"chebi:15346\")")
(node 172 "(\"chebi:15346\")")
(node 173 "(\"chebi:15346\")")
(node 174 "(\"chebi:18361\")")
(node 175 "(\"chebi:18361\")")
(node 176 "(\"chebi:18361\")")
(node 177 "(\"chebi:18361\")")
(node 178 "(\"chebi:18361\")")
(node 179 "(\"chebi:18361\")")
(node 180 "(\"chebi:18361\")")
(node 181 "(\"chebi:18361\")")
(node 182 "(\"chebi:18361\")")
(node 183 "(\"chebi:16240\")")
(node 184 "(\"chebi:16240\")")
(node 185 "(\"chebi:16240\")")
(node 186 "(\"chebi:16240\")")
(node 187 "(\"chebi:16240\")")
(node 188 "(\"chebi:16240\")")
(node 189 "(\"chebi:16240\")")
(node 190 "(\"chebi:16240\")")
(node 191 "(\"chebi:16240\")")
(node 192 "(\"chebi:16240\")")
(node 193 "(\"chebi:16240\")")
(node 194 "(\"chebi:16240\")")
(node 195 "(\"chebi:16240\")")
(node 196 "(\"chebi:16240\")")
(node 197 "(\"chebi:16240\")")
(node 198 "(\"chebi:16240\")")
(node 199 "(\"chebi:16240\")")
(node 200 "(\"chebi:15521\")")
(node 201 "(\"chebi:15521\")")
(node 202 "(\"chebi:15521\")")
(node 203 "(\"chebi:15846\")")
(node 204 "(\"chebi:15846\")")
(node 205 "(\"chebi:15846\")")
(node 206 "(\"chebi:15846\")")
(node 207 "(\"chebi:15846\")")
(node 208 "(\"chebi:15846\")")
(node 209 "(\"chebi:15846\")")
(node 210 "(\"chebi:15846\")")
(node 211 "(\"chebi:15846\")")
(node 212 "(\"chebi:15846\")")
(node 213 "(\"chebi:15846\")")
(node 214 "(\"chebi:15846\")")
(node 215 "(\"chebi:15846\")")
(node 216 "(\"chebi:15846\")")
(node 217 "(\"chebi:15846\")")
(node 218 "(\"chebi:15846\")")
(node 219 "(\"chebi:15846\")")
(node 220 "(\"chebi:16908\")")
(node 221 "(\"chebi:16908\")")
(node 222 "(\"chebi:16908\")")
(node 223 "(\"chebi:16908\")")
(node 224 "(\"chebi:16908\")")
(node 225 "(\"chebi:16908\")")
(node 226 "(\"chebi:16908\")")
(node 227 "(\"chebi:16908\")")
(node 228 "(\"chebi:16908\")")
(node 229 "(\"chebi:16908\")")
(node 230 "(\"chebi:16908\")")
(node 231 "(\"chebi:16908\")")
(node 232 "(\"chebi:16908\")")
(node 233 "(\"chebi:16908\")")
(node 234 "(\"chebi:16908\")")
(node 235 "(\"chebi:16908\")")
(node 236 "(\"chebi:16908\")")
(node 237 "(\"chebi:18009\")")
(node 238 "(\"chebi:18009\")")
(node 239 "(\"chebi:18009\")")
(node 240 "(\"chebi:18009\")")
(node 241 "(\"chebi:18009\")")
(node 242 "(\"chebi:57783\")")
(node 243 "(\"chebi:57783\")")
(node 244 "(\"chebi:57783\")")
(node 245 "(\"chebi:57783\")")
(node 246 "(\"chebi:57783\")")
(node 247 "(\"chebi:15379\")")
(node 248 "(\"chebi:15379\")")
(node 249 "(\"chebi:15379\")")
(node 250 "(\"chebi:15379\")")
(node 251 "(\"chebi:15379\")")
(node 252 "(\"chebi:15379\")")
(node 253 "(\"chebi:15379\")")
(node 254 "(\"chebi:15379\")")
(node 255 "(\"chebi:15379\")")
(node 256 "(\"chebi:15379\")")
(node 257 "(\"chebi:15379\")")
(node 258 "(\"chebi:15379\")")
(node 259 "(\"chebi:15379\")")
(node 260 "(\"chebi:15379\")")
(node 261 "(\"chebi:15379\")")
(node 262 "(\"chebi:15379\")")
(node 263 "(\"chebi:15379\")")
(node 264 "(\"chebi:15378\")")
(node 265 "(\"chebi:15378\")")
(node 266 "(\"chebi:15378\")")
(node 267 "(\"chebi:15378\")")
(node 268 "(\"chebi:15378\")")
(node 269 "(\"chebi:15378\")")
(node 270 "(\"chebi:15378\")")
(node 271 "(\"chebi:15378\")")
(node 272 "(\"chebi:15378\")")
(node 273 "(\"chebi:15378\")")
(node 274 "(\"chebi:15378\")")
(node 275 "(\"chebi:15378\")")
(node 276 "(\"chebi:15378\")")
(node 277 "(\"chebi:15378\")")
(node 278 "(\"chebi:15378\")")
(node 279 "(\"chebi:15378\")")
(node 280 "(\"chebi:15378\")")
(node 281 "(\"chebi:15378\")")
(node 282 "(\"chebi:15378\")")
(node 283 "(\"chebi:15378\")")
(node 284 "(\"chebi:15378\")")
(node 285 "(\"chebi:15378\")")
(node 286 "(\"chebi:15378\")")
(node 287 "(\"chebi:15378\")")
(node 288 "(\"chebi:29375\")")
(node 289 "(\"chebi:29375\")")
(node 290 "(\"chebi:29375\")")
(node 291 "(\"chebi:29375\")")
(node 292 "(\"chebi:29375\")")
(node 293 "(\"chebi:29375\")")
(node 294 "(\"chebi:29375\")")
(node 295 "(\"chebi:29375\")")
(node 296 "(\"chebi:29375\")")
(node 297 "(\"chebi:29375\")")
(node 298 "(\"chebi:29375\")")
(node 299 "(\"chebi:29375\")")
(node 300 "(\"chebi:29375\")")
(node 301 "(\"chebi:29375\")")
(node 302 "(\"chebi:29375\")")
(node 303 "(\"chebi:29375\")")
(node 304 "(\"chebi:29375\")")
(node 305 "(\"chebi:29375\")")
(node 306 "(\"chebi:29375\")")
(node 307 "(\"chebi:29375\")")
(node 308 "(\"chebi:29375\")")
(node 309 "(\"chebi:29375\")")
(node 310 "(\"chebi:29375\")")
(node 311 "(\"chebi:29375\")")
(node 312 "(\"chebi:16240\")")
(node 313 "(\"chebi:15379\")")
(node 315 "(\"chebi:61902\")")
(node 316 "(\"chebi:57560\")")
(node 317 "(\"chebi:15846\")")
(node 318 "(\"chebi:16908\")")
(node 319 "(\"chebi:15378\")")
(node 321 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 322 "(\"chebi:15351\")")
(node 323 "(\"chebi:15346\")")
(node 324 "(\"chebi:16240\")")
(node 325 "(\"chebi:15846\")")
(node 326 "(\"chebi:16908\")")
(node 327 "(\"chebi:15379\")")
(node 328 "(\"chebi:15378\")")
(node 329 "(\"chebi:29375\")")
(node 331 "(\"chebi:15351\")")
(node 332 "(\"chebi:15346\")")
(node 334 "(\"chebi:456215\")")
(node 335 "(\"chebi:30616\")")
(node 336 "(\"chebi:15346\")")
(node 337 "(\"chebi:18361\")")
(node 339 "(\"chebi:29375\")")
(node 341 "(\"chebi:456215\")")
(node 342 "(\"chebi:30616\")")
(node 343 "(\"chebi:15346\")")
(node 344 "(\"chebi:18361\")")
(node 346 "(\"chebi:15346\")")
(node 347 "(\"chebi:15378\")")
(node 348 "(\"chebi:29375\")")
(node 350 "(\"chebi:15351\")")
(node 351 "(\"chebi:15346\")")
(node 352 "(\"chebi:16240\")")
(node 353 "(\"chebi:15846\")")
(node 354 "(\"chebi:16908\")")
(node 355 "(\"chebi:18009\")")
(node 356 "(\"chebi:57783\")")
(node 357 "(\"chebi:15379\")")
(node 358 "(\"chebi:15378\")")
(node 359 "(\"chebi:29375\")")
(node 361 "(\"chebi:456215\")")
(node 362 "(\"chebi:30616\")")
(node 363 "(\"chebi:15346\")")
(node 364 "(\"chebi:18361\")")
(node 366 "(\"chebi:15351\")")
(node 367 "(\"chebi:15346\")")
(node 368 "(\"chebi:16240\")")
(node 369 "(\"chebi:15846\")")
(node 370 "(\"chebi:16908\")")
(node 371 "(\"chebi:18009\")")
(node 372 "(\"chebi:57783\")")
(node 373 "(\"chebi:15379\")")
(node 374 "(\"chebi:15378\")")
(node 375 "(\"chebi:29375\")")
(node 377 "(\"chebi:15351\")")
(node 378 "(\"chebi:15346\")")
(node 379 "(\"chebi:16240\")")
(node 380 "(\"chebi:15846\")")
(node 381 "(\"chebi:16908\")")
(node 382 "(\"chebi:15379\")")
(node 383 "(\"chebi:15378\")")
(node 384 "(\"chebi:29375\")")
(node 386 "(\"chebi:58954\")")
(node 387 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 388 "(\"kegg.compound:c02843\", \"citexplore:17652214\", \"citexplore:14516204\", \"citexplore:10224157\", \"chebi:6523\", \"citexplore:16357361\", \"citexplore:19170545\", \"chebi:14530\", \"citexplore:19679826\", \"chebi:25073\", \"chebi:13649\", \"chebi:33184\")")
(node 389 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 390 "(\"chebi:16240\")")
(node 391 "(\"chebi:15379\")")
(node 393 "(\"chebi:15346\")")
(node 394 "(\"chebi:15378\")")
(node 395 "(\"chebi:29375\")")
(node 397 "(\"chebi:15351\")")
(node 398 "(\"chebi:15346\")")
(node 400 "(\"chebi:16240\")")
(node 401 "(\"chebi:15379\")")
(node 403 "(\"chebi:15351\")")
(node 404 "(\"chebi:15346\")")
(node 405 "(\"chebi:16240\")")
(node 406 "(\"chebi:15846\")")
(node 407 "(\"chebi:16908\")")
(node 408 "(\"chebi:18009\")")
(node 409 "(\"chebi:57783\")")
(node 410 "(\"chebi:15379\")")
(node 411 "(\"chebi:15378\")")
(node 412 "(\"chebi:29375\")")
(node 414 "(\"chebi:59203\")")
(node 415 "(\"chebi:61902\")")
(node 416 "(\"chebi:456215\")")
(node 417 "(\"chebi:30616\")")
(node 418 "(\"chebi:15346\")")
(node 419 "(\"chebi:18361\")")
(node 421 "(\"chebi:15351\")")
(node 422 "(\"chebi:15346\")")
(node 423 "(\"chebi:16240\")")
(node 424 "(\"chebi:15846\")")
(node 425 "(\"chebi:16908\")")
(node 426 "(\"chebi:15379\")")
(node 427 "(\"chebi:15378\")")
(node 428 "(\"chebi:29375\")")
(node 430 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 431 "(\"chebi:58954\")")
(node 432 "(\"chebi:15351\")")
(node 433 "(\"chebi:15346\")")
(node 434 "(\"chebi:16240\")")
(node 435 "(\"chebi:15846\")")
(node 436 "(\"chebi:16908\")")
(node 437 "(\"chebi:15379\")")
(node 438 "(\"chebi:15378\")")
(node 439 "(\"chebi:29375\")")
(node 441 "(\"chebi:15351\")")
(node 442 "(\"chebi:15346\")")
(node 443 "(\"chebi:16240\")")
(node 444 "(\"chebi:15846\")")
(node 445 "(\"chebi:16908\")")
(node 446 "(\"chebi:18009\")")
(node 447 "(\"chebi:57783\")")
(node 448 "(\"chebi:15379\")")
(node 449 "(\"chebi:15378\")")
(node 450 "(\"chebi:29375\")")
(node 452 "(\"chebi:456215\")")
(node 453 "(\"chebi:30616\")")
(node 454 "(\"chebi:15346\")")
(node 455 "(\"chebi:18361\")")
(node 457 "(\"chebi:29375\")")
(node 459 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 460 "(\"chebi:15346\")")
(node 461 "(\"chebi:15378\")")
(node 462 "(\"chebi:29375\")")
(node 464 "(\"chebi:15351\")")
(node 465 "(\"chebi:15346\")")
(node 467 "(\"chebi:15846\")")
(node 468 "(\"chebi:16908\")")
(node 469 "(\"chebi:15378\")")
(node 471 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
)
(property  0 string "class"
(default "" "")
(node 0 "simple chemical")
(node 1 "simple chemical")
(node 2 "simple chemical")
(node 3 "simple chemical")
(node 4 "simple chemical")
(node 5 "simple chemical")
(node 6 "simple chemical")
(node 7 "simple chemical")
(node 8 "simple chemical")
(node 9 "simple chemical")
(node 10 "simple chemical")
(node 11 "simple chemical")
(node 12 "simple chemical")
(node 13 "simple chemical")
(node 14 "simple chemical")
(node 15 "simple chemical")
(node 16 "simple chemical")
(node 17 "simple chemical")
(node 18 "simple chemical")
(node 19 "simple chemical")
(node 20 "simple chemical")
(node 21 "simple chemical")
(node 22 "simple chemical")
(node 23 "simple chemical")
(node 24 "simple chemical")
(node 25 "simple chemical")
(node 26 "simple chemical")
(node 27 "simple chemical")
(node 28 "simple chemical")
(node 29 "simple chemical")
(node 30 "simple chemical")
(node 31 "simple chemical")
(node 32 "simple chemical")
(node 33 "simple chemical")
(node 34 "simple chemical")
(node 35 "simple chemical")
(node 36 "simple chemical")
(node 37 "simple chemical")
(node 38 "simple chemical")
(node 39 "simple chemical")
(node 40 "simple chemical")
(node 41 "simple chemical")
(node 42 "simple chemical")
(node 43 "simple chemical")
(node 44 "simple chemical")
(node 45 "simple chemical")
(node 46 "simple chemical")
(node 47 "simple chemical")
(node 48 "simple chemical")
(node 49 "simple chemical")
(node 50 "simple chemical")
(node 51 "simple chemical")
(node 52 "process")
(node 53 "process")
(node 54 "process")
(node 55 "process")
(node 56 "process")
(node 57 "process")
(node 58 "process")
(node 59 "process")
(node 60 "process")
(node 61 "process")
(node 62 "process")
(node 63 "process")
(node 64 "process")
(node 65 "process")
(node 66 "process")
(node 67 "process")
(node 68 "process")
(node 69 "process")
(node 70 "process")
(node 71 "process")
(node 72 "process")
(node 73 "process")
(node 74 "process")
(node 75 "process")
(node 76 "process")
(node 77 "process")
(node 78 "process")
(node 79 "process")
(node 80 "process")
(node 81 "process")
(node 82 "process")
(node 83 "process")
(node 84 "process")
(node 85 "process")
(node 86 "process")
(node 87 "process")
(node 88 "process")
(node 89 "process")
(node 90 "process")
(node 91 "process")
(node 92 "process")
(node 93 "process")
(node 94 "process")
(node 95 "process")
(node 96 "process")
(node 97 "process")
(node 98 "process")
(node 99 "process")
(node 100 "process")
(node 101 "process")
(node 102 "process")
(node 103 "process")
(node 104 "process")
(node 105 "simple chemical")
(node 106 "simple chemical")
(node 107 "simple chemical")
(node 108 "simple chemical")
(node 109 "simple chemical")
(node 110 "simple chemical")
(node 111 "simple chemical")
(node 112 "simple chemical")
(node 113 "simple chemical")
(node 114 "simple chemical")
(node 115 "simple chemical")
(node 116 "simple chemical")
(node 117 "simple chemical")
(node 118 "simple chemical")
(node 119 "simple chemical")
(node 120 "simple chemical")
(node 121 "simple chemical")
(node 122 "simple chemical")
(node 123 "simple chemical")
(node 124 "simple chemical")
(node 125 "simple chemical")
(node 126 "simple chemical")
(node 127 "simple chemical")
(node 128 "simple chemical")
(node 129 "simple chemical")
(node 130 "simple chemical")
(node 131 "simple chemical")
(node 132 "simple chemical")
(node 133 "simple chemical")
(node 134 "simple chemical")
(node 135 "simple chemical")
(node 136 "simple chemical")
(node 137 "simple chemical")
(node 138 "simple chemical")
(node 139 "simple chemical")
(node 140 "simple chemical")
(node 141 "simple chemical")
(node 142 "simple chemical")
(node 143 "simple chemical")
(node 144 "simple chemical")
(node 145 "simple chemical")
(node 146 "simple chemical")
(node 147 "simple chemical")
(node 148 "simple chemical")
(node 149 "simple chemical")
(node 150 "simple chemical")
(node 151 "simple chemical")
(node 152 "simple chemical")
(node 153 "simple chemical")
(node 154 "simple chemical")
(node 155 "simple chemical")
(node 156 "simple chemical")
(node 157 "simple chemical")
(node 158 "simple chemical")
(node 159 "simple chemical")
(node 160 "simple chemical")
(node 161 "simple chemical")
(node 162 "simple chemical")
(node 163 "simple chemical")
(node 164 "simple chemical")
(node 165 "simple chemical")
(node 166 "simple chemical")
(node 167 "simple chemical")
(node 168 "simple chemical")
(node 169 "simple chemical")
(node 170 "simple chemical")
(node 171 "simple chemical")
(node 172 "simple chemical")
(node 173 "simple chemical")
(node 174 "simple chemical")
(node 175 "simple chemical")
(node 176 "simple chemical")
(node 177 "simple chemical")
(node 178 "simple chemical")
(node 179 "simple chemical")
(node 180 "simple chemical")
(node 181 "simple chemical")
(node 182 "simple chemical")
(node 183 "simple chemical")
(node 184 "simple chemical")
(node 185 "simple chemical")
(node 186 "simple chemical")
(node 187 "simple chemical")
(node 188 "simple chemical")
(node 189 "simple chemical")
(node 190 "simple chemical")
(node 191 "simple chemical")
(node 192 "simple chemical")
(node 193 "simple chemical")
(node 194 "simple chemical")
(node 195 "simple chemical")
(node 196 "simple chemical")
(node 197 "simple chemical")
(node 198 "simple chemical")
(node 199 "simple chemical")
(node 200 "simple chemical")
(node 201 "simple chemical")
(node 202 "simple chemical")
(node 203 "simple chemical")
(node 204 "simple chemical")
(node 205 "simple chemical")
(node 206 "simple chemical")
(node 207 "simple chemical")
(node 208 "simple chemical")
(node 209 "simple chemical")
(node 210 "simple chemical")
(node 211 "simple chemical")
(node 212 "simple chemical")
(node 213 "simple chemical")
(node 214 "simple chemical")
(node 215 "simple chemical")
(node 216 "simple chemical")
(node 217 "simple chemical")
(node 218 "simple chemical")
(node 219 "simple chemical")
(node 220 "simple chemical")
(node 221 "simple chemical")
(node 222 "simple chemical")
(node 223 "simple chemical")
(node 224 "simple chemical")
(node 225 "simple chemical")
(node 226 "simple chemical")
(node 227 "simple chemical")
(node 228 "simple chemical")
(node 229 "simple chemical")
(node 230 "simple chemical")
(node 231 "simple chemical")
(node 232 "simple chemical")
(node 233 "simple chemical")
(node 234 "simple chemical")
(node 235 "simple chemical")
(node 236 "simple chemical")
(node 237 "simple chemical")
(node 238 "simple chemical")
(node 239 "simple chemical")
(node 240 "simple chemical")
(node 241 "simple chemical")
(node 242 "simple chemical")
(node 243 "simple chemical")
(node 244 "simple chemical")
(node 245 "simple chemical")
(node 246 "simple chemical")
(node 247 "simple chemical")
(node 248 "simple chemical")
(node 249 "simple chemical")
(node 250 "simple chemical")
(node 251 "simple chemical")
(node 252 "simple chemical")
(node 253 "simple chemical")
(node 254 "simple chemical")
(node 255 "simple chemical")
(node 256 "simple chemical")
(node 257 "simple chemical")
(node 258 "simple chemical")
(node 259 "simple chemical")
(node 260 "simple chemical")
(node 261 "simple chemical")
(node 262 "simple chemical")
(node 263 "simple chemical")
(node 264 "simple chemical")
(node 265 "simple chemical")
(node 266 "simple chemical")
(node 267 "simple chemical")
(node 268 "simple chemical")
(node 269 "simple chemical")
(node 270 "simple chemical")
(node 271 "simple chemical")
(node 272 "simple chemical")
(node 273 "simple chemical")
(node 274 "simple chemical")
(node 275 "simple chemical")
(node 276 "simple chemical")
(node 277 "simple chemical")
(node 278 "simple chemical")
(node 279 "simple chemical")
(node 280 "simple chemical")
(node 281 "simple chemical")
(node 282 "simple chemical")
(node 283 "simple chemical")
(node 284 "simple chemical")
(node 285 "simple chemical")
(node 286 "simple chemical")
(node 287 "simple chemical")
(node 288 "simple chemical")
(node 289 "simple chemical")
(node 290 "simple chemical")
(node 291 "simple chemical")
(node 292 "simple chemical")
(node 293 "simple chemical")
(node 294 "simple chemical")
(node 295 "simple chemical")
(node 296 "simple chemical")
(node 297 "simple chemical")
(node 298 "simple chemical")
(node 299 "simple chemical")
(node 300 "simple chemical")
(node 301 "simple chemical")
(node 302 "simple chemical")
(node 303 "simple chemical")
(node 304 "simple chemical")
(node 305 "simple chemical")
(node 306 "simple chemical")
(node 307 "simple chemical")
(node 308 "simple chemical")
(node 309 "simple chemical")
(node 310 "simple chemical")
(node 311 "simple chemical")
)
(property  0 bool "clone"
(default "false" "false")
(node 12 "true")
(node 13 "true")
(node 14 "true")
(node 16 "true")
(node 19 "true")
(node 22 "true")
(node 24 "true")
(node 29 "true")
(node 30 "true")
(node 35 "true")
(node 48 "true")
(node 49 "true")
(node 105 "true")
(node 106 "true")
(node 107 "true")
(node 108 "true")
(node 109 "true")
(node 110 "true")
(node 111 "true")
(node 112 "true")
(node 113 "true")
(node 114 "true")
(node 115 "true")
(node 116 "true")
(node 117 "true")
(node 118 "true")
(node 119 "true")
(node 120 "true")
(node 121 "true")
(node 122 "true")
(node 123 "true")
(node 124 "true")
(node 125 "true")
(node 126 "true")
(node 127 "true")
(node 128 "true")
(node 129 "true")
(node 130 "true")
(node 131 "true")
(node 132 "true")
(node 133 "true")
(node 134 "true")
(node 135 "true")
(node 136 "true")
(node 137 "true")
(node 138 "true")
(node 139 "true")
(node 140 "true")
(node 141 "true")
(node 142 "true")
(node 143 "true")
(node 144 "true")
(node 145 "true")
(node 146 "true")
(node 147 "true")
(node 148 "true")
(node 149 "true")
(node 150 "true")
(node 151 "true")
(node 152 "true")
(node 153 "true")
(node 154 "true")
(node 155 "true")
(node 156 "true")
(node 157 "true")
(node 158 "true")
(node 159 "true")
(node 160 "true")
(node 161 "true")
(node 162 "true")
(node 163 "true")
(node 164 "true")
(node 165 "true")
(node 166 "true")
(node 167 "true")
(node 168 "true")
(node 169 "true")
(node 170 "true")
(node 171 "true")
(node 172 "true")
(node 173 "true")
(node 174 "true")
(node 175 "true")
(node 176 "true")
(node 177 "true")
(node 178 "true")
(node 179 "true")
(node 180 "true")
(node 181 "true")
(node 182 "true")
(node 183 "true")
(node 184 "true")
(node 185 "true")
(node 186 "true")
(node 187 "true")
(node 188 "true")
(node 189 "true")
(node 190 "true")
(node 191 "true")
(node 192 "true")
(node 193 "true")
(node 194 "true")
(node 195 "true")
(node 196 "true")
(node 197 "true")
(node 198 "true")
(node 199 "true")
(node 200 "true")
(node 201 "true")
(node 202 "true")
(node 203 "true")
(node 204 "true")
(node 205 "true")
(node 206 "true")
(node 207 "true")
(node 208 "true")
(node 209 "true")
(node 210 "true")
(node 211 "true")
(node 212 "true")
(node 213 "true")
(node 214 "true")
(node 215 "true")
(node 216 "true")
(node 217 "true")
(node 218 "true")
(node 219 "true")
(node 220 "true")
(node 221 "true")
(node 222 "true")
(node 223 "true")
(node 224 "true")
(node 225 "true")
(node 226 "true")
(node 227 "true")
(node 228 "true")
(node 229 "true")
(node 230 "true")
(node 231 "true")
(node 232 "true")
(node 233 "true")
(node 234 "true")
(node 235 "true")
(node 236 "true")
(node 237 "true")
(node 238 "true")
(node 239 "true")
(node 240 "true")
(node 241 "true")
(node 242 "true")
(node 243 "true")
(node 244 "true")
(node 245 "true")
(node 246 "true")
(node 247 "true")
(node 248 "true")
(node 249 "true")
(node 250 "true")
(node 251 "true")
(node 252 "true")
(node 253 "true")
(node 254 "true")
(node 255 "true")
(node 256 "true")
(node 257 "true")
(node 258 "true")
(node 259 "true")
(node 260 "true")
(node 261 "true")
(node 262 "true")
(node 263 "true")
(node 264 "true")
(node 265 "true")
(node 266 "true")
(node 267 "true")
(node 268 "true")
(node 269 "true")
(node 270 "true")
(node 271 "true")
(node 272 "true")
(node 273 "true")
(node 274 "true")
(node 275 "true")
(node 276 "true")
(node 277 "true")
(node 278 "true")
(node 279 "true")
(node 280 "true")
(node 281 "true")
(node 282 "true")
(node 283 "true")
(node 284 "true")
(node 285 "true")
(node 286 "true")
(node 287 "true")
(node 288 "true")
(node 289 "true")
(node 290 "true")
(node 291 "true")
(node 292 "true")
(node 293 "true")
(node 294 "true")
(node 295 "true")
(node 296 "true")
(node 297 "true")
(node 298 "true")
(node 299 "true")
(node 300 "true")
(node 301 "true")
(node 302 "true")
(node 303 "true")
(node 304 "true")
(node 305 "true")
(node 306 "true")
(node 307 "true")
(node 308 "true")
(node 309 "true")
(node 310 "true")
(node 311 "true")
(node 312 "true")
(node 313 "true")
(node 317 "true")
(node 318 "true")
(node 319 "true")
(node 322 "true")
(node 323 "true")
(node 324 "true")
(node 325 "true")
(node 326 "true")
(node 327 "true")
(node 328 "true")
(node 329 "true")
(node 331 "true")
(node 332 "true")
(node 334 "true")
(node 335 "true")
(node 336 "true")
(node 337 "true")
(node 339 "true")
(node 341 "true")
(node 342 "true")
(node 343 "true")
(node 344 "true")
(node 346 "true")
(node 347 "true")
(node 348 "true")
(node 350 "true")
(node 351 "true")
(node 352 "true")
(node 353 "true")
(node 354 "true")
(node 355 "true")
(node 356 "true")
(node 357 "true")
(node 358 "true")
(node 359 "true")
(node 361 "true")
(node 362 "true")
(node 363 "true")
(node 364 "true")
(node 366 "true")
(node 367 "true")
(node 368 "true")
(node 369 "true")
(node 370 "true")
(node 371 "true")
(node 372 "true")
(node 373 "true")
(node 374 "true")
(node 375 "true")
(node 377 "true")
(node 378 "true")
(node 379 "true")
(node 380 "true")
(node 381 "true")
(node 382 "true")
(node 383 "true")
(node 384 "true")
(node 390 "true")
(node 391 "true")
(node 393 "true")
(node 394 "true")
(node 395 "true")
(node 397 "true")
(node 398 "true")
(node 400 "true")
(node 401 "true")
(node 403 "true")
(node 404 "true")
(node 405 "true")
(node 406 "true")
(node 407 "true")
(node 408 "true")
(node 409 "true")
(node 410 "true")
(node 411 "true")
(node 412 "true")
(node 416 "true")
(node 417 "true")
(node 418 "true")
(node 419 "true")
(node 421 "true")
(node 422 "true")
(node 423 "true")
(node 424 "true")
(node 425 "true")
(node 426 "true")
(node 427 "true")
(node 428 "true")
(node 432 "true")
(node 433 "true")
(node 434 "true")
(node 435 "true")
(node 436 "true")
(node 437 "true")
(node 438 "true")
(node 439 "true")
(node 441 "true")
(node 442 "true")
(node 443 "true")
(node 444 "true")
(node 445 "true")
(node 446 "true")
(node 447 "true")
(node 448 "true")
(node 449 "true")
(node 450 "true")
(node 452 "true")
(node 453 "true")
(node 454 "true")
(node 455 "true")
(node 457 "true")
(node 460 "true")
(node 461 "true")
(node 462 "true")
(node 464 "true")
(node 465 "true")
(node 467 "true")
(node 468 "true")
(node 469 "true")
)
(property  0 string "compartment"
(default "" "")
(node 0 "peroxisome")
(node 1 "peroxisome")
(node 2 "peroxisome")
(node 3 "peroxisome")
(node 4 "peroxisome")
(node 5 "peroxisome")
(node 6 "peroxisome")
(node 7 "peroxisome")
(node 8 "peroxisome")
(node 9 "peroxisome")
(node 10 "peroxisome")
(node 11 "peroxisome")
(node 12 "peroxisome")
(node 13 "peroxisome")
(node 14 "peroxisome")
(node 15 "peroxisome")
(node 16 "peroxisome")
(node 17 "peroxisome")
(node 18 "peroxisome")
(node 19 "peroxisome")
(node 20 "peroxisome")
(node 21 "peroxisome")
(node 22 "peroxisome")
(node 23 "peroxisome")
(node 24 "peroxisome")
(node 25 "peroxisome")
(node 26 "peroxisome")
(node 27 "peroxisome")
(node 28 "peroxisome")
(node 29 "peroxisome")
(node 30 "peroxisome")
(node 31 "peroxisome")
(node 32 "peroxisome")
(node 33 "peroxisome")
(node 34 "peroxisome")
(node 35 "peroxisome")
(node 36 "peroxisome")
(node 37 "peroxisome")
(node 38 "peroxisome")
(node 39 "peroxisome")
(node 40 "peroxisome")
(node 41 "peroxisome")
(node 42 "peroxisome")
(node 43 "peroxisome")
(node 44 "peroxisome")
(node 45 "peroxisome")
(node 46 "peroxisome")
(node 47 "peroxisome")
(node 48 "peroxisome")
(node 49 "peroxisome")
(node 50 "peroxisome")
(node 51 "peroxisome")
(node 105 "peroxisome")
(node 106 "peroxisome")
(node 107 "peroxisome")
(node 108 "peroxisome")
(node 109 "peroxisome")
(node 110 "peroxisome")
(node 111 "peroxisome")
(node 112 "peroxisome")
(node 113 "peroxisome")
(node 114 "peroxisome")
(node 115 "peroxisome")
(node 116 "peroxisome")
(node 117 "peroxisome")
(node 118 "peroxisome")
(node 119 "peroxisome")
(node 120 "peroxisome")
(node 121 "peroxisome")
(node 122 "peroxisome")
(node 123 "peroxisome")
(node 124 "peroxisome")
(node 125 "peroxisome")
(node 126 "peroxisome")
(node 127 "peroxisome")
(node 128 "peroxisome")
(node 129 "peroxisome")
(node 130 "peroxisome")
(node 131 "peroxisome")
(node 132 "peroxisome")
(node 133 "peroxisome")
(node 134 "peroxisome")
(node 135 "peroxisome")
(node 136 "peroxisome")
(node 137 "peroxisome")
(node 138 "peroxisome")
(node 139 "peroxisome")
(node 140 "peroxisome")
(node 141 "peroxisome")
(node 142 "peroxisome")
(node 143 "peroxisome")
(node 144 "peroxisome")
(node 145 "peroxisome")
(node 146 "peroxisome")
(node 147 "peroxisome")
(node 148 "peroxisome")
(node 149 "peroxisome")
(node 150 "peroxisome")
(node 151 "peroxisome")
(node 152 "peroxisome")
(node 153 "peroxisome")
(node 154 "peroxisome")
(node 155 "peroxisome")
(node 156 "peroxisome")
(node 157 "peroxisome")
(node 158 "peroxisome")
(node 159 "peroxisome")
(node 160 "peroxisome")
(node 161 "peroxisome")
(node 162 "peroxisome")
(node 163 "peroxisome")
(node 164 "peroxisome")
(node 165 "peroxisome")
(node 166 "peroxisome")
(node 167 "peroxisome")
(node 168 "peroxisome")
(node 169 "peroxisome")
(node 170 "peroxisome")
(node 171 "peroxisome")
(node 172 "peroxisome")
(node 173 "peroxisome")
(node 174 "peroxisome")
(node 175 "peroxisome")
(node 176 "peroxisome")
(node 177 "peroxisome")
(node 178 "peroxisome")
(node 179 "peroxisome")
(node 180 "peroxisome")
(node 181 "peroxisome")
(node 182 "peroxisome")
(node 183 "peroxisome")
(node 184 "peroxisome")
(node 185 "peroxisome")
(node 186 "peroxisome")
(node 187 "peroxisome")
(node 188 "peroxisome")
(node 189 "peroxisome")
(node 190 "peroxisome")
(node 191 "peroxisome")
(node 192 "peroxisome")
(node 193 "peroxisome")
(node 194 "peroxisome")
(node 195 "peroxisome")
(node 196 "peroxisome")
(node 197 "peroxisome")
(node 198 "peroxisome")
(node 199 "peroxisome")
(node 200 "peroxisome")
(node 201 "peroxisome")
(node 202 "peroxisome")
(node 203 "peroxisome")
(node 204 "peroxisome")
(node 205 "peroxisome")
(node 206 "peroxisome")
(node 207 "peroxisome")
(node 208 "peroxisome")
(node 209 "peroxisome")
(node 210 "peroxisome")
(node 211 "peroxisome")
(node 212 "peroxisome")
(node 213 "peroxisome")
(node 214 "peroxisome")
(node 215 "peroxisome")
(node 216 "peroxisome")
(node 217 "peroxisome")
(node 218 "peroxisome")
(node 219 "peroxisome")
(node 220 "peroxisome")
(node 221 "peroxisome")
(node 222 "peroxisome")
(node 223 "peroxisome")
(node 224 "peroxisome")
(node 225 "peroxisome")
(node 226 "peroxisome")
(node 227 "peroxisome")
(node 228 "peroxisome")
(node 229 "peroxisome")
(node 230 "peroxisome")
(node 231 "peroxisome")
(node 232 "peroxisome")
(node 233 "peroxisome")
(node 234 "peroxisome")
(node 235 "peroxisome")
(node 236 "peroxisome")
(node 237 "peroxisome")
(node 238 "peroxisome")
(node 239 "peroxisome")
(node 240 "peroxisome")
(node 241 "peroxisome")
(node 242 "peroxisome")
(node 243 "peroxisome")
(node 244 "peroxisome")
(node 245 "peroxisome")
(node 246 "peroxisome")
(node 247 "peroxisome")
(node 248 "peroxisome")
(node 249 "peroxisome")
(node 250 "peroxisome")
(node 251 "peroxisome")
(node 252 "peroxisome")
(node 253 "peroxisome")
(node 254 "peroxisome")
(node 255 "peroxisome")
(node 256 "peroxisome")
(node 257 "peroxisome")
(node 258 "peroxisome")
(node 259 "peroxisome")
(node 260 "peroxisome")
(node 261 "peroxisome")
(node 262 "peroxisome")
(node 263 "peroxisome")
(node 264 "peroxisome")
(node 265 "peroxisome")
(node 266 "peroxisome")
(node 267 "peroxisome")
(node 268 "peroxisome")
(node 269 "peroxisome")
(node 270 "peroxisome")
(node 271 "peroxisome")
(node 272 "peroxisome")
(node 273 "peroxisome")
(node 274 "peroxisome")
(node 275 "peroxisome")
(node 276 "peroxisome")
(node 277 "peroxisome")
(node 278 "peroxisome")
(node 279 "peroxisome")
(node 280 "peroxisome")
(node 281 "peroxisome")
(node 282 "peroxisome")
(node 283 "peroxisome")
(node 284 "peroxisome")
(node 285 "peroxisome")
(node 286 "peroxisome")
(node 287 "peroxisome")
(node 288 "peroxisome")
(node 289 "peroxisome")
(node 290 "peroxisome")
(node 291 "peroxisome")
(node 292 "peroxisome")
(node 293 "peroxisome")
(node 294 "peroxisome")
(node 295 "peroxisome")
(node 296 "peroxisome")
(node 297 "peroxisome")
(node 298 "peroxisome")
(node 299 "peroxisome")
(node 300 "peroxisome")
(node 301 "peroxisome")
(node 302 "peroxisome")
(node 303 "peroxisome")
(node 304 "peroxisome")
(node 305 "peroxisome")
(node 306 "peroxisome")
(node 307 "peroxisome")
(node 308 "peroxisome")
(node 309 "peroxisome")
(node 310 "peroxisome")
(node 311 "peroxisome")
(node 312 "peroxisome")
(node 313 "peroxisome")
(node 315 "peroxisome")
(node 316 "peroxisome")
(node 317 "peroxisome")
(node 318 "peroxisome")
(node 319 "peroxisome")
(node 321 "peroxisome")
(node 322 "peroxisome")
(node 323 "peroxisome")
(node 324 "peroxisome")
(node 325 "peroxisome")
(node 326 "peroxisome")
(node 327 "peroxisome")
(node 328 "peroxisome")
(node 329 "peroxisome")
(node 331 "peroxisome")
(node 332 "peroxisome")
(node 334 "peroxisome")
(node 335 "peroxisome")
(node 336 "peroxisome")
(node 337 "peroxisome")
(node 339 "peroxisome")
(node 341 "peroxisome")
(node 342 "peroxisome")
(node 343 "peroxisome")
(node 344 "peroxisome")
(node 346 "peroxisome")
(node 347 "peroxisome")
(node 348 "peroxisome")
(node 350 "peroxisome")
(node 351 "peroxisome")
(node 352 "peroxisome")
(node 353 "peroxisome")
(node 354 "peroxisome")
(node 355 "peroxisome")
(node 356 "peroxisome")
(node 357 "peroxisome")
(node 358 "peroxisome")
(node 359 "peroxisome")
(node 361 "peroxisome")
(node 362 "peroxisome")
(node 363 "peroxisome")
(node 364 "peroxisome")
(node 366 "peroxisome")
(node 367 "peroxisome")
(node 368 "peroxisome")
(node 369 "peroxisome")
(node 370 "peroxisome")
(node 371 "peroxisome")
(node 372 "peroxisome")
(node 373 "peroxisome")
(node 374 "peroxisome")
(node 375 "peroxisome")
(node 377 "peroxisome")
(node 378 "peroxisome")
(node 379 "peroxisome")
(node 380 "peroxisome")
(node 381 "peroxisome")
(node 382 "peroxisome")
(node 383 "peroxisome")
(node 384 "peroxisome")
(node 386 "peroxisome")
(node 387 "peroxisome")
(node 388 "peroxisome")
(node 389 "peroxisome")
(node 390 "peroxisome")
(node 391 "peroxisome")
(node 393 "peroxisome")
(node 394 "peroxisome")
(node 395 "peroxisome")
(node 397 "peroxisome")
(node 398 "peroxisome")
(node 400 "peroxisome")
(node 401 "peroxisome")
(node 403 "peroxisome")
(node 404 "peroxisome")
(node 405 "peroxisome")
(node 406 "peroxisome")
(node 407 "peroxisome")
(node 408 "peroxisome")
(node 409 "peroxisome")
(node 410 "peroxisome")
(node 411 "peroxisome")
(node 412 "peroxisome")
(node 414 "peroxisome")
(node 415 "peroxisome")
(node 416 "peroxisome")
(node 417 "peroxisome")
(node 418 "peroxisome")
(node 419 "peroxisome")
(node 421 "peroxisome")
(node 422 "peroxisome")
(node 423 "peroxisome")
(node 424 "peroxisome")
(node 425 "peroxisome")
(node 426 "peroxisome")
(node 427 "peroxisome")
(node 428 "peroxisome")
(node 430 "peroxisome")
(node 431 "peroxisome")
(node 432 "peroxisome")
(node 433 "peroxisome")
(node 434 "peroxisome")
(node 435 "peroxisome")
(node 436 "peroxisome")
(node 437 "peroxisome")
(node 438 "peroxisome")
(node 439 "peroxisome")
(node 441 "peroxisome")
(node 442 "peroxisome")
(node 443 "peroxisome")
(node 444 "peroxisome")
(node 445 "peroxisome")
(node 446 "peroxisome")
(node 447 "peroxisome")
(node 448 "peroxisome")
(node 449 "peroxisome")
(node 450 "peroxisome")
(node 452 "peroxisome")
(node 453 "peroxisome")
(node 454 "peroxisome")
(node 455 "peroxisome")
(node 457 "peroxisome")
(node 459 "peroxisome")
(node 460 "peroxisome")
(node 461 "peroxisome")
(node 462 "peroxisome")
(node 464 "peroxisome")
(node 465 "peroxisome")
(node 467 "peroxisome")
(node 468 "peroxisome")
(node 469 "peroxisome")
(node 471 "peroxisome")
)
(property  0 bool "constant"
(default "false" "false")
)
(property  0 string "ecNumber"
(default "" "")
)
(property  0 vector<string> "encodes"
(default "()" "()")
)
(property  0 bool "fastReaction"
(default "false" "false")
)
(property  0 string "geneAssociation"
(default "" "")
(node 97 "YALI0F14729g")
(node 98 "YALI0F14729g")
(node 99 "YALI0F14729g")
(node 100 "YALI0F14729g")
(node 392 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 101 "YALI0F14729g")
(node 102 "YALI0F14729g")
(node 103 "YALI0D17864g")
(node 104 "(YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 396 "YALI0F14729g or YALI0F14729g or YALI0F14729g")
(node 399 "YALI0E18568g or YALI0E18568g")
(node 402 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 314 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g) or (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 413 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 320 "YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g")
(node 420 "YALI0D17864g or YALI0D17864g")
(node 330 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g or (YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)) or (YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 429 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 333 "YALI0E18568g or YALI0E18568g or YALI0E18568g or YALI0E18568g")
(node 338 "YALI0D17864g or YALI0D17864g")
(node 340 "YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g")
(node 440 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g or (YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)) or (YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 52 "YALI0E15378g")
(node 53 "YALI0E15378g")
(node 345 "YALI0D17864g or YALI0D17864g or YALI0E16016g or YALI0E16016g or YALI0D17864g or YALI0D17864g")
(node 54 "YALI0E15378g")
(node 55 "YALI0E15378g")
(node 56 "YALI0E15378g")
(node 57 "YALI0E15378g")
(node 349 "YALI0F14729g or YALI0F14729g or YALI0F14729g or YALI0F14729g")
(node 58 "YALI0E15378g")
(node 59 "YALI0E15378g")
(node 60 "YALI0E15378g")
(node 61 "YALI0E15378g")
(node 62 "YALI0E15378g")
(node 451 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 63 "YALI0E15378g")
(node 64 "YALI0E18568g")
(node 65 "YALI0E18568g")
(node 66 "YALI0E18568g")
(node 67 "YALI0E18568g")
(node 456 "YALI0D17864g or YALI0D17864g or YALI0D17864g or YALI0E16016g or YALI0D17864g or YALI0D17864g or YALI0D17864g")
(node 68 "YALI0E18568g")
(node 360 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 69 "YALI0E18568g")
(node 458 "YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g")
(node 70 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 71 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 72 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 73 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 365 "YALI0D17864g or YALI0D17864g")
(node 74 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 463 "YALI0F14729g or YALI0F14729g or YALI0F14729g or YALI0F14729g or YALI0F14729g or YALI0F14729g")
(node 75 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 76 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 77 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 466 "YALI0E18568g or YALI0E18568g or YALI0E18568g or YALI0E18568g or YALI0E18568g")
(node 78 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 79 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 80 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 81 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 82 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 470 "YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g or YALI0E15378g")
(node 83 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 84 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 85 "(YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 376 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 86 "(YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 87 "YALI0D17864g")
(node 88 "YALI0D17864g")
(node 89 "YALI0D17864g")
(node 90 "YALI0D17864g")
(node 91 "YALI0E16016g")
(node 92 "YALI0E16016g")
(node 93 "YALI0D17864g")
(node 94 "YALI0D17864g")
(node 385 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g or (YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 95 "YALI0D17864g")
(node 96 "YALI0F14729g")
)
(property  0 bool "hasOnlySubstanceUnits"
(default "false" "false")
)
(property  0 bool "hasOutsideConnections"
(default "false" "false")
(node 18 "true")
(node 28 "true")
(node 33 "true")
(node 38 "true")
(node 41 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 73 "true")
(node 75 "true")
(node 85 "true")
(node 86 "true")
)
(property  0 vector<string> "hasPart"
(default "()" "()")
)
(property  0 vector<string> "hasProperty"
(default "()" "()")
)
(property  0 vector<string> "hasVersion"
(default "()" "()")
)
(property  0 string "id"
(default "" "")
(node 0 "s_0045")
(node 1 "s_0048")
(node 2 "s_0051")
(node 3 "s_0054")
(node 4 "s_0057")
(node 5 "s_0236")
(node 6 "s_0245")
(node 7 "s_0249")
(node 8 "s_0253")
(node 9 "s_0256")
(node 10 "s_0259")
(node 11 "s_0263")
(node 12 "s_0385")
(node 13 "s_0437")
(node 14 "s_0451")
(node 15 "s_0492")
(node 16 "s_0519")
(node 17 "s_0580")
(node 18 "s_0585")
(node 19 "s_0610")
(node 20 "s_0781")
(node 21 "s_0785")
(node 22 "s_0804")
(node 23 "s_0974")
(node 24 "s_0980")
(node 25 "s_0993")
(node 26 "s_1034")
(node 27 "s_1041")
(node 28 "s_1047")
(node 29 "s_1086")
(node 30 "s_1090")
(node 31 "s_1130")
(node 32 "s_1138")
(node 33 "s_1143")
(node 34 "s_1150")
(node 35 "s_1164")
(node 36 "s_1176")
(node 37 "s_1183")
(node 38 "s_1190")
(node 39 "s_1331")
(node 40 "s_1337")
(node 41 "s_1358")
(node 42 "s_1361")
(node 43 "s_1385")
(node 44 "s_1388")
(node 45 "s_1391")
(node 46 "s_1394")
(node 47 "s_1397")
(node 48 "s_0771_b")
(node 49 "s_1441_b")
(node 50 "s_5013")
(node 51 "s_5014")
(node 52 "r_0049")
(node 53 "r_0050")
(node 54 "r_0051")
(node 55 "r_0052")
(node 56 "r_0053")
(node 57 "r_0054")
(node 58 "r_0055")
(node 59 "r_0056")
(node 60 "r_0057")
(node 61 "r_0058")
(node 62 "r_0059")
(node 63 "r_0060")
(node 64 "r_0115")
(node 65 "r_0116")
(node 66 "r_0117")
(node 67 "r_0120")
(node 68 "r_0121")
(node 69 "r_0122")
(node 70 "r_0135")
(node 71 "r_0136")
(node 72 "r_0137")
(node 73 "r_0138")
(node 74 "r_0139")
(node 75 "r_0140")
(node 76 "r_0406")
(node 77 "r_0407")
(node 78 "r_0408")
(node 79 "r_0409")
(node 80 "r_0410")
(node 81 "r_0411")
(node 82 "r_0412")
(node 83 "r_0413")
(node 84 "r_0414")
(node 85 "r_0415")
(node 86 "r_0416")
(node 87 "r_0431")
(node 88 "r_0432")
(node 89 "r_0434")
(node 90 "r_0436")
(node 91 "r_0437")
(node 92 "r_0438")
(node 93 "r_0442")
(node 94 "r_0444")
(node 95 "r_0446")
(node 96 "r_0818")
(node 97 "r_0819")
(node 98 "r_0820")
(node 99 "r_0821")
(node 100 "r_0822")
(node 101 "r_0823")
(node 102 "r_0824")
(node 103 "r_2015")
(node 104 "r_2016")
(node 105 "s_0385")
(node 106 "s_0385")
(node 107 "s_0385")
(node 108 "s_0385")
(node 109 "s_0385")
(node 110 "s_0385")
(node 111 "s_0385")
(node 112 "s_0385")
(node 113 "s_0385")
(node 114 "s_0385")
(node 115 "s_0385")
(node 116 "s_0385")
(node 117 "s_0385")
(node 118 "s_0385")
(node 119 "s_0385")
(node 120 "s_0385")
(node 121 "s_0385")
(node 122 "s_0437")
(node 123 "s_0437")
(node 124 "s_0437")
(node 125 "s_0437")
(node 126 "s_0437")
(node 127 "s_0437")
(node 128 "s_0437")
(node 129 "s_0437")
(node 130 "s_0437")
(node 131 "s_0451")
(node 132 "s_0451")
(node 133 "s_0451")
(node 134 "s_0451")
(node 135 "s_0451")
(node 136 "s_0451")
(node 137 "s_0451")
(node 138 "s_0451")
(node 139 "s_0451")
(node 140 "s_0519")
(node 141 "s_0519")
(node 142 "s_0519")
(node 143 "s_0519")
(node 144 "s_0519")
(node 145 "s_0519")
(node 146 "s_0519")
(node 147 "s_0519")
(node 148 "s_0519")
(node 149 "s_0519")
(node 150 "s_0519")
(node 151 "s_0519")
(node 152 "s_0519")
(node 153 "s_0519")
(node 154 "s_0519")
(node 155 "s_0519")
(node 156 "s_0519")
(node 157 "s_0519")
(node 158 "s_0519")
(node 159 "s_0519")
(node 160 "s_0519")
(node 161 "s_0519")
(node 162 "s_0519")
(node 163 "s_0519")
(node 164 "s_0519")
(node 165 "s_0519")
(node 166 "s_0519")
(node 167 "s_0519")
(node 168 "s_0519")
(node 169 "s_0519")
(node 170 "s_0519")
(node 171 "s_0519")
(node 172 "s_0519")
(node 173 "s_0519")
(node 174 "s_0610")
(node 175 "s_0610")
(node 176 "s_0610")
(node 177 "s_0610")
(node 178 "s_0610")
(node 179 "s_0610")
(node 180 "s_0610")
(node 181 "s_0610")
(node 182 "s_0610")
(node 183 "s_0804")
(node 184 "s_0804")
(node 185 "s_0804")
(node 186 "s_0804")
(node 187 "s_0804")
(node 188 "s_0804")
(node 189 "s_0804")
(node 190 "s_0804")
(node 191 "s_0804")
(node 192 "s_0804")
(node 193 "s_0804")
(node 194 "s_0804")
(node 195 "s_0804")
(node 196 "s_0804")
(node 197 "s_0804")
(node 198 "s_0804")
(node 199 "s_0804")
(node 200 "s_0980")
(node 201 "s_0980")
(node 202 "s_0980")
(node 203 "s_1086")
(node 204 "s_1086")
(node 205 "s_1086")
(node 206 "s_1086")
(node 207 "s_1086")
(node 208 "s_1086")
(node 209 "s_1086")
(node 210 "s_1086")
(node 211 "s_1086")
(node 212 "s_1086")
(node 213 "s_1086")
(node 214 "s_1086")
(node 215 "s_1086")
(node 216 "s_1086")
(node 217 "s_1086")
(node 218 "s_1086")
(node 219 "s_1086")
(node 220 "s_1090")
(node 221 "s_1090")
(node 222 "s_1090")
(node 223 "s_1090")
(node 224 "s_1090")
(node 225 "s_1090")
(node 226 "s_1090")
(node 227 "s_1090")
(node 228 "s_1090")
(node 229 "s_1090")
(node 230 "s_1090")
(node 231 "s_1090")
(node 232 "s_1090")
(node 233 "s_1090")
(node 234 "s_1090")
(node 235 "s_1090")
(node 236 "s_1090")
(node 237 "s_1095")
(node 238 "s_1095")
(node 239 "s_1095")
(node 240 "s_1095")
(node 241 "s_1095")
(node 242 "s_1099")
(node 243 "s_1099")
(node 244 "s_1099")
(node 245 "s_1099")
(node 246 "s_1099")
(node 247 "s_1164")
(node 248 "s_1164")
(node 249 "s_1164")
(node 250 "s_1164")
(node 251 "s_1164")
(node 252 "s_1164")
(node 253 "s_1164")
(node 254 "s_1164")
(node 255 "s_1164")
(node 256 "s_1164")
(node 257 "s_1164")
(node 258 "s_1164")
(node 259 "s_1164")
(node 260 "s_1164")
(node 261 "s_1164")
(node 262 "s_1164")
(node 263 "s_1164")
(node 264 "s_0771_b")
(node 265 "s_0771_b")
(node 266 "s_0771_b")
(node 267 "s_0771_b")
(node 268 "s_0771_b")
(node 269 "s_0771_b")
(node 270 "s_0771_b")
(node 271 "s_0771_b")
(node 272 "s_0771_b")
(node 273 "s_0771_b")
(node 274 "s_0771_b")
(node 275 "s_0771_b")
(node 276 "s_0771_b")
(node 277 "s_0771_b")
(node 278 "s_0771_b")
(node 279 "s_0771_b")
(node 280 "s_0771_b")
(node 281 "s_0771_b")
(node 282 "s_0771_b")
(node 283 "s_0771_b")
(node 284 "s_0771_b")
(node 285 "s_0771_b")
(node 286 "s_0771_b")
(node 287 "s_0771_b")
(node 288 "s_1441_b")
(node 289 "s_1441_b")
(node 290 "s_1441_b")
(node 291 "s_1441_b")
(node 292 "s_1441_b")
(node 293 "s_1441_b")
(node 294 "s_1441_b")
(node 295 "s_1441_b")
(node 296 "s_1441_b")
(node 297 "s_1441_b")
(node 298 "s_1441_b")
(node 299 "s_1441_b")
(node 300 "s_1441_b")
(node 301 "s_1441_b")
(node 302 "s_1441_b")
(node 303 "s_1441_b")
(node 304 "s_1441_b")
(node 305 "s_1441_b")
(node 306 "s_1441_b")
(node 307 "s_1441_b")
(node 308 "s_1441_b")
(node 309 "s_1441_b")
(node 310 "s_1441_b")
(node 311 "s_1441_b")
(node 312 "meta_s_0804")
(node 313 "meta_s_1164")
(node 314 "meta_r_0135")
(node 315 "meta_s_0045")
(node 316 "meta_s_1034")
(node 317 "meta_s_1086")
(node 318 "meta_s_1090")
(node 319 "meta_s_0771_b")
(node 320 "meta_r_0055")
(node 321 "meta_s_0245")
(node 322 "meta_s_0385")
(node 323 "meta_s_0519")
(node 324 "meta_s_0804")
(node 325 "meta_s_1086")
(node 326 "meta_s_1090")
(node 327 "meta_s_1164")
(node 328 "meta_s_0771_b")
(node 329 "meta_s_1441_b")
(node 330 "meta_r_0413")
(node 331 "meta_s_0385")
(node 332 "meta_s_0519")
(node 333 "meta_r_0116")
(node 334 "meta_s_0437")
(node 335 "meta_s_0451")
(node 336 "meta_s_0519")
(node 337 "meta_s_0610")
(node 338 "meta_r_0434")
(node 339 "meta_s_1441_b")
(node 340 "meta_r_0049")
(node 341 "meta_s_0437")
(node 342 "meta_s_0451")
(node 343 "meta_s_0519")
(node 344 "meta_s_0610")
(node 345 "meta_r_0431")
(node 346 "meta_s_0519")
(node 347 "meta_s_0771_b")
(node 348 "meta_s_1441_b")
(node 349 "meta_r_0818")
(node 350 "meta_s_0385")
(node 351 "meta_s_0519")
(node 352 "meta_s_0804")
(node 353 "meta_s_1086")
(node 354 "meta_s_1090")
(node 355 "meta_s_1095")
(node 356 "meta_s_1099")
(node 357 "meta_s_1164")
(node 358 "meta_s_0771_b")
(node 359 "meta_s_1441_b")
(node 360 "meta_r_0407")
(node 361 "meta_s_0437")
(node 362 "meta_s_0451")
(node 363 "meta_s_0519")
(node 364 "meta_s_0610")
(node 365 "meta_r_0436")
(node 366 "meta_s_0385")
(node 367 "meta_s_0519")
(node 368 "meta_s_0804")
(node 369 "meta_s_1086")
(node 370 "meta_s_1090")
(node 371 "meta_s_1095")
(node 372 "meta_s_1099")
(node 373 "meta_s_1164")
(node 374 "meta_s_0771_b")
(node 375 "meta_s_1441_b")
(node 376 "meta_r_0411")
(node 377 "meta_s_0385")
(node 378 "meta_s_0519")
(node 379 "meta_s_0804")
(node 380 "meta_s_1086")
(node 381 "meta_s_1090")
(node 382 "meta_s_1164")
(node 383 "meta_s_0771_b")
(node 384 "meta_s_1441_b")
(node 385 "meta_r_0406")
(node 386 "meta_s_0492")
(node 387 "meta_s_0785")
(node 388 "meta_s_1047")
(node 389 "meta_s_0585")
(node 390 "meta_s_0804")
(node 391 "meta_s_1164")
(node 392 "meta_r_0138")
(node 393 "meta_s_0519")
(node 394 "meta_s_0771_b")
(node 395 "meta_s_1441_b")
(node 396 "meta_r_0821")
(node 397 "meta_s_0385")
(node 398 "meta_s_0519")
(node 399 "meta_r_0115")
(node 400 "meta_s_0804")
(node 401 "meta_s_1164")
(node 402 "meta_r_0135")
(node 403 "meta_s_0385")
(node 404 "meta_s_0519")
(node 405 "meta_s_0804")
(node 406 "meta_s_1086")
(node 407 "meta_s_1090")
(node 408 "meta_s_1095")
(node 409 "meta_s_1099")
(node 410 "meta_s_1164")
(node 411 "meta_s_0771_b")
(node 412 "meta_s_1441_b")
(node 413 "meta_r_0411")
(node 414 "meta_s_1041")
(node 415 "meta_s_0045")
(node 416 "meta_s_0437")
(node 417 "meta_s_0451")
(node 418 "meta_s_0519")
(node 419 "meta_s_0610")
(node 420 "meta_r_0436")
(node 421 "meta_s_0385")
(node 422 "meta_s_0519")
(node 423 "meta_s_0804")
(node 424 "meta_s_1086")
(node 425 "meta_s_1090")
(node 426 "meta_s_1164")
(node 427 "meta_s_0771_b")
(node 428 "meta_s_1441_b")
(node 429 "meta_r_0406")
(node 430 "meta_s_0585")
(node 431 "meta_s_0492")
(node 432 "meta_s_0385")
(node 433 "meta_s_0519")
(node 434 "meta_s_0804")
(node 435 "meta_s_1086")
(node 436 "meta_s_1090")
(node 437 "meta_s_1164")
(node 438 "meta_s_0771_b")
(node 439 "meta_s_1441_b")
(node 440 "meta_r_0413")
(node 441 "meta_s_0385")
(node 442 "meta_s_0519")
(node 443 "meta_s_0804")
(node 444 "meta_s_1086")
(node 445 "meta_s_1090")
(node 446 "meta_s_1095")
(node 447 "meta_s_1099")
(node 448 "meta_s_1164")
(node 449 "meta_s_0771_b")
(node 450 "meta_s_1441_b")
(node 451 "meta_r_0407")
(node 452 "meta_s_0437")
(node 453 "meta_s_0451")
(node 454 "meta_s_0519")
(node 455 "meta_s_0610")
(node 456 "meta_r_0431")
(node 457 "meta_s_1441_b")
(node 458 "meta_r_0049")
(node 459 "meta_s_0785")
(node 460 "meta_s_0519")
(node 461 "meta_s_0771_b")
(node 462 "meta_s_1441_b")
(node 463 "meta_r_0818")
(node 464 "meta_s_0385")
(node 465 "meta_s_0519")
(node 466 "meta_r_0115")
(node 467 "meta_s_1086")
(node 468 "meta_s_1090")
(node 469 "meta_s_0771_b")
(node 470 "meta_r_0055")
(node 471 "meta_s_0245")
)
(property  0 double "initialAmount"
(default "0" "0")
)
(property  0 double "initialConcentration"
(default "0" "0")
)
(property  0 vector<string> "is"
(default "()" "()")
(node 0 "(\"http://identifiers.org/obo.chebi/chebi:28325\")")
(node 1 "(\"http://identifiers.org/obo.chebi/chebi:52976\")")
(node 2 "(\"http://identifiers.org/obo.chebi/chebi:62558\")")
(node 3 "(\"http://identifiers.org/obo.chebi/chebi:27402\")")
(node 4 "(\"http://identifiers.org/obo.chebi/chebi:62614\")")
(node 5 "(\"http://identifiers.org/obo.chebi/chebi:50583\")")
(node 6 "(\"http://identifiers.org/obo.chebi/chebi:28528\")")
(node 7 "(\"http://identifiers.org/obo.chebi/chebi:52977\")")
(node 8 "(\"http://identifiers.org/obo.chebi/chebi:62615\")")
(node 9 "(\"http://identifiers.org/obo.chebi/chebi:50571\")")
(node 10 "(\"http://identifiers.org/obo.chebi/chebi:15491\")")
(node 11 "(\"http://identifiers.org/obo.chebi/chebi:28726\")")
(node 12 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 13 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 14 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 15 "(\"http://identifiers.org/obo.chebi/chebi:31013\")")
(node 16 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 17 "(\"http://identifiers.org/obo.chebi/chebi:27689\")")
(node 18 "(\"http://identifiers.org/obo.chebi/chebi:61430\")")
(node 19 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 20 "(\"http://identifiers.org/obo.chebi/chebi:52966\")")
(node 21 "(\"http://identifiers.org/obo.chebi/chebi:52381\")")
(node 22 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 23 "(\"http://identifiers.org/obo.chebi/chebi:18262\")")
(node 24 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 25 "(\"http://identifiers.org/obo.chebi/chebi:28866\")")
(node 26 "(\"http://identifiers.org/obo.chebi/chebi:30807\")")
(node 27 "(\"http://identifiers.org/obo.chebi/chebi:32370\")")
(node 28 "(\"http://identifiers.org/obo.chebi/chebi:15532\")")
(node 29 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 30 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 31 "(\"http://identifiers.org/obo.chebi/chebi:53151\")")
(node 32 "(\"http://identifiers.org/obo.chebi/chebi:25646\")")
(node 33 "(\"http://identifiers.org/obo.chebi/chebi:15533\")")
(node 34 "(\"http://identifiers.org/obo.chebi/chebi:15534\")")
(node 35 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 36 "(\"http://identifiers.org/obo.chebi/chebi:7896\")")
(node 37 "(\"http://identifiers.org/obo.chebi/chebi:32372\")")
(node 38 "(\"http://identifiers.org/obo.chebi/chebi:57379\")")
(node 39 "(\"http://identifiers.org/obo.chebi/chebi:25629\")")
(node 40 "(\"http://identifiers.org/obo.chebi/chebi:15541\")")
(node 41 "(\"http://identifiers.org/obo.chebi/chebi:52974\")")
(node 42 "(\"http://identifiers.org/obo.chebi/chebi:26900\")")
(node 43 "(\"http://identifiers.org/obo.chebi/chebi:61406\")")
(node 44 "(\"http://identifiers.org/obo.chebi/chebi:15471\")")
(node 45 "(\"http://identifiers.org/obo.chebi/chebi:52975\")")
(node 46 "(\"http://identifiers.org/obo.chebi/chebi:50570\")")
(node 47 "(\"http://identifiers.org/obo.chebi/chebi:61405\")")
(node 48 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 49 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 50 "(\"http://identifiers.org/obo.chebi/chebi:17968\")")
(node 51 "(\"http://identifiers.org/obo.chebi/chebi:15517\")")
(node 105 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 106 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 107 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 108 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 109 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 110 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 111 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 112 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 113 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 114 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 115 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 116 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 117 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 118 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 119 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 120 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 121 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 122 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 123 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 124 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 125 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 126 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 127 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 128 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 129 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 130 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 131 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 132 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 133 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 134 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 135 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 136 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 137 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 138 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 139 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 140 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 141 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 142 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 143 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 144 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 145 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 146 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 147 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 148 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 149 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 150 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 151 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 152 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 153 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 154 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 155 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 156 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 157 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 158 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 159 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 160 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 161 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 162 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 163 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 164 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 165 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 166 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 167 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 168 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 169 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 170 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 171 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 172 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 173 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 174 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 175 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 176 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 177 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 178 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 179 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 180 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 181 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 182 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 183 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 184 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 185 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 186 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 187 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 188 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 189 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 190 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 191 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 192 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 193 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 194 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 195 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 196 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 197 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 198 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 199 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 200 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 201 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 202 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 203 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 204 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 205 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 206 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 207 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 208 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 209 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 210 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 211 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 212 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 213 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 214 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 215 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 216 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 217 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 218 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 219 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 220 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 221 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 222 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 223 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 224 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 225 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 226 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 227 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 228 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 229 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 230 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 231 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 232 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 233 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 234 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 235 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 236 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 237 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 238 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 239 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 240 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 241 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 242 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 243 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 244 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 245 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 246 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 247 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 248 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 249 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 250 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 251 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 252 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 253 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 254 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 255 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 256 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 257 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 258 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 259 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 260 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 261 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 262 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 263 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 264 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 265 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 266 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 267 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 268 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 269 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 270 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 271 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 272 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 273 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 274 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 275 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 276 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 277 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 278 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 279 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 280 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 281 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 282 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 283 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 284 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 285 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 286 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 287 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 288 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 289 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 290 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 291 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 292 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 293 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 294 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 295 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 296 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 297 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 298 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 299 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 300 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 301 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 302 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 303 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 304 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 305 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 306 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 307 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 308 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 309 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 310 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 311 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
)
(property  0 vector<string> "isDescribedBy"
(default "()" "()")
)
(property  0 vector<string> "isEncodedBy"
(default "()" "()")
)
(property  0 vector<string> "isHomologTo"
(default "()" "()")
)
(property  0 vector<string> "isPartOf"
(default "()" "()")
)
(property  0 vector<string> "isPropertyOf"
(default "()" "()")
)
(property  0 vector<string> "isVersionOf"
(default "()" "()")
(node 52 "(\"_.6.0.0.True\")")
(node 53 "(\"_.6.1.0.True\")")
(node 54 "(\"_.6.2.0.True\")")
(node 55 "(\"_.6.3.0.True\")")
(node 56 "(\"_.6.4.0.True\")")
(node 57 "(\"_.6.5.0.True\")")
(node 58 "(\"_.12.0.0.True\")")
(node 59 "(\"_.12.1.0.True\")")
(node 60 "(\"_.12.2.0.True\")")
(node 61 "(\"_.12.3.0.True\")")
(node 62 "(\"_.12.4.0.True\")")
(node 63 "(\"_.12.5.0.True\")")
(node 64 "(\"_.3.0.0.True\")")
(node 65 "(\"_.8.0.0.True\")")
(node 66 "(\"_.3.1.0.True\")")
(node 67 "(\"_.3.2.0.True\")")
(node 68 "(\"_.3.3.0.True\")")
(node 69 "(\"_.3.4.0.True\")")
(node 70 "(\"_.5.0.0.True\")")
(node 71 "(\"_.5.1.0.True\")")
(node 72 "(\"_.5.2.0.True\")")
(node 73 "(\"_.5.3.0.True\")")
(node 74 "(\"_.5.4.0.True\")")
(node 75 "(\"_.5.5.0.True\")")
(node 76 "(\"_.11.0.0.True\")")
(node 77 "(\"_.13.0.0.True\")")
(node 78 "(\"_.11.1.0.True\")")
(node 79 "(\"_.13.1.0.True\")")
(node 80 "(\"_.11.2.0.True\")")
(node 81 "(\"_.0.0.0.True\")")
(node 82 "(\"_.0.1.0.True\")")
(node 83 "(\"_.1.0.0.True\")")
(node 84 "(\"_.13.2.0.True\")")
(node 85 "(\"_.1.1.0.True\")")
(node 86 "(\"_.10.0.0.True\")")
(node 87 "(\"_.2.0.0.True\")")
(node 88 "(\"_.2.1.0.True\")")
(node 89 "(\"_.2.2.0.True\")")
(node 90 "(\"_.7.0.0.True\")")
(node 91 "(\"_.4.0.0.True\")")
(node 92 "(\"_.2.3.0.True\")")
(node 93 "(\"_.2.4.0.True\")")
(node 94 "(\"_.2.5.0.True\")")
(node 95 "(\"_.7.1.0.True\")")
(node 96 "(\"_.14.0.0.True\")")
(node 97 "(\"_.14.1.0.True\")")
(node 98 "(\"_.9.0.0.True\")")
(node 99 "(\"_.14.2.0.True\")")
(node 100 "(\"_.14.3.0.True\")")
(node 101 "(\"_.14.4.0.True\")")
(node 102 "(\"_.14.5.0.True\")")
(node 103 "(\"_.2.6.0.True\")")
(node 104 "(\"_.1.2.0.True\")")
)
(property  0 vector<int> "listOfProducts"
(default "()" "()")
(node 52 "(109, 121)")
(node 53 "(110, 121)")
(node 54 "(3)")
(node 55 "(49, 121)")
(node 56 "(112, 121)")
(node 57 "(113, 121)")
(node 58 "(2, 72)")
(node 59 "(4, 72)")
(node 60 "(15, 119, 73)")
(node 61 "(5, 72)")
(node 62 "(13, 72)")
(node 63 "(6, 72)")
(node 64 "(22, 96)")
(node 65 "(22, 106)")
(node 66 "(22, 71)")
(node 67 "(22, 63)")
(node 68 "(22, 84)")
(node 69 "(22, 39)")
(node 70 "(50, 109)")
(node 71 "(50, 110)")
(node 72 "(50, 111)")
(node 73 "(49, 50)")
(node 74 "(50, 112)")
(node 75 "(50, 113)")
(node 76 "(22, 119, 50, 73)")
(node 77 "(22, 119, 50, 73, 74)")
(node 78 "(22, 119, 50, 73)")
(node 79 "(22, 119, 50, 73, 74)")
(node 80 "(22, 119, 50, 73)")
(node 81 "(22, 119, 50, 73, 74)")
(node 82 "(22, 119, 50, 73, 74)")
(node 83 "(22, 119, 50, 73)")
(node 84 "(22, 119, 50, 73, 74)")
(node 85 "(22, 119, 50, 73)")
(node 86 "(22, 119, 50, 73, 104)")
(node 87 "(26, 39, 41)")
(node 88 "(26, 41, 63)")
(node 89 "(26, 41, 96)")
(node 90 "(26, 41, 49)")
(node 91 "(26, 41, 106)")
(node 92 "(26, 41, 47)")
(node 93 "(26, 41, 84)")
(node 94 "(26, 41, 71)")
(node 95 "(26, 41, 108)")
(node 96 "(36, 38, 119)")
(node 97 "(36, 119, 62)")
(node 98 "(36, 119, 65)")
(node 99 "(36, 119, 92)")
(node 100 "(36, 119, 67)")
(node 101 "(36, 119, 102)")
(node 102 "(36, 119, 83)")
(node 103 "(124, 26, 41)")
(node 104 "(22, 119, 50, 73)")
)
(property  0 vector<int> "listOfReactants"
(default "()" "()")
(node 52 "(2)")
(node 53 "(4)")
(node 54 "(111, 121)")
(node 55 "(5)")
(node 56 "(13)")
(node 57 "(6)")
(node 58 "(14, 119, 73)")
(node 59 "(16, 119, 73)")
(node 60 "(3, 72)")
(node 61 "(18, 119, 73)")
(node 62 "(17, 119, 73)")
(node 63 "(19, 119, 73)")
(node 64 "(17, 36)")
(node 65 "(15, 36)")
(node 66 "(18, 36)")
(node 67 "(19, 36)")
(node 68 "(14, 36)")
(node 69 "(16, 36)")
(node 70 "(39, 90)")
(node 71 "(63, 90)")
(node 72 "(47, 90)")
(node 73 "(90, 96)")
(node 74 "(90, 104)")
(node 75 "(71, 90)")
(node 76 "(36, 72, 90, 108, 121)")
(node 77 "(36, 49, 72, 75, 90, 121)")
(node 78 "(36, 49, 72, 90, 121)")
(node 79 "(36, 72, 75, 86, 90, 121)")
(node 80 "(36, 72, 86, 90, 121)")
(node 81 "(36, 72, 75, 81, 90, 121)")
(node 82 "(36, 72, 75, 81, 90, 121)")
(node 83 "(36, 72, 81, 90, 121)")
(node 84 "(36, 72, 75, 90, 108, 121)")
(node 85 "(36, 72, 84, 90, 121)")
(node 86 "(36, 72, 90, 106, 121)")
(node 87 "(28, 36, 38)")
(node 88 "(28, 36, 62)")
(node 89 "(28, 36, 92)")
(node 90 "(28, 36, 94)")
(node 91 "(28, 36, 65)")
(node 92 "(28, 33, 36)")
(node 93 "(28, 36, 83)")
(node 94 "(28, 36, 67)")
(node 95 "(28, 36, 69)")
(node 96 "(39, 121)")
(node 97 "(63, 121)")
(node 98 "(106, 121)")
(node 99 "(96, 121)")
(node 100 "(71, 121)")
(node 101 "(104, 121)")
(node 102 "(84, 121)")
(node 103 "(123, 28, 36)")
(node 104 "(36, 72, 124, 90, 121)")
)
(property  0 bool "membrane"
(default "false" "false")
)
(property  0 int "membranePos"
(default "-1" "0")
)
(property  0 vector<color> "multiColor"
(default "()" "()")
(node 1 "((102,102,204,255))")
(node 6 "((102,204,102,255))")
(node 11 "((153,102,204,255))")
(node 12 "((211,211,211,255))")
(node 13 "((211,211,211,255))")
(node 14 "((211,211,211,255))")
(node 16 "((211,211,211,255))")
(node 19 "((211,211,211,255))")
(node 22 "((211,211,211,255))")
(node 25 "((102,204,127,255))")
(node 29 "((211,211,211,255))")
(node 30 "((211,211,211,255))")
(node 31 "((153,204,102,255))")
(node 35 "((211,211,211,255))")
(node 40 "((102,204,150,255))")
(node 41 "((102,204,204,255))")
(node 48 "((211,211,211,255))")
(node 49 "((211,211,211,255))")
(node 51 "((102,204,127,255))")
(node 54 "((211,211,211,255))")
(node 58 "((211,211,211,255))")
(node 60 "((211,211,211,255))")
(node 63 "((211,211,211,255))")
(node 65 "((211,211,211,255))")
(node 67 "((211,211,211,255))")
(node 68 "((211,211,211,255))")
(node 74 "((211,211,211,255))")
(node 83 "((211,211,211,255))")
(node 85 "((211,211,211,255))")
(node 86 "((211,211,211,255))")
(node 89 "((211,211,211,255))")
(node 91 "((211,211,211,255))")
(node 98 "((211,211,211,255))")
(node 99 "((211,211,211,255))")
(node 101 "((211,211,211,255))")
(node 103 "((211,211,211,255))")
(node 104 "((211,211,211,255))")
(node 106 "((211,211,211,255))")
(node 108 "((211,211,211,255))")
(node 109 "((211,211,211,255))")
(node 118 "((211,211,211,255))")
(node 120 "((211,211,211,255))")
(node 121 "((211,211,211,255))")
(node 124 "((211,211,211,255))")
(node 126 "((211,211,211,255))")
(node 133 "((211,211,211,255))")
(node 135 "((211,211,211,255))")
(node 141 "((211,211,211,255))")
(node 143 "((211,211,211,255))")
(node 144 "((211,211,211,255))")
(node 153 "((211,211,211,255))")
(node 155 "((211,211,211,255))")
(node 156 "((211,211,211,255))")
(node 159 "((211,211,211,255))")
(node 161 "((211,211,211,255))")
(node 168 "((211,211,211,255))")
(node 169 "((211,211,211,255))")
(node 171 "((211,211,211,255))")
(node 173 "((211,211,211,255))")
(node 176 "((211,211,211,255))")
(node 178 "((211,211,211,255))")
(node 187 "((211,211,211,255))")
(node 196 "((211,211,211,255))")
(node 198 "((211,211,211,255))")
(node 199 "((211,211,211,255))")
(node 203 "((211,211,211,255))")
(node 205 "((211,211,211,255))")
(node 208 "((211,211,211,255))")
(node 216 "((211,211,211,255))")
(node 218 "((211,211,211,255))")
(node 219 "((211,211,211,255))")
(node 220 "((211,211,211,255))")
(node 222 "((211,211,211,255))")
(node 225 "((211,211,211,255))")
(node 233 "((211,211,211,255))")
(node 235 "((211,211,211,255))")
(node 236 "((211,211,211,255))")
(node 251 "((211,211,211,255))")
(node 260 "((211,211,211,255))")
(node 262 "((211,211,211,255))")
(node 263 "((211,211,211,255))")
(node 264 "((211,211,211,255))")
(node 266 "((211,211,211,255))")
(node 269 "((211,211,211,255))")
(node 277 "((211,211,211,255))")
(node 279 "((211,211,211,255))")
(node 280 "((211,211,211,255))")
(node 283 "((211,211,211,255))")
(node 284 "((211,211,211,255))")
(node 286 "((211,211,211,255))")
(node 290 "((211,211,211,255))")
(node 301 "((211,211,211,255))")
(node 303 "((211,211,211,255))")
(node 304 "((211,211,211,255))")
(node 307 "((211,211,211,255))")
(node 308 "((211,211,211,255))")
(node 310 "((211,211,211,255))")
(node 312 "((211,211,211,255))")
(node 313 "((211,211,211,255))")
(node 314 "((211,211,211,255))")
(node 315 "((204,102,189,255))")
(node 316 "((102,160,204,255))")
(node 317 "((211,211,211,255))")
(node 318 "((211,211,211,255))")
(node 319 "((211,211,211,255))")
(node 320 "((211,211,211,255))")
(node 321 "((204,189,102,255))")
(node 322 "((211,211,211,255))")
(node 323 "((211,211,211,255))")
(node 324 "((211,211,211,255))")
(node 325 "((211,211,211,255))")
(node 326 "((211,211,211,255))")
(node 327 "((211,211,211,255))")
(node 328 "((211,211,211,255))")
(node 329 "((211,211,211,255))")
(node 330 "((211,211,211,255))")
(node 331 "((211,211,211,255))")
(node 332 "((211,211,211,255))")
(node 333 "((211,211,211,255))")
(node 334 "((211,211,211,255))")
(node 335 "((211,211,211,255))")
(node 336 "((211,211,211,255))")
(node 337 "((211,211,211,255))")
(node 338 "((211,211,211,255))")
(node 339 "((211,211,211,255))")
(node 340 "((211,211,211,255))")
(node 341 "((211,211,211,255))")
(node 342 "((211,211,211,255))")
(node 343 "((211,211,211,255))")
(node 344 "((211,211,211,255))")
(node 345 "((211,211,211,255))")
(node 346 "((211,211,211,255))")
(node 347 "((211,211,211,255))")
(node 348 "((211,211,211,255))")
(node 349 "((211,211,211,255))")
(node 350 "((211,211,211,255))")
(node 351 "((211,211,211,255))")
(node 352 "((211,211,211,255))")
(node 353 "((211,211,211,255))")
(node 354 "((211,211,211,255))")
(node 355 "((211,211,211,255))")
(node 356 "((211,211,211,255))")
(node 357 "((211,211,211,255))")
(node 358 "((211,211,211,255))")
(node 359 "((211,211,211,255))")
(node 360 "((211,211,211,255))")
(node 361 "((211,211,211,255))")
(node 362 "((211,211,211,255))")
(node 363 "((211,211,211,255))")
(node 364 "((211,211,211,255))")
(node 365 "((211,211,211,255))")
(node 366 "((211,211,211,255))")
(node 367 "((211,211,211,255))")
(node 368 "((211,211,211,255))")
(node 369 "((211,211,211,255))")
(node 370 "((211,211,211,255))")
(node 371 "((211,211,211,255))")
(node 372 "((211,211,211,255))")
(node 373 "((211,211,211,255))")
(node 374 "((211,211,211,255))")
(node 375 "((211,211,211,255))")
(node 376 "((211,211,211,255))")
(node 377 "((211,211,211,255))")
(node 378 "((211,211,211,255))")
(node 379 "((211,211,211,255))")
(node 380 "((211,211,211,255))")
(node 381 "((211,211,211,255))")
(node 382 "((211,211,211,255))")
(node 383 "((211,211,211,255))")
(node 384 "((211,211,211,255))")
(node 385 "((211,211,211,255))")
(node 386 "((131,204,102,255))")
(node 387 "((204,102,102,255))")
(node 388 "((131,102,204,255))")
(node 389 "((102,204,160,255))")
(node 390 "((211,211,211,255))")
(node 391 "((211,211,211,255))")
(node 392 "((211,211,211,255))")
(node 393 "((211,211,211,255))")
(node 394 "((211,211,211,255))")
(node 395 "((211,211,211,255))")
(node 396 "((211,211,211,255))")
(node 397 "((211,211,211,255))")
(node 398 "((211,211,211,255))")
(node 399 "((211,211,211,255))")
(node 400 "((211,211,211,255))")
(node 401 "((211,211,211,255))")
(node 402 "((211,211,211,255))")
(node 403 "((211,211,211,255))")
(node 404 "((211,211,211,255))")
(node 405 "((211,211,211,255))")
(node 406 "((211,211,211,255))")
(node 407 "((211,211,211,255))")
(node 408 "((211,211,211,255))")
(node 409 "((211,211,211,255))")
(node 410 "((211,211,211,255))")
(node 411 "((211,211,211,255))")
(node 412 "((211,211,211,255))")
(node 413 "((211,211,211,255))")
(node 414 "((170,170,102,255))")
(node 415 "((102,170,170,255))")
(node 416 "((211,211,211,255))")
(node 417 "((211,211,211,255))")
(node 418 "((211,211,211,255))")
(node 419 "((211,211,211,255))")
(node 420 "((211,211,211,255))")
(node 421 "((211,211,211,255))")
(node 422 "((211,211,211,255))")
(node 423 "((211,211,211,255))")
(node 424 "((211,211,211,255))")
(node 425 "((211,211,211,255))")
(node 426 "((211,211,211,255))")
(node 427 "((211,211,211,255))")
(node 428 "((211,211,211,255))")
(node 429 "((211,211,211,255))")
(node 430 "((170,102,204,255))")
(node 431 "((102,170,204,255))")
(node 432 "((211,211,211,255))")
(node 433 "((211,211,211,255))")
(node 434 "((211,211,211,255))")
(node 435 "((211,211,211,255))")
(node 436 "((211,211,211,255))")
(node 437 "((211,211,211,255))")
(node 438 "((211,211,211,255))")
(node 439 "((211,211,211,255))")
(node 440 "((211,211,211,255))")
(node 441 "((211,211,211,255))")
(node 442 "((211,211,211,255))")
(node 443 "((211,211,211,255))")
(node 444 "((211,211,211,255))")
(node 445 "((211,211,211,255))")
(node 446 "((211,211,211,255))")
(node 447 "((211,211,211,255))")
(node 448 "((211,211,211,255))")
(node 449 "((211,211,211,255))")
(node 450 "((211,211,211,255))")
(node 451 "((211,211,211,255))")
(node 452 "((211,211,211,255))")
(node 453 "((211,211,211,255))")
(node 454 "((211,211,211,255))")
(node 455 "((211,211,211,255))")
(node 456 "((211,211,211,255))")
(node 457 "((211,211,211,255))")
(node 458 "((211,211,211,255))")
(node 459 "((204,170,102,255))")
(node 460 "((211,211,211,255))")
(node 461 "((211,211,211,255))")
(node 462 "((211,211,211,255))")
(node 463 "((211,211,211,255))")
(node 464 "((211,211,211,255))")
(node 465 "((211,211,211,255))")
(node 466 "((211,211,211,255))")
(node 467 "((211,211,211,255))")
(node 468 "((211,211,211,255))")
(node 469 "((211,211,211,255))")
(node 470 "((211,211,211,255))")
(node 471 "((102,204,102,255))")
)
(property  0 string "name"
(default "" "")
(node 0 "(S)-3-hydroxydecanoyl-CoA [peroxisome]")
(node 1 "(S)-3-hydroxyhexacosanoyl-CoA [peroxisome]")
(node 2 "(S)-3-hydroxylauroyl-CoA [peroxisome]")
(node 3 "(S)-3-hydroxypalmitoyl-CoA [peroxisome]")
(node 4 "(S)-3-hydroxytetradecanoyl-CoA [peroxisome]")
(node 5 "3-hydroxyoctadecanoyl-CoA [peroxisome]")
(node 6 "3-oxodecanoyl-CoA [peroxisome]")
(node 7 "3-oxohexacosanoyl-CoA [peroxisome]")
(node 8 "3-oxolauroyl-CoA [peroxisome]")
(node 9 "3-oxooctadecanoyl-CoA [peroxisome]")
(node 10 "3-oxopalmitoyl-CoA [peroxisome]")
(node 11 "3-oxotetradecanoyl-CoA [peroxisome]")
(node 12 "acetyl-CoA [peroxisome]")
(node 13 "AMP [peroxisome]")
(node 14 "ATP [peroxisome]")
(node 15 "cerotate [peroxisome]")
(node 16 "coenzyme A [peroxisome]")
(node 17 "decanoate [peroxisome]")
(node 18 "decanoyl-CoA [peroxisome]")
(node 19 "pyrophosphate [peroxisome]")
(node 20 "hexacosanoyl-CoA [peroxisome]")
(node 21 "hexadec-2-enoyl-CoA [peroxisome]")
(node 22 "hydrogen peroxide [peroxisome]")
(node 23 "laurate [peroxisome]")
(node 24 "lauroyl-CoA [peroxisome]")
(node 25 "lignoceric acid [peroxisome]")
(node 26 "myristate [peroxisome]")
(node 27 "myristoleate [peroxisome]")
(node 28 "myristoyl-CoA [peroxisome]")
(node 29 "NAD [peroxisome]")
(node 30 "NADH [peroxisome]")
(node 31 "octadec-9-ynoyl-CoA [peroxisome]")
(node 32 "octanoate [peroxisome]")
(node 33 "octanoyl-CoA [peroxisome]")
(node 34 "oleoyl-CoA [peroxisome]")
(node 35 "oxygen [peroxisome]")
(node 36 "palmitate [peroxisome]")
(node 37 "palmitoleate [peroxisome]")
(node 38 "palmitoyl-CoA [peroxisome]")
(node 39 "stearate [peroxisome]")
(node 40 "stearoyl-CoA [peroxisome]")
(node 41 "tetracosanoyl-CoA [peroxisome]")
(node 42 "tetradecenoyl-CoA [peroxisome]")
(node 43 "trans-dec-2-enoyl-CoA [peroxisome]")
(node 44 "trans-dodec-2-enoyl-CoA [peroxisome]")
(node 45 "trans-hexacos-2-enoyl-CoA [peroxisome]")
(node 46 "trans-octadec-2-enoyl-CoA [peroxisome]")
(node 47 "trans-tetradec-2-enoyl-CoA [peroxisome]")
(node 48 "H+ [peroxisome]")
(node 49 "H2O [peroxisome]")
(node 50 "butyrate [peroxisome]")
(node 51 "butyryl-CoA [peroxisome]")
(node 52 "3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
(node 53 "3-hydroxyacyl-CoA dehydratase (3-hydroxydodecanoyl-CoA)")
(node 54 "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexacosyl-CoA)")
(node 55 "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexadecanoyl-CoA)")
(node 56 "3-hydroxyacyl-CoA dehydratase (3-hydroxyoctadecanoyl-CoA)")
(node 57 "3-hydroxyacyl-CoA dehydratase (3-hydroxytetradecanoyl-CoA)")
(node 58 "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
(node 59 "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
(node 60 "3-hydroxyacyl-CoA dehydrogenase (3-oxohexacosyl-CoA)")
(node 61 "3-hydroxyacyl-CoA dehydrogenase (3-oxohexadecanoyl-CoA)")
(node 62 "3-hydroxyacyl-CoA dehydrogenase (3-oxooctadecanoyl-CoA)")
(node 63 "3-hydroxyacyl-CoA dehydrogenase (3-oxotetradecanoyl-CoA)")
(node 64 "acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
(node 65 "acetyl-CoA acyltransferase (tetracosanoyl-CoA)")
(node 66 "acetyl-CoA acyltransferase (tetradecanoyl-CoA)")
(node 67 "acetyl-CoA C-acetyltransferase (dodecanoyl)")
(node 68 "acetyl-CoA C-acetyltransferase (octanoyl-CoA)")
(node 69 "acetyl-CoA C-acyltransferase (decanoyl-CoA)")
(node 70 "acyl-CoA oxidase (decanoyl-CoA)")
(node 71 "acyl-CoA oxidase (dodecanoyl-CoA)")
(node 72 "acyl-CoA oxidase (hexacanoyl-CoA)")
(node 73 "acyl-CoA oxidase (hexadecanoyl-CoA)")
(node 74 "acyl-CoA oxidase (octadecanoyl-CoA)")
(node 75 "acyl-CoA oxidase (tetradecanoyl-CoA)")
(node 76 "fatty acid oxidation")
(node 77 "fatty acid oxidation")
(node 78 "fatty acid oxidation")
(node 79 "fatty acid oxidation")
(node 80 "fatty acid oxidation")
(node 81 "fatty acid oxidation")
(node 82 "fatty acid oxidation")
(node 83 "fatty acid oxidation")
(node 84 "fatty acid oxidation")
(node 85 "fatty acid oxidation (octanoyl-CoA)")
(node 86 "fatty acid oxidation (tetradecansoyl-CoA)")
(node 87 "fatty-acid--CoA ligase (decanoate)")
(node 88 "fatty-acid--CoA ligase (dodecanoate)")
(node 89 "fatty-acid--CoA ligase (hexadecanoate)")
(node 90 "fatty-acid--CoA ligase (hexadecenoate)")
(node 91 "fatty-acid--CoA ligase (n-C24:0)")
(node 92 "fatty-acid--CoA ligase (n-C26:0)")
(node 93 "fatty-acid--CoA ligase (octanoate)")
(node 94 "fatty-acid--CoA ligase (tetradecanoate)")
(node 95 "fatty-acid--CoA ligase (tetradecenoate)")
(node 96 "peroxisomal acyl-CoA thioesterase")
(node 97 "peroxisomal acyl-CoA thioesterase")
(node 98 "peroxisomal acyl-CoA thioesterase")
(node 99 "peroxisomal acyl-CoA thioesterase")
(node 100 "peroxisomal acyl-CoA thioesterase")
(node 101 "peroxisomal acyl-CoA thioesterase")
(node 102 "peroxisomal acyl-CoA thioesterase")
(node 103 "fatty-acid--CoA ligase (butyrate)")
(node 104 "fatty acid oxidation (butyryl-CoA)")
(node 105 "acetyl-CoA [peroxisome]")
(node 106 "acetyl-CoA [peroxisome]")
(node 107 "acetyl-CoA [peroxisome]")
(node 108 "acetyl-CoA [peroxisome]")
(node 109 "acetyl-CoA [peroxisome]")
(node 110 "acetyl-CoA [peroxisome]")
(node 111 "acetyl-CoA [peroxisome]")
(node 112 "acetyl-CoA [peroxisome]")
(node 113 "acetyl-CoA [peroxisome]")
(node 114 "acetyl-CoA [peroxisome]")
(node 115 "acetyl-CoA [peroxisome]")
(node 116 "acetyl-CoA [peroxisome]")
(node 117 "acetyl-CoA [peroxisome]")
(node 118 "acetyl-CoA [peroxisome]")
(node 119 "acetyl-CoA [peroxisome]")
(node 120 "acetyl-CoA [peroxisome]")
(node 121 "acetyl-CoA [peroxisome]")
(node 122 "AMP [peroxisome]")
(node 123 "AMP [peroxisome]")
(node 124 "AMP [peroxisome]")
(node 125 "AMP [peroxisome]")
(node 126 "AMP [peroxisome]")
(node 127 "AMP [peroxisome]")
(node 128 "AMP [peroxisome]")
(node 129 "AMP [peroxisome]")
(node 130 "AMP [peroxisome]")
(node 131 "ATP [peroxisome]")
(node 132 "ATP [peroxisome]")
(node 133 "ATP [peroxisome]")
(node 134 "ATP [peroxisome]")
(node 135 "ATP [peroxisome]")
(node 136 "ATP [peroxisome]")
(node 137 "ATP [peroxisome]")
(node 138 "ATP [peroxisome]")
(node 139 "ATP [peroxisome]")
(node 140 "coenzyme A [peroxisome]")
(node 141 "coenzyme A [peroxisome]")
(node 142 "coenzyme A [peroxisome]")
(node 143 "coenzyme A [peroxisome]")
(node 144 "coenzyme A [peroxisome]")
(node 145 "coenzyme A [peroxisome]")
(node 146 "coenzyme A [peroxisome]")
(node 147 "coenzyme A [peroxisome]")
(node 148 "coenzyme A [peroxisome]")
(node 149 "coenzyme A [peroxisome]")
(node 150 "coenzyme A [peroxisome]")
(node 151 "coenzyme A [peroxisome]")
(node 152 "coenzyme A [peroxisome]")
(node 153 "coenzyme A [peroxisome]")
(node 154 "coenzyme A [peroxisome]")
(node 155 "coenzyme A [peroxisome]")
(node 156 "coenzyme A [peroxisome]")
(node 157 "coenzyme A [peroxisome]")
(node 158 "coenzyme A [peroxisome]")
(node 159 "coenzyme A [peroxisome]")
(node 160 "coenzyme A [peroxisome]")
(node 161 "coenzyme A [peroxisome]")
(node 162 "coenzyme A [peroxisome]")
(node 163 "coenzyme A [peroxisome]")
(node 164 "coenzyme A [peroxisome]")
(node 165 "coenzyme A [peroxisome]")
(node 166 "coenzyme A [peroxisome]")
(node 167 "coenzyme A [peroxisome]")
(node 168 "coenzyme A [peroxisome]")
(node 169 "coenzyme A [peroxisome]")
(node 170 "coenzyme A [peroxisome]")
(node 171 "coenzyme A [peroxisome]")
(node 172 "coenzyme A [peroxisome]")
(node 173 "coenzyme A [peroxisome]")
(node 174 "pyrophosphate [peroxisome]")
(node 175 "pyrophosphate [peroxisome]")
(node 176 "pyrophosphate [peroxisome]")
(node 177 "pyrophosphate [peroxisome]")
(node 178 "pyrophosphate [peroxisome]")
(node 179 "pyrophosphate [peroxisome]")
(node 180 "pyrophosphate [peroxisome]")
(node 181 "pyrophosphate [peroxisome]")
(node 182 "pyrophosphate [peroxisome]")
(node 183 "hydrogen peroxide [peroxisome]")
(node 184 "hydrogen peroxide [peroxisome]")
(node 185 "hydrogen peroxide [peroxisome]")
(node 186 "hydrogen peroxide [peroxisome]")
(node 187 "hydrogen peroxide [peroxisome]")
(node 188 "hydrogen peroxide [peroxisome]")
(node 189 "hydrogen peroxide [peroxisome]")
(node 190 "hydrogen peroxide [peroxisome]")
(node 191 "hydrogen peroxide [peroxisome]")
(node 192 "hydrogen peroxide [peroxisome]")
(node 193 "hydrogen peroxide [peroxisome]")
(node 194 "hydrogen peroxide [peroxisome]")
(node 195 "hydrogen peroxide [peroxisome]")
(node 196 "hydrogen peroxide [peroxisome]")
(node 197 "hydrogen peroxide [peroxisome]")
(node 198 "hydrogen peroxide [peroxisome]")
(node 199 "hydrogen peroxide [peroxisome]")
(node 200 "lauroyl-CoA [peroxisome]")
(node 201 "lauroyl-CoA [peroxisome]")
(node 202 "lauroyl-CoA [peroxisome]")
(node 203 "NAD [peroxisome]")
(node 204 "NAD [peroxisome]")
(node 205 "NAD [peroxisome]")
(node 206 "NAD [peroxisome]")
(node 207 "NAD [peroxisome]")
(node 208 "NAD [peroxisome]")
(node 209 "NAD [peroxisome]")
(node 210 "NAD [peroxisome]")
(node 211 "NAD [peroxisome]")
(node 212 "NAD [peroxisome]")
(node 213 "NAD [peroxisome]")
(node 214 "NAD [peroxisome]")
(node 215 "NAD [peroxisome]")
(node 216 "NAD [peroxisome]")
(node 217 "NAD [peroxisome]")
(node 218 "NAD [peroxisome]")
(node 219 "NAD [peroxisome]")
(node 220 "NADH [peroxisome]")
(node 221 "NADH [peroxisome]")
(node 222 "NADH [peroxisome]")
(node 223 "NADH [peroxisome]")
(node 224 "NADH [peroxisome]")
(node 225 "NADH [peroxisome]")
(node 226 "NADH [peroxisome]")
(node 227 "NADH [peroxisome]")
(node 228 "NADH [peroxisome]")
(node 229 "NADH [peroxisome]")
(node 230 "NADH [peroxisome]")
(node 231 "NADH [peroxisome]")
(node 232 "NADH [peroxisome]")
(node 233 "NADH [peroxisome]")
(node 234 "NADH [peroxisome]")
(node 235 "NADH [peroxisome]")
(node 236 "NADH [peroxisome]")
(node 237 "NADP(+) [peroxisome]")
(node 238 "NADP(+) [peroxisome]")
(node 239 "NADP(+) [peroxisome]")
(node 240 "NADP(+) [peroxisome]")
(node 241 "NADP(+) [peroxisome]")
(node 242 "NADPH [peroxisome]")
(node 243 "NADPH [peroxisome]")
(node 244 "NADPH [peroxisome]")
(node 245 "NADPH [peroxisome]")
(node 246 "NADPH [peroxisome]")
(node 247 "oxygen [peroxisome]")
(node 248 "oxygen [peroxisome]")
(node 249 "oxygen [peroxisome]")
(node 250 "oxygen [peroxisome]")
(node 251 "oxygen [peroxisome]")
(node 252 "oxygen [peroxisome]")
(node 253 "oxygen [peroxisome]")
(node 254 "oxygen [peroxisome]")
(node 255 "oxygen [peroxisome]")
(node 256 "oxygen [peroxisome]")
(node 257 "oxygen [peroxisome]")
(node 258 "oxygen [peroxisome]")
(node 259 "oxygen [peroxisome]")
(node 260 "oxygen [peroxisome]")
(node 261 "oxygen [peroxisome]")
(node 262 "oxygen [peroxisome]")
(node 263 "oxygen [peroxisome]")
(node 264 "H+ [peroxisome]")
(node 265 "H+ [peroxisome]")
(node 266 "H+ [peroxisome]")
(node 267 "H+ [peroxisome]")
(node 268 "H+ [peroxisome]")
(node 269 "H+ [peroxisome]")
(node 270 "H+ [peroxisome]")
(node 271 "H+ [peroxisome]")
(node 272 "H+ [peroxisome]")
(node 273 "H+ [peroxisome]")
(node 274 "H+ [peroxisome]")
(node 275 "H+ [peroxisome]")
(node 276 "H+ [peroxisome]")
(node 277 "H+ [peroxisome]")
(node 278 "H+ [peroxisome]")
(node 279 "H+ [peroxisome]")
(node 280 "H+ [peroxisome]")
(node 281 "H+ [peroxisome]")
(node 282 "H+ [peroxisome]")
(node 283 "H+ [peroxisome]")
(node 284 "H+ [peroxisome]")
(node 285 "H+ [peroxisome]")
(node 286 "H+ [peroxisome]")
(node 287 "H+ [peroxisome]")
(node 288 "H2O [peroxisome]")
(node 289 "H2O [peroxisome]")
(node 290 "H2O [peroxisome]")
(node 291 "H2O [peroxisome]")
(node 292 "H2O [peroxisome]")
(node 293 "H2O [peroxisome]")
(node 294 "H2O [peroxisome]")
(node 295 "H2O [peroxisome]")
(node 296 "H2O [peroxisome]")
(node 297 "H2O [peroxisome]")
(node 298 "H2O [peroxisome]")
(node 299 "H2O [peroxisome]")
(node 300 "H2O [peroxisome]")
(node 301 "H2O [peroxisome]")
(node 302 "H2O [peroxisome]")
(node 303 "H2O [peroxisome]")
(node 304 "H2O [peroxisome]")
(node 305 "H2O [peroxisome]")
(node 306 "H2O [peroxisome]")
(node 307 "H2O [peroxisome]")
(node 308 "H2O [peroxisome]")
(node 309 "H2O [peroxisome]")
(node 310 "H2O [peroxisome]")
(node 311 "H2O [peroxisome]")
(node 312 "hydrogen\nperoxide")
(node 313 "oxygen")
(node 314 "generalized acyl-CoA oxidase (decanoyl-CoA)")
(node 315 "hydroxy fatty acyl-CoA")
(node 316 "long-chain fatty acid anion")
(node 317 "NAD")
(node 318 "NADH")
(node 319 "H")
(node 320 "generalized 3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
(node 321 "3-oxo-fatty acyl-CoA(4-)")
(node 322 "AcCoA")
(node 323 "CoA")
(node 324 "H2O2")
(node 325 "NAD")
(node 326 "NADH")
(node 327 "O2")
(node 328 "H")
(node 329 "H2O")
(node 330 "generalized fatty acid oxidation")
(node 331 "acetyl-CoA")
(node 332 "coenzyme\nA")
(node 333 "generalized acetyl-CoA acyltransferase (tetracosanoyl-CoA)")
(node 334 "AMP")
(node 335 "atp")
(node 336 "CoA")
(node 337 "PPi")
(node 338 "generalized fatty-acid--CoA ligase (hexadecanoate)")
(node 339 "H2O")
(node 340 "generalized 3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
(node 341 "AMP")
(node 342 "ATP")
(node 343 "coenzyme\nA")
(node 344 "pyrophosphate")
(node 345 "generalized fatty-acid--CoA ligase (decanoate)")
(node 346 "coenzyme\nA")
(node 347 "H+")
(node 348 "H2O")
(node 349 "generalized peroxisomal acyl-CoA thioesterase")
(node 350 "acetyl-CoA")
(node 351 "coenzyme\nA")
(node 352 "hydrogen\nperoxide")
(node 353 "NAD")
(node 354 "NADH")
(node 355 "NADP(+)")
(node 356 "NADPH")
(node 357 "oxygen")
(node 358 "H+")
(node 359 "H2O")
(node 360 "generalized fatty acid oxidation")
(node 361 "AMP")
(node 362 "ATP")
(node 363 "coenzyme\nA")
(node 364 "pyrophosphate")
(node 365 "generalized fatty-acid--CoA ligase (hexadecenoate)")
(node 366 "acetyl-CoA")
(node 367 "coenzyme\nA")
(node 368 "hydrogen\nperoxide")
(node 369 "NAD")
(node 370 "NADH")
(node 371 "NADP(+)")
(node 372 "NADPH")
(node 373 "oxygen")
(node 374 "H+")
(node 375 "H2O")
(node 376 "generalized fatty acid oxidation")
(node 377 "acetyl-CoA")
(node 378 "coenzyme\nA")
(node 379 "hydrogen\nperoxide")
(node 380 "NAD")
(node 381 "NADH")
(node 382 "oxygen")
(node 383 "H+")
(node 384 "H2O")
(node 385 "generalized fatty acid oxidation")
(node 386 "straight-chain saturated fatty acid anion, but not long-chain fatty acid anion")
(node 387 "unsaturated fatty acyl-CoA")
(node 388 "long-chain fatty acyl-CoA, but not hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 389 "fatty acyl-CoA, but not hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor long-chain fatty acyl-CoA")
(node 390 "hydrogen\nperoxide")
(node 391 "oxygen")
(node 392 "generalized acyl-CoA oxidase (hexadecanoyl-CoA)")
(node 393 "CoA")
(node 394 "H")
(node 395 "H2O")
(node 396 "generalized peroxisomal acyl-CoA thioesterase")
(node 397 "acetyl-CoA")
(node 398 "coenzyme\nA")
(node 399 "generalized acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
(node 400 "hydrogen\nperoxide")
(node 401 "oxygen")
(node 402 "generalized acyl-CoA oxidase (decanoyl-CoA)")
(node 403 "acetyl-CoA")
(node 404 "coenzyme\nA")
(node 405 "hydrogen\nperoxide")
(node 406 "NAD")
(node 407 "NADH")
(node 408 "NADP(+)")
(node 409 "NADPH")
(node 410 "oxygen")
(node 411 "H+")
(node 412 "H2O")
(node 413 "generalized fatty acid oxidation")
(node 414 "straight-chain fatty acid anion")
(node 415 "hydroxy fatty acyl-CoA")
(node 416 "AMP")
(node 417 "ATP")
(node 418 "coenzyme\nA")
(node 419 "pyrophosphate")
(node 420 "generalized fatty-acid--CoA ligase (hexadecenoate)")
(node 421 "acetyl-CoA")
(node 422 "coenzyme\nA")
(node 423 "hydrogen\nperoxide")
(node 424 "NAD")
(node 425 "NADH")
(node 426 "oxygen")
(node 427 "H+")
(node 428 "H2O")
(node 429 "generalized fatty acid oxidation")
(node 430 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 431 "straight-chain saturated fatty acid anion")
(node 432 "AcCoA")
(node 433 "CoA")
(node 434 "H2O2")
(node 435 "NAD")
(node 436 "NADH")
(node 437 "O2")
(node 438 "H")
(node 439 "H2O")
(node 440 "generalized fatty acid oxidation")
(node 441 "acetyl-CoA")
(node 442 "coenzyme\nA")
(node 443 "hydrogen\nperoxide")
(node 444 "NAD")
(node 445 "NADH")
(node 446 "NADP(+)")
(node 447 "NADPH")
(node 448 "oxygen")
(node 449 "H+")
(node 450 "H2O")
(node 451 "generalized fatty acid oxidation")
(node 452 "AMP")
(node 453 "ATP")
(node 454 "coenzyme\nA")
(node 455 "pyrophosphate")
(node 456 "generalized fatty-acid--CoA ligase (decanoate)")
(node 457 "H2O")
(node 458 "generalized 3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
(node 459 "unsaturated fatty acyl-CoA")
(node 460 "coenzyme\nA")
(node 461 "H+")
(node 462 "H2O")
(node 463 "generalized peroxisomal acyl-CoA thioesterase")
(node 464 "acetyl-CoA")
(node 465 "coenzyme\nA")
(node 466 "generalized acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
(node 467 "NAD")
(node 468 "NADH")
(node 469 "H")
(node 470 "generalized 3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
(node 471 "3-oxo-fatty acyl-CoA")
)
(property  0 int "nbClones"
(default "0" "0")
(node 12 "21")
(node 13 "13")
(node 14 "20")
(node 16 "38")
(node 19 "11")
(node 22 "20")
(node 24 "4")
(node 29 "20")
(node 30 "19")
(node 35 "20")
(node 48 "45")
(node 49 "39")
(node 105 "21")
(node 106 "21")
(node 107 "21")
(node 108 "21")
(node 109 "21")
(node 110 "21")
(node 111 "21")
(node 112 "21")
(node 113 "21")
(node 114 "21")
(node 115 "21")
(node 116 "21")
(node 117 "21")
(node 118 "21")
(node 119 "21")
(node 120 "21")
(node 121 "21")
(node 122 "13")
(node 123 "13")
(node 124 "13")
(node 125 "13")
(node 126 "13")
(node 127 "13")
(node 128 "13")
(node 129 "13")
(node 130 "13")
(node 131 "20")
(node 132 "20")
(node 133 "20")
(node 134 "20")
(node 135 "20")
(node 136 "20")
(node 137 "20")
(node 138 "20")
(node 139 "20")
(node 140 "38")
(node 141 "38")
(node 142 "38")
(node 143 "38")
(node 144 "38")
(node 145 "38")
(node 146 "38")
(node 147 "38")
(node 148 "38")
(node 149 "38")
(node 150 "38")
(node 151 "38")
(node 152 "38")
(node 153 "38")
(node 154 "38")
(node 155 "38")
(node 156 "38")
(node 157 "38")
(node 158 "38")
(node 159 "38")
(node 160 "38")
(node 161 "38")
(node 162 "38")
(node 163 "38")
(node 164 "38")
(node 165 "38")
(node 166 "38")
(node 167 "38")
(node 168 "38")
(node 169 "38")
(node 170 "38")
(node 171 "38")
(node 172 "38")
(node 173 "38")
(node 174 "11")
(node 175 "11")
(node 176 "11")
(node 177 "11")
(node 178 "11")
(node 179 "11")
(node 180 "11")
(node 181 "11")
(node 182 "11")
(node 183 "20")
(node 184 "20")
(node 185 "20")
(node 186 "20")
(node 187 "20")
(node 188 "20")
(node 189 "20")
(node 190 "20")
(node 191 "20")
(node 192 "20")
(node 193 "20")
(node 194 "20")
(node 195 "20")
(node 196 "20")
(node 197 "20")
(node 198 "20")
(node 199 "20")
(node 200 "4")
(node 201 "4")
(node 202 "4")
(node 203 "20")
(node 204 "20")
(node 205 "20")
(node 206 "20")
(node 207 "20")
(node 208 "20")
(node 209 "20")
(node 210 "20")
(node 211 "20")
(node 212 "20")
(node 213 "20")
(node 214 "20")
(node 215 "20")
(node 216 "20")
(node 217 "20")
(node 218 "20")
(node 219 "20")
(node 220 "19")
(node 221 "19")
(node 222 "19")
(node 223 "19")
(node 224 "19")
(node 225 "19")
(node 226 "19")
(node 227 "19")
(node 228 "19")
(node 229 "19")
(node 230 "19")
(node 231 "19")
(node 232 "19")
(node 233 "19")
(node 234 "19")
(node 235 "19")
(node 236 "19")
(node 237 "6")
(node 238 "6")
(node 239 "6")
(node 240 "6")
(node 241 "6")
(node 242 "6")
(node 243 "6")
(node 244 "6")
(node 245 "6")
(node 246 "6")
(node 247 "20")
(node 248 "20")
(node 249 "20")
(node 250 "20")
(node 251 "20")
(node 252 "20")
(node 253 "20")
(node 254 "20")
(node 255 "20")
(node 256 "20")
(node 257 "20")
(node 258 "20")
(node 259 "20")
(node 260 "20")
(node 261 "20")
(node 262 "20")
(node 263 "20")
(node 264 "45")
(node 265 "45")
(node 266 "45")
(node 267 "45")
(node 268 "45")
(node 269 "45")
(node 270 "45")
(node 271 "45")
(node 272 "45")
(node 273 "45")
(node 274 "45")
(node 275 "45")
(node 276 "45")
(node 277 "45")
(node 278 "45")
(node 279 "45")
(node 280 "45")
(node 281 "45")
(node 282 "45")
(node 283 "45")
(node 284 "45")
(node 285 "45")
(node 286 "45")
(node 287 "45")
(node 288 "39")
(node 289 "39")
(node 290 "39")
(node 291 "39")
(node 292 "39")
(node 293 "39")
(node 294 "39")
(node 295 "39")
(node 296 "39")
(node 297 "39")
(node 298 "39")
(node 299 "39")
(node 300 "39")
(node 301 "39")
(node 302 "39")
(node 303 "39")
(node 304 "39")
(node 305 "39")
(node 306 "39")
(node 307 "39")
(node 308 "39")
(node 309 "39")
(node 310 "39")
(node 311 "39")
)
(property  0 vector<string> "occursIn"
(default "()" "()")
)
(property  0 string "outsideCompartment"
(default "" "")
)
(property  0 bool "outsideMembrane"
(default "false" "false")
)
(property  0 string "proteinAssociation"
(default "" "")
)
(property  0 bool "reaction"
(default "false" "false")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 56 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 60 "true")
(node 61 "true")
(node 62 "true")
(node 63 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
(node 96 "true")
(node 97 "true")
(node 98 "true")
(node 99 "true")
(node 100 "true")
(node 101 "true")
(node 102 "true")
(node 103 "true")
(node 104 "true")
(node 314 "true")
(node 320 "true")
(node 330 "true")
(node 333 "true")
(node 338 "true")
(node 340 "true")
(node 345 "true")
(node 349 "true")
(node 360 "true")
(node 365 "true")
(node 376 "true")
(node 385 "true")
(node 392 "true")
(node 396 "true")
(node 399 "true")
(node 402 "true")
(node 413 "true")
(node 420 "true")
(node 429 "true")
(node 440 "true")
(node 451 "true")
(node 456 "true")
(node 458 "true")
(node 463 "true")
(node 466 "true")
(node 470 "true")
)
(property  0 bool "reversible"
(default "false" "false")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 56 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 60 "true")
(node 61 "true")
(node 62 "true")
(node 63 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
(node 96 "true")
(node 97 "true")
(node 98 "true")
(node 99 "true")
(node 100 "true")
(node 101 "true")
(node 102 "true")
(node 103 "true")
(node 104 "true")
(node 314 "true")
(node 320 "true")
(node 330 "true")
(node 333 "true")
(node 338 "true")
(node 340 "true")
(node 345 "true")
(node 349 "true")
(node 360 "true")
(node 365 "true")
(node 376 "true")
(node 385 "true")
(node 392 "true")
(node 396 "true")
(node 399 "true")
(node 402 "true")
(node 413 "true")
(node 420 "true")
(node 429 "true")
(node 440 "true")
(node 451 "true")
(node 456 "true")
(node 458 "true")
(node 463 "true")
(node 466 "true")
(node 470 "true")
(edge 0 "true")
(edge 1 "true")
(edge 2 "true")
(edge 3 "true")
(edge 4 "true")
(edge 5 "true")
(edge 6 "true")
(edge 7 "true")
(edge 8 "true")
(edge 9 "true")
(edge 10 "true")
(edge 11 "true")
(edge 12 "true")
(edge 13 "true")
(edge 14 "true")
(edge 15 "true")
(edge 16 "true")
(edge 17 "true")
(edge 18 "true")
(edge 19 "true")
(edge 20 "true")
(edge 21 "true")
(edge 22 "true")
(edge 23 "true")
(edge 24 "true")
(edge 25 "true")
(edge 26 "true")
(edge 27 "true")
(edge 28 "true")
(edge 29 "true")
(edge 30 "true")
(edge 31 "true")
(edge 32 "true")
(edge 33 "true")
(edge 34 "true")
(edge 35 "true")
(edge 36 "true")
(edge 37 "true")
(edge 38 "true")
(edge 39 "true")
(edge 40 "true")
(edge 41 "true")
(edge 42 "true")
(edge 43 "true")
(edge 44 "true")
(edge 45 "true")
(edge 46 "true")
(edge 47 "true")
(edge 48 "true")
(edge 49 "true")
(edge 50 "true")
(edge 51 "true")
(edge 52 "true")
(edge 53 "true")
(edge 54 "true")
(edge 55 "true")
(edge 56 "true")
(edge 57 "true")
(edge 58 "true")
(edge 59 "true")
(edge 60 "true")
(edge 61 "true")
(edge 62 "true")
(edge 63 "true")
(edge 64 "true")
(edge 65 "true")
(edge 66 "true")
(edge 67 "true")
(edge 68 "true")
(edge 69 "true")
(edge 70 "true")
(edge 71 "true")
(edge 72 "true")
(edge 73 "true")
(edge 74 "true")
(edge 75 "true")
(edge 76 "true")
(edge 77 "true")
(edge 78 "true")
(edge 79 "true")
(edge 80 "true")
(edge 81 "true")
(edge 82 "true")
(edge 83 "true")
(edge 84 "true")
(edge 85 "true")
(edge 86 "true")
(edge 87 "true")
(edge 88 "true")
(edge 89 "true")
(edge 90 "true")
(edge 91 "true")
(edge 92 "true")
(edge 93 "true")
(edge 94 "true")
(edge 95 "true")
(edge 96 "true")
(edge 97 "true")
(edge 98 "true")
(edge 99 "true")
(edge 100 "true")
(edge 101 "true")
(edge 102 "true")
(edge 103 "true")
(edge 104 "true")
(edge 105 "true")
(edge 106 "true")
(edge 107 "true")
(edge 108 "true")
(edge 109 "true")
(edge 110 "true")
(edge 111 "true")
(edge 112 "true")
(edge 113 "true")
(edge 114 "true")
(edge 115 "true")
(edge 116 "true")
(edge 117 "true")
(edge 118 "true")
(edge 119 "true")
(edge 120 "true")
(edge 121 "true")
(edge 122 "true")
(edge 123 "true")
(edge 124 "true")
(edge 125 "true")
(edge 126 "true")
(edge 127 "true")
(edge 128 "true")
(edge 129 "true")
(edge 130 "true")
(edge 131 "true")
(edge 132 "true")
(edge 133 "true")
(edge 134 "true")
(edge 135 "true")
(edge 136 "true")
(edge 137 "true")
(edge 138 "true")
(edge 139 "true")
(edge 140 "true")
(edge 141 "true")
(edge 142 "true")
(edge 143 "true")
(edge 144 "true")
(edge 145 "true")
(edge 146 "true")
(edge 147 "true")
(edge 148 "true")
(edge 149 "true")
(edge 150 "true")
(edge 151 "true")
(edge 152 "true")
(edge 153 "true")
(edge 154 "true")
(edge 155 "true")
(edge 156 "true")
(edge 157 "true")
(edge 158 "true")
(edge 159 "true")
(edge 160 "true")
(edge 161 "true")
(edge 162 "true")
(edge 163 "true")
(edge 164 "true")
(edge 165 "true")
(edge 166 "true")
(edge 167 "true")
(edge 168 "true")
(edge 169 "true")
(edge 170 "true")
(edge 171 "true")
(edge 172 "true")
(edge 173 "true")
(edge 174 "true")
(edge 175 "true")
(edge 176 "true")
(edge 177 "true")
(edge 178 "true")
(edge 179 "true")
(edge 180 "true")
(edge 181 "true")
(edge 182 "true")
(edge 183 "true")
(edge 184 "true")
(edge 185 "true")
(edge 186 "true")
(edge 187 "true")
(edge 188 "true")
(edge 189 "true")
(edge 190 "true")
(edge 191 "true")
(edge 192 "true")
(edge 193 "true")
(edge 194 "true")
(edge 195 "true")
(edge 196 "true")
(edge 197 "true")
(edge 198 "true")
(edge 199 "true")
(edge 200 "true")
(edge 201 "true")
(edge 202 "true")
(edge 203 "true")
(edge 204 "true")
(edge 205 "true")
(edge 206 "true")
(edge 207 "true")
(edge 208 "true")
(edge 209 "true")
(edge 210 "true")
(edge 211 "true")
(edge 212 "true")
(edge 213 "true")
(edge 214 "true")
(edge 215 "true")
(edge 216 "true")
(edge 217 "true")
(edge 218 "true")
(edge 219 "true")
(edge 220 "true")
(edge 221 "true")
(edge 222 "true")
(edge 223 "true")
(edge 224 "true")
(edge 225 "true")
(edge 226 "true")
(edge 227 "true")
(edge 228 "true")
(edge 229 "true")
(edge 230 "true")
(edge 231 "true")
(edge 232 "true")
(edge 233 "true")
(edge 234 "true")
(edge 235 "true")
(edge 236 "true")
(edge 237 "true")
(edge 238 "true")
(edge 239 "true")
(edge 240 "true")
(edge 241 "true")
(edge 242 "true")
(edge 243 "true")
(edge 244 "true")
(edge 245 "true")
(edge 246 "true")
(edge 247 "true")
(edge 248 "true")
(edge 249 "true")
(edge 250 "true")
(edge 251 "true")
(edge 252 "true")
(edge 253 "true")
(edge 254 "true")
(edge 255 "true")
(edge 256 "true")
(edge 257 "true")
(edge 258 "true")
(edge 259 "true")
(edge 260 "true")
(edge 261 "true")
(edge 262 "true")
(edge 263 "true")
(edge 264 "true")
(edge 265 "true")
(edge 266 "true")
(edge 267 "true")
(edge 268 "true")
(edge 269 "true")
(edge 270 "true")
(edge 271 "true")
(edge 272 "true")
(edge 273 "true")
(edge 274 "true")
(edge 275 "true")
(edge 276 "true")
(edge 277 "true")
(edge 278 "true")
(edge 279 "true")
(edge 280 "true")
(edge 281 "true")
(edge 282 "true")
(edge 283 "true")
(edge 284 "true")
(edge 285 "true")
(edge 286 "true")
(edge 287 "true")
(edge 288 "true")
(edge 289 "true")
(edge 290 "true")
(edge 291 "true")
(edge 292 "true")
(edge 293 "true")
(edge 294 "true")
(edge 295 "true")
(edge 296 "true")
(edge 297 "true")
(edge 298 "true")
(edge 299 "true")
(edge 300 "true")
(edge 301 "true")
(edge 302 "true")
(edge 303 "true")
(edge 304 "true")
(edge 305 "true")
(edge 306 "true")
(edge 307 "true")
(edge 308 "true")
(edge 309 "true")
)
(property  0 string "sboTerm"
(default "" "")
(node 97 "SBO:0000176")
(node 98 "SBO:0000176")
(node 99 "SBO:0000176")
(node 100 "SBO:0000176")
(node 392 "SBO:0000176")
(node 101 "SBO:0000176")
(node 102 "SBO:0000176")
(node 396 "SBO:0000176")
(node 399 "SBO:0000176")
(node 402 "SBO:0000176")
(node 314 "SBO:0000176")
(node 413 "SBO:0000176")
(node 320 "SBO:0000176")
(node 420 "SBO:0000176")
(node 330 "SBO:0000176")
(node 429 "SBO:0000176")
(node 333 "SBO:0000176")
(node 338 "SBO:0000176")
(node 340 "SBO:0000176")
(node 440 "SBO:0000176")
(node 52 "SBO:0000176")
(node 53 "SBO:0000176")
(node 345 "SBO:0000176")
(node 54 "SBO:0000176")
(node 55 "SBO:0000176")
(node 56 "SBO:0000176")
(node 57 "SBO:0000176")
(node 349 "SBO:0000176")
(node 58 "SBO:0000176")
(node 59 "SBO:0000176")
(node 60 "SBO:0000176")
(node 61 "SBO:0000176")
(node 62 "SBO:0000176")
(node 451 "SBO:0000176")
(node 63 "SBO:0000176")
(node 64 "SBO:0000176")
(node 65 "SBO:0000176")
(node 66 "SBO:0000176")
(node 67 "SBO:0000176")
(node 456 "SBO:0000176")
(node 68 "SBO:0000176")
(node 360 "SBO:0000176")
(node 69 "SBO:0000176")
(node 458 "SBO:0000176")
(node 70 "SBO:0000176")
(node 71 "SBO:0000176")
(node 72 "SBO:0000176")
(node 73 "SBO:0000176")
(node 365 "SBO:0000176")
(node 74 "SBO:0000176")
(node 463 "SBO:0000176")
(node 75 "SBO:0000176")
(node 76 "SBO:0000176")
(node 77 "SBO:0000176")
(node 466 "SBO:0000176")
(node 78 "SBO:0000176")
(node 79 "SBO:0000176")
(node 80 "SBO:0000176")
(node 81 "SBO:0000176")
(node 82 "SBO:0000176")
(node 470 "SBO:0000176")
(node 83 "SBO:0000176")
(node 84 "SBO:0000176")
(node 85 "SBO:0000176")
(node 376 "SBO:0000176")
(node 86 "SBO:0000176")
(node 87 "SBO:0000176")
(node 88 "SBO:0000176")
(node 89 "SBO:0000176")
(node 90 "SBO:0000176")
(node 91 "SBO:0000176")
(node 92 "SBO:0000176")
(node 93 "SBO:0000176")
(node 94 "SBO:0000176")
(node 385 "SBO:0000176")
(node 95 "SBO:0000176")
(node 96 "SBO:0000176")
)
(property  0 string "speciesType"
(default "" "")
(node 0 "(S)-3-hydroxydecanoyl-CoA [peroxisome]")
(node 1 "(S)-3-hydroxyhexacosanoyl-CoA [peroxisome]")
(node 2 "(S)-3-hydroxylauroyl-CoA [peroxisome]")
(node 3 "(S)-3-hydroxypalmitoyl-CoA [peroxisome]")
(node 4 "(S)-3-hydroxytetradecanoyl-CoA [peroxisome]")
(node 5 "3-hydroxyoctadecanoyl-CoA [peroxisome]")
(node 6 "3-oxodecanoyl-CoA [peroxisome]")
(node 7 "3-oxohexacosanoyl-CoA [peroxisome]")
(node 8 "3-oxolauroyl-CoA [peroxisome]")
(node 9 "3-oxooctadecanoyl-CoA [peroxisome]")
(node 10 "3-oxopalmitoyl-CoA [peroxisome]")
(node 11 "3-oxotetradecanoyl-CoA [peroxisome]")
(node 12 "acetyl-CoA [peroxisome]")
(node 13 "AMP [peroxisome]")
(node 14 "ATP [peroxisome]")
(node 15 "cerotate [peroxisome]")
(node 16 "coenzyme A [peroxisome]")
(node 17 "decanoate [peroxisome]")
(node 18 "decanoyl-CoA [peroxisome]")
(node 19 "pyrophosphate [peroxisome]")
(node 20 "hexacosanoyl-CoA [peroxisome]")
(node 21 "hexadec-2-enoyl-CoA [peroxisome]")
(node 22 "hydrogen peroxide [peroxisome]")
(node 23 "laurate [peroxisome]")
(node 24 "lauroyl-CoA [peroxisome]")
(node 25 "lignoceric acid [peroxisome]")
(node 26 "myristate [peroxisome]")
(node 27 "myristoleate [peroxisome]")
(node 28 "myristoyl-CoA [peroxisome]")
(node 29 "NAD [peroxisome]")
(node 30 "NADH [peroxisome]")
(node 31 "octadec-9-ynoyl-CoA [peroxisome]")
(node 32 "octanoate [peroxisome]")
(node 33 "octanoyl-CoA [peroxisome]")
(node 34 "oleoyl-CoA [peroxisome]")
(node 35 "oxygen [peroxisome]")
(node 36 "palmitate [peroxisome]")
(node 37 "palmitoleate [peroxisome]")
(node 38 "palmitoyl-CoA [peroxisome]")
(node 39 "stearate [peroxisome]")
(node 40 "stearoyl-CoA [peroxisome]")
(node 41 "tetracosanoyl-CoA [peroxisome]")
(node 42 "tetradecenoyl-CoA [peroxisome]")
(node 43 "trans-dec-2-enoyl-CoA [peroxisome]")
(node 44 "trans-dodec-2-enoyl-CoA [peroxisome]")
(node 45 "trans-hexacos-2-enoyl-CoA [peroxisome]")
(node 46 "trans-octadec-2-enoyl-CoA [peroxisome]")
(node 47 "trans-tetradec-2-enoyl-CoA [peroxisome]")
(node 48 "H+ [peroxisome]")
(node 49 "H2O [peroxisome]")
(node 50 "butyrate [peroxisome]")
(node 51 "butyryl-CoA [peroxisome]")
(node 105 "acetyl-CoA [peroxisome]")
(node 106 "acetyl-CoA [peroxisome]")
(node 107 "acetyl-CoA [peroxisome]")
(node 108 "acetyl-CoA [peroxisome]")
(node 109 "acetyl-CoA [peroxisome]")
(node 110 "acetyl-CoA [peroxisome]")
(node 111 "acetyl-CoA [peroxisome]")
(node 112 "acetyl-CoA [peroxisome]")
(node 113 "acetyl-CoA [peroxisome]")
(node 114 "acetyl-CoA [peroxisome]")
(node 115 "acetyl-CoA [peroxisome]")
(node 116 "acetyl-CoA [peroxisome]")
(node 117 "acetyl-CoA [peroxisome]")
(node 118 "acetyl-CoA [peroxisome]")
(node 119 "acetyl-CoA [peroxisome]")
(node 120 "acetyl-CoA [peroxisome]")
(node 121 "acetyl-CoA [peroxisome]")
(node 122 "AMP [peroxisome]")
(node 123 "AMP [peroxisome]")
(node 124 "AMP [peroxisome]")
(node 125 "AMP [peroxisome]")
(node 126 "AMP [peroxisome]")
(node 127 "AMP [peroxisome]")
(node 128 "AMP [peroxisome]")
(node 129 "AMP [peroxisome]")
(node 130 "AMP [peroxisome]")
(node 131 "ATP [peroxisome]")
(node 132 "ATP [peroxisome]")
(node 133 "ATP [peroxisome]")
(node 134 "ATP [peroxisome]")
(node 135 "ATP [peroxisome]")
(node 136 "ATP [peroxisome]")
(node 137 "ATP [peroxisome]")
(node 138 "ATP [peroxisome]")
(node 139 "ATP [peroxisome]")
(node 140 "coenzyme A [peroxisome]")
(node 141 "coenzyme A [peroxisome]")
(node 142 "coenzyme A [peroxisome]")
(node 143 "coenzyme A [peroxisome]")
(node 144 "coenzyme A [peroxisome]")
(node 145 "coenzyme A [peroxisome]")
(node 146 "coenzyme A [peroxisome]")
(node 147 "coenzyme A [peroxisome]")
(node 148 "coenzyme A [peroxisome]")
(node 149 "coenzyme A [peroxisome]")
(node 150 "coenzyme A [peroxisome]")
(node 151 "coenzyme A [peroxisome]")
(node 152 "coenzyme A [peroxisome]")
(node 153 "coenzyme A [peroxisome]")
(node 154 "coenzyme A [peroxisome]")
(node 155 "coenzyme A [peroxisome]")
(node 156 "coenzyme A [peroxisome]")
(node 157 "coenzyme A [peroxisome]")
(node 158 "coenzyme A [peroxisome]")
(node 159 "coenzyme A [peroxisome]")
(node 160 "coenzyme A [peroxisome]")
(node 161 "coenzyme A [peroxisome]")
(node 162 "coenzyme A [peroxisome]")
(node 163 "coenzyme A [peroxisome]")
(node 164 "coenzyme A [peroxisome]")
(node 165 "coenzyme A [peroxisome]")
(node 166 "coenzyme A [peroxisome]")
(node 167 "coenzyme A [peroxisome]")
(node 168 "coenzyme A [peroxisome]")
(node 169 "coenzyme A [peroxisome]")
(node 170 "coenzyme A [peroxisome]")
(node 171 "coenzyme A [peroxisome]")
(node 172 "coenzyme A [peroxisome]")
(node 173 "coenzyme A [peroxisome]")
(node 174 "pyrophosphate [peroxisome]")
(node 175 "pyrophosphate [peroxisome]")
(node 176 "pyrophosphate [peroxisome]")
(node 177 "pyrophosphate [peroxisome]")
(node 178 "pyrophosphate [peroxisome]")
(node 179 "pyrophosphate [peroxisome]")
(node 180 "pyrophosphate [peroxisome]")
(node 181 "pyrophosphate [peroxisome]")
(node 182 "pyrophosphate [peroxisome]")
(node 183 "hydrogen peroxide [peroxisome]")
(node 184 "hydrogen peroxide [peroxisome]")
(node 185 "hydrogen peroxide [peroxisome]")
(node 186 "hydrogen peroxide [peroxisome]")
(node 187 "hydrogen peroxide [peroxisome]")
(node 188 "hydrogen peroxide [peroxisome]")
(node 189 "hydrogen peroxide [peroxisome]")
(node 190 "hydrogen peroxide [peroxisome]")
(node 191 "hydrogen peroxide [peroxisome]")
(node 192 "hydrogen peroxide [peroxisome]")
(node 193 "hydrogen peroxide [peroxisome]")
(node 194 "hydrogen peroxide [peroxisome]")
(node 195 "hydrogen peroxide [peroxisome]")
(node 196 "hydrogen peroxide [peroxisome]")
(node 197 "hydrogen peroxide [peroxisome]")
(node 198 "hydrogen peroxide [peroxisome]")
(node 199 "hydrogen peroxide [peroxisome]")
(node 200 "lauroyl-CoA [peroxisome]")
(node 201 "lauroyl-CoA [peroxisome]")
(node 202 "lauroyl-CoA [peroxisome]")
(node 203 "NAD [peroxisome]")
(node 204 "NAD [peroxisome]")
(node 205 "NAD [peroxisome]")
(node 206 "NAD [peroxisome]")
(node 207 "NAD [peroxisome]")
(node 208 "NAD [peroxisome]")
(node 209 "NAD [peroxisome]")
(node 210 "NAD [peroxisome]")
(node 211 "NAD [peroxisome]")
(node 212 "NAD [peroxisome]")
(node 213 "NAD [peroxisome]")
(node 214 "NAD [peroxisome]")
(node 215 "NAD [peroxisome]")
(node 216 "NAD [peroxisome]")
(node 217 "NAD [peroxisome]")
(node 218 "NAD [peroxisome]")
(node 219 "NAD [peroxisome]")
(node 220 "NADH [peroxisome]")
(node 221 "NADH [peroxisome]")
(node 222 "NADH [peroxisome]")
(node 223 "NADH [peroxisome]")
(node 224 "NADH [peroxisome]")
(node 225 "NADH [peroxisome]")
(node 226 "NADH [peroxisome]")
(node 227 "NADH [peroxisome]")
(node 228 "NADH [peroxisome]")
(node 229 "NADH [peroxisome]")
(node 230 "NADH [peroxisome]")
(node 231 "NADH [peroxisome]")
(node 232 "NADH [peroxisome]")
(node 233 "NADH [peroxisome]")
(node 234 "NADH [peroxisome]")
(node 235 "NADH [peroxisome]")
(node 236 "NADH [peroxisome]")
(node 237 "NADP(+) [peroxisome]")
(node 238 "NADP(+) [peroxisome]")
(node 239 "NADP(+) [peroxisome]")
(node 240 "NADP(+) [peroxisome]")
(node 241 "NADP(+) [peroxisome]")
(node 242 "NADPH [peroxisome]")
(node 243 "NADPH [peroxisome]")
(node 244 "NADPH [peroxisome]")
(node 245 "NADPH [peroxisome]")
(node 246 "NADPH [peroxisome]")
(node 247 "oxygen [peroxisome]")
(node 248 "oxygen [peroxisome]")
(node 249 "oxygen [peroxisome]")
(node 250 "oxygen [peroxisome]")
(node 251 "oxygen [peroxisome]")
(node 252 "oxygen [peroxisome]")
(node 253 "oxygen [peroxisome]")
(node 254 "oxygen [peroxisome]")
(node 255 "oxygen [peroxisome]")
(node 256 "oxygen [peroxisome]")
(node 257 "oxygen [peroxisome]")
(node 258 "oxygen [peroxisome]")
(node 259 "oxygen [peroxisome]")
(node 260 "oxygen [peroxisome]")
(node 261 "oxygen [peroxisome]")
(node 262 "oxygen [peroxisome]")
(node 263 "oxygen [peroxisome]")
(node 264 "H+ [peroxisome]")
(node 265 "H+ [peroxisome]")
(node 266 "H+ [peroxisome]")
(node 267 "H+ [peroxisome]")
(node 268 "H+ [peroxisome]")
(node 269 "H+ [peroxisome]")
(node 270 "H+ [peroxisome]")
(node 271 "H+ [peroxisome]")
(node 272 "H+ [peroxisome]")
(node 273 "H+ [peroxisome]")
(node 274 "H+ [peroxisome]")
(node 275 "H+ [peroxisome]")
(node 276 "H+ [peroxisome]")
(node 277 "H+ [peroxisome]")
(node 278 "H+ [peroxisome]")
(node 279 "H+ [peroxisome]")
(node 280 "H+ [peroxisome]")
(node 281 "H+ [peroxisome]")
(node 282 "H+ [peroxisome]")
(node 283 "H+ [peroxisome]")
(node 284 "H+ [peroxisome]")
(node 285 "H+ [peroxisome]")
(node 286 "H+ [peroxisome]")
(node 287 "H+ [peroxisome]")
(node 288 "H2O [peroxisome]")
(node 289 "H2O [peroxisome]")
(node 290 "H2O [peroxisome]")
(node 291 "H2O [peroxisome]")
(node 292 "H2O [peroxisome]")
(node 293 "H2O [peroxisome]")
(node 294 "H2O [peroxisome]")
(node 295 "H2O [peroxisome]")
(node 296 "H2O [peroxisome]")
(node 297 "H2O [peroxisome]")
(node 298 "H2O [peroxisome]")
(node 299 "H2O [peroxisome]")
(node 300 "H2O [peroxisome]")
(node 301 "H2O [peroxisome]")
(node 302 "H2O [peroxisome]")
(node 303 "H2O [peroxisome]")
(node 304 "H2O [peroxisome]")
(node 305 "H2O [peroxisome]")
(node 306 "H2O [peroxisome]")
(node 307 "H2O [peroxisome]")
(node 308 "H2O [peroxisome]")
(node 309 "H2O [peroxisome]")
(node 310 "H2O [peroxisome]")
(node 311 "H2O [peroxisome]")
(node 312 "hydrogen peroxide [peroxisome]")
(node 313 "oxygen [peroxisome]")
(node 315 "(S)-3-hydroxydecanoyl-CoA [peroxisome]")
(node 316 "myristate [peroxisome]")
(node 317 "NAD [peroxisome]")
(node 318 "NADH [peroxisome]")
(node 319 "H+ [peroxisome]")
(node 321 "3-oxodecanoyl-CoA [peroxisome]")
(node 322 "acetyl-CoA [peroxisome]")
(node 323 "coenzyme A [peroxisome]")
(node 324 "hydrogen peroxide [peroxisome]")
(node 325 "NAD [peroxisome]")
(node 326 "NADH [peroxisome]")
(node 327 "oxygen [peroxisome]")
(node 328 "H+ [peroxisome]")
(node 329 "H2O [peroxisome]")
(node 331 "acetyl-CoA [peroxisome]")
(node 332 "coenzyme A [peroxisome]")
(node 334 "AMP [peroxisome]")
(node 335 "ATP [peroxisome]")
(node 336 "coenzyme A [peroxisome]")
(node 337 "pyrophosphate [peroxisome]")
(node 339 "H2O [peroxisome]")
(node 341 "AMP [peroxisome]")
(node 342 "ATP [peroxisome]")
(node 343 "coenzyme A [peroxisome]")
(node 344 "pyrophosphate [peroxisome]")
(node 346 "coenzyme A [peroxisome]")
(node 347 "H+ [peroxisome]")
(node 348 "H2O [peroxisome]")
(node 350 "acetyl-CoA [peroxisome]")
(node 351 "coenzyme A [peroxisome]")
(node 352 "hydrogen peroxide [peroxisome]")
(node 353 "NAD [peroxisome]")
(node 354 "NADH [peroxisome]")
(node 355 "NADP(+) [peroxisome]")
(node 356 "NADPH [peroxisome]")
(node 357 "oxygen [peroxisome]")
(node 358 "H+ [peroxisome]")
(node 359 "H2O [peroxisome]")
(node 361 "AMP [peroxisome]")
(node 362 "ATP [peroxisome]")
(node 363 "coenzyme A [peroxisome]")
(node 364 "pyrophosphate [peroxisome]")
(node 366 "acetyl-CoA [peroxisome]")
(node 367 "coenzyme A [peroxisome]")
(node 368 "hydrogen peroxide [peroxisome]")
(node 369 "NAD [peroxisome]")
(node 370 "NADH [peroxisome]")
(node 371 "NADP(+) [peroxisome]")
(node 372 "NADPH [peroxisome]")
(node 373 "oxygen [peroxisome]")
(node 374 "H+ [peroxisome]")
(node 375 "H2O [peroxisome]")
(node 377 "acetyl-CoA [peroxisome]")
(node 378 "coenzyme A [peroxisome]")
(node 379 "hydrogen peroxide [peroxisome]")
(node 380 "NAD [peroxisome]")
(node 381 "NADH [peroxisome]")
(node 382 "oxygen [peroxisome]")
(node 383 "H+ [peroxisome]")
(node 384 "H2O [peroxisome]")
(node 386 "cerotate [peroxisome]")
(node 387 "hexadec-2-enoyl-CoA [peroxisome]")
(node 388 "myristoyl-CoA [peroxisome]")
(node 389 "decanoyl-CoA [peroxisome]")
(node 390 "hydrogen peroxide [peroxisome]")
(node 391 "oxygen [peroxisome]")
(node 393 "coenzyme A [peroxisome]")
(node 394 "H+ [peroxisome]")
(node 395 "H2O [peroxisome]")
(node 397 "acetyl-CoA [peroxisome]")
(node 398 "coenzyme A [peroxisome]")
(node 400 "hydrogen peroxide [peroxisome]")
(node 401 "oxygen [peroxisome]")
(node 403 "acetyl-CoA [peroxisome]")
(node 404 "coenzyme A [peroxisome]")
(node 405 "hydrogen peroxide [peroxisome]")
(node 406 "NAD [peroxisome]")
(node 407 "NADH [peroxisome]")
(node 408 "NADP(+) [peroxisome]")
(node 409 "NADPH [peroxisome]")
(node 410 "oxygen [peroxisome]")
(node 411 "H+ [peroxisome]")
(node 412 "H2O [peroxisome]")
(node 414 "myristoleate [peroxisome]")
(node 415 "(S)-3-hydroxydecanoyl-CoA [peroxisome]")
(node 416 "AMP [peroxisome]")
(node 417 "ATP [peroxisome]")
(node 418 "coenzyme A [peroxisome]")
(node 419 "pyrophosphate [peroxisome]")
(node 421 "acetyl-CoA [peroxisome]")
(node 422 "coenzyme A [peroxisome]")
(node 423 "hydrogen peroxide [peroxisome]")
(node 424 "NAD [peroxisome]")
(node 425 "NADH [peroxisome]")
(node 426 "oxygen [peroxisome]")
(node 427 "H+ [peroxisome]")
(node 428 "H2O [peroxisome]")
(node 430 "decanoyl-CoA [peroxisome]")
(node 431 "cerotate [peroxisome]")
(node 432 "acetyl-CoA [peroxisome]")
(node 433 "coenzyme A [peroxisome]")
(node 434 "hydrogen peroxide [peroxisome]")
(node 435 "NAD [peroxisome]")
(node 436 "NADH [peroxisome]")
(node 437 "oxygen [peroxisome]")
(node 438 "H+ [peroxisome]")
(node 439 "H2O [peroxisome]")
(node 441 "acetyl-CoA [peroxisome]")
(node 442 "coenzyme A [peroxisome]")
(node 443 "hydrogen peroxide [peroxisome]")
(node 444 "NAD [peroxisome]")
(node 445 "NADH [peroxisome]")
(node 446 "NADP(+) [peroxisome]")
(node 447 "NADPH [peroxisome]")
(node 448 "oxygen [peroxisome]")
(node 449 "H+ [peroxisome]")
(node 450 "H2O [peroxisome]")
(node 452 "AMP [peroxisome]")
(node 453 "ATP [peroxisome]")
(node 454 "coenzyme A [peroxisome]")
(node 455 "pyrophosphate [peroxisome]")
(node 457 "H2O [peroxisome]")
(node 459 "hexadec-2-enoyl-CoA [peroxisome]")
(node 460 "coenzyme A [peroxisome]")
(node 461 "H+ [peroxisome]")
(node 462 "H2O [peroxisome]")
(node 464 "acetyl-CoA [peroxisome]")
(node 465 "coenzyme A [peroxisome]")
(node 467 "NAD [peroxisome]")
(node 468 "NADH [peroxisome]")
(node 469 "H+ [peroxisome]")
(node 471 "3-oxodecanoyl-CoA [peroxisome]")
)
(property  0 double "stoichiometry"
(default "0" "0")
(edge 0 "1")
(edge 1 "1")
(edge 2 "1")
(edge 3 "1")
(edge 4 "1")
(edge 5 "1")
(edge 6 "1")
(edge 7 "1")
(edge 8 "1")
(edge 9 "1")
(edge 10 "1")
(edge 11 "1")
(edge 12 "1")
(edge 13 "1")
(edge 14 "1")
(edge 15 "1")
(edge 16 "1")
(edge 17 "1")
(edge 18 "1")
(edge 19 "1")
(edge 20 "1")
(edge 21 "1")
(edge 22 "1")
(edge 23 "1")
(edge 24 "1")
(edge 25 "1")
(edge 26 "1")
(edge 27 "1")
(edge 28 "1")
(edge 29 "1")
(edge 30 "1")
(edge 31 "1")
(edge 32 "1")
(edge 33 "1")
(edge 34 "1")
(edge 35 "1")
(edge 36 "1")
(edge 37 "1")
(edge 38 "1")
(edge 39 "1")
(edge 40 "1")
(edge 41 "1")
(edge 42 "1")
(edge 43 "1")
(edge 44 "1")
(edge 45 "1")
(edge 46 "1")
(edge 47 "1")
(edge 48 "1")
(edge 49 "1")
(edge 50 "1")
(edge 51 "1")
(edge 52 "1")
(edge 53 "1")
(edge 54 "1")
(edge 55 "1")
(edge 56 "1")
(edge 57 "1")
(edge 58 "1")
(edge 59 "1")
(edge 60 "1")
(edge 61 "1")
(edge 62 "1")
(edge 63 "1")
(edge 64 "1")
(edge 65 "1")
(edge 66 "1")
(edge 67 "1")
(edge 68 "1")
(edge 69 "1")
(edge 70 "1")
(edge 71 "1")
(edge 72 "1")
(edge 73 "1")
(edge 74 "1")
(edge 75 "1")
(edge 76 "1")
(edge 77 "1")
(edge 78 "1")
(edge 79 "1")
(edge 80 "1")
(edge 81 "1")
(edge 82 "1")
(edge 83 "1")
(edge 84 "1")
(edge 85 "1")
(edge 86 "1")
(edge 87 "1")
(edge 88 "1")
(edge 89 "1")
(edge 90 "1")
(edge 91 "1")
(edge 92 "1")
(edge 93 "1")
(edge 94 "1")
(edge 95 "1")
(edge 96 "1")
(edge 97 "1")
(edge 98 "1")
(edge 99 "1")
(edge 100 "1")
(edge 101 "1")
(edge 102 "1")
(edge 103 "1")
(edge 104 "1")
(edge 105 "1")
(edge 106 "1")
(edge 107 "1")
(edge 108 "1")
(edge 109 "7")
(edge 110 "8")
(edge 111 "8")
(edge 112 "9")
(edge 113 "9")
(edge 114 "9")
(edge 115 "9")
(edge 116 "9")
(edge 117 "7")
(edge 118 "4")
(edge 119 "3")
(edge 120 "1")
(edge 121 "1")
(edge 122 "1")
(edge 123 "1")
(edge 124 "1")
(edge 125 "1")
(edge 126 "1")
(edge 127 "1")
(edge 128 "1")
(edge 129 "1")
(edge 130 "1")
(edge 131 "1")
(edge 132 "1")
(edge 133 "1")
(edge 134 "1")
(edge 135 "1")
(edge 136 "1")
(edge 137 "1")
(edge 138 "1")
(edge 139 "1")
(edge 140 "1")
(edge 141 "1")
(edge 142 "1")
(edge 143 "1")
(edge 144 "6")
(edge 145 "7")
(edge 146 "7")
(edge 147 "8")
(edge 148 "8")
(edge 149 "8")
(edge 150 "8")
(edge 151 "8")
(edge 152 "6")
(edge 153 "3")
(edge 154 "3")
(edge 155 "1")
(edge 156 "1")
(edge 157 "1")
(edge 158 "1")
(edge 159 "1")
(edge 160 "1")
(edge 161 "1")
(edge 162 "1")
(edge 163 "1")
(edge 164 "1")
(edge 165 "1")
(edge 166 "1")
(edge 167 "1")
(edge 168 "1")
(edge 169 "1")
(edge 170 "1")
(edge 171 "1")
(edge 172 "1")
(edge 173 "1")
(edge 174 "1")
(edge 175 "1")
(edge 176 "1")
(edge 177 "1")
(edge 178 "1")
(edge 179 "1")
(edge 180 "1")
(edge 181 "1")
(edge 182 "1")
(edge 183 "1")
(edge 184 "1")
(edge 185 "1")
(edge 186 "1")
(edge 187 "5")
(edge 188 "7")
(edge 189 "6")
(edge 190 "8")
(edge 191 "7")
(edge 192 "8")
(edge 193 "7")
(edge 194 "6")
(edge 195 "6")
(edge 196 "3")
(edge 197 "3")
(edge 198 "1")
(edge 199 "1")
(edge 200 "1")
(edge 201 "1")
(edge 202 "1")
(edge 203 "1")
(edge 204 "1")
(edge 205 "1")
(edge 206 "1")
(edge 207 "6")
(edge 208 "7")
(edge 209 "7")
(edge 210 "8")
(edge 211 "8")
(edge 212 "8")
(edge 213 "8")
(edge 214 "8")
(edge 215 "6")
(edge 216 "3")
(edge 217 "3")
(edge 218 "1")
(edge 219 "1")
(edge 220 "1")
(edge 221 "1")
(edge 222 "1")
(edge 223 "1")
(edge 224 "6")
(edge 225 "7")
(edge 226 "7")
(edge 227 "8")
(edge 228 "8")
(edge 229 "8")
(edge 230 "8")
(edge 231 "8")
(edge 232 "6")
(edge 233 "3")
(edge 234 "3")
(edge 235 "1")
(edge 236 "1")
(edge 237 "2")
(edge 238 "1")
(edge 239 "1")
(edge 240 "1")
(edge 241 "1")
(edge 242 "2")
(edge 243 "1")
(edge 244 "1")
(edge 245 "1")
(edge 246 "1")
(edge 247 "1")
(edge 248 "1")
(edge 249 "1")
(edge 250 "1")
(edge 251 "5")
(edge 252 "7")
(edge 253 "6")
(edge 254 "8")
(edge 255 "7")
(edge 256 "8")
(edge 257 "7")
(edge 258 "6")
(edge 259 "6")
(edge 260 "3")
(edge 261 "3")
(edge 262 "1")
(edge 263 "1")
(edge 264 "1")
(edge 265 "1")
(edge 266 "1")
(edge 267 "1")
(edge 268 "6")
(edge 269 "6")
(edge 270 "7")
(edge 271 "7")
(edge 272 "8")
(edge 273 "6")
(edge 274 "7")
(edge 275 "8")
(edge 276 "5")
(edge 277 "3")
(edge 278 "3")
(edge 279 "1")
(edge 280 "1")
(edge 281 "1")
(edge 282 "1")
(edge 283 "1")
(edge 284 "1")
(edge 285 "1")
(edge 286 "1")
(edge 287 "1")
(edge 288 "1")
(edge 289 "1")
(edge 290 "1")
(edge 291 "1")
(edge 292 "6")
(edge 293 "7")
(edge 294 "7")
(edge 295 "8")
(edge 296 "8")
(edge 297 "8")
(edge 298 "8")
(edge 299 "8")
(edge 300 "6")
(edge 301 "3")
(edge 302 "3")
(edge 303 "1")
(edge 304 "1")
(edge 305 "1")
(edge 306 "1")
(edge 307 "1")
(edge 308 "1")
(edge 309 "1")
(edge 310 "1")
(edge 311 "1")
(edge 312 "1")
(edge 313 "1")
(edge 314 "1")
(edge 315 "1")
(edge 316 "1")
(edge 317 "1")
(edge 318 "1")
(edge 319 "1")
(edge 320 "1")
(edge 321 "1")
(edge 322 "1")
(edge 323 "1")
(edge 324 "1")
(edge 325 "1")
(edge 326 "1")
(edge 327 "1")
(edge 328 "1")
(edge 329 "1")
(edge 330 "1")
(edge 331 "1")
(edge 332 "1")
(edge 333 "1")
(edge 334 "1")
(edge 335 "1")
(edge 336 "1")
(edge 337 "1")
(edge 338 "1")
(edge 339 "1")
(edge 340 "1")
(edge 341 "1")
(edge 342 "1")
(edge 343 "1")
(edge 344 "1")
(edge 345 "1")
(edge 346 "1")
(edge 347 "1")
(edge 348 "1")
(edge 349 "1")
(edge 350 "1")
(edge 351 "1")
(edge 352 "1")
(edge 353 "1")
(edge 354 "1")
(edge 355 "1")
(edge 356 "1")
(edge 357 "1")
(edge 358 "1")
(edge 359 "1")
(edge 360 "1")
(edge 361 "1")
(edge 362 "1")
(edge 363 "1")
(edge 364 "1")
(edge 365 "1")
(edge 366 "1")
(edge 367 "1")
(edge 368 "1")
(edge 369 "1")
(edge 370 "1")
(edge 371 "1")
(edge 372 "1")
(edge 373 "1")
(edge 374 "1")
(edge 375 "1")
(edge 376 "1")
(edge 377 "1")
(edge 378 "4")
(edge 379 "1")
(edge 380 "9")
(edge 381 "3")
(edge 382 "1")
(edge 383 "8")
(edge 384 "6")
(edge 385 "1")
(edge 386 "3")
(edge 387 "8")
(edge 388 "3")
(edge 389 "1")
(edge 390 "3")
(edge 391 "1")
(edge 392 "8")
(edge 393 "1")
(edge 394 "6")
(edge 395 "3")
(edge 396 "8")
(edge 397 "1")
(edge 398 "3")
(edge 399 "8")
(edge 400 "3")
(edge 401 "1")
(edge 402 "1")
(edge 403 "4.66667")
(edge 404 "4")
(edge 405 "3.33333")
(edge 406 "4")
(edge 407 "4")
(edge 408 "3.33333")
(edge 409 "4")
(edge 410 "4")
(edge 411 "1")
(edge 412 "1")
(edge 413 "1")
(edge 414 "1")
(edge 415 "1")
(edge 416 "1")
(edge 417 "1")
(edge 418 "1")
(edge 419 "1")
(edge 420 "1")
(edge 421 "1")
(edge 422 "1")
(edge 423 "1")
(edge 424 "1")
(edge 425 "1")
(edge 426 "1")
(edge 427 "1")
(edge 428 "1")
(edge 429 "1")
(edge 430 "1")
(edge 431 "1")
(edge 432 "1")
(edge 433 "1")
(edge 434 "1")
(edge 435 "1")
(edge 436 "1")
(edge 437 "1")
(edge 438 "1")
(edge 439 "1")
(edge 440 "1")
(edge 441 "1")
(edge 442 "1")
(edge 443 "1")
(edge 444 "1")
(edge 445 "1")
(edge 446 "1")
(edge 447 "1")
(edge 448 "1")
(edge 449 "1")
(edge 450 "1")
(edge 451 "1")
(edge 452 "1")
(edge 453 "1")
(edge 454 "1")
(edge 455 "1")
(edge 456 "1")
(edge 457 "1")
(edge 458 "1")
(edge 459 "1")
(edge 460 "1")
(edge 461 "1")
(edge 462 "1")
(edge 463 "1")
(edge 464 "1")
(edge 465 "1")
(edge 466 "1")
(edge 467 "1")
(edge 468 "1")
(edge 469 "1")
(edge 470 "1")
(edge 471 "1")
(edge 472 "1")
(edge 473 "1")
(edge 474 "1")
(edge 475 "1")
(edge 476 "1")
(edge 477 "1")
(edge 478 "1")
(edge 479 "1")
(edge 480 "1")
(edge 481 "1")
(edge 482 "1")
(edge 483 "1")
(edge 484 "1")
(edge 485 "1")
(edge 486 "1")
(edge 487 "1")
(edge 488 "1")
(edge 489 "1")
(edge 490 "1")
(edge 491 "1")
(edge 492 "1")
(edge 493 "1")
(edge 494 "1")
(edge 495 "1")
(edge 496 "1")
(edge 497 "1")
(edge 498 "1")
(edge 499 "1")
(edge 500 "1")
(edge 501 "1")
(edge 502 "1")
(edge 503 "1")
(edge 504 "1")
(edge 505 "1")
(edge 506 "1")
(edge 507 "1")
(edge 508 "1")
(edge 509 "1")
(edge 510 "1")
(edge 511 "1")
(edge 512 "1")
(edge 513 "1")
(edge 514 "1")
(edge 515 "1")
(edge 516 "1")
(edge 517 "1")
(edge 518 "1")
(edge 519 "1")
(edge 520 "8")
(edge 521 "9")
(edge 522 "7")
(edge 523 "7")
(edge 524 "8")
(edge 525 "6")
(edge 526 "7")
(edge 527 "8")
(edge 528 "6")
(edge 529 "7")
(edge 530 "8")
(edge 531 "6")
(edge 532 "7")
(edge 533 "8")
(edge 534 "6")
(edge 535 "1")
(edge 536 "1")
(edge 537 "1")
(edge 538 "1")
(edge 539 "1")
(edge 540 "1")
(edge 541 "7")
(edge 542 "8")
(edge 543 "6")
(edge 544 "6")
(edge 545 "7")
(edge 546 "5")
(edge 547 "7")
(edge 548 "8")
(edge 549 "6")
(edge 550 "1")
(edge 551 "8")
(edge 552 "7")
(edge 553 "7")
(edge 554 "7")
(edge 555 "7")
(edge 556 "1")
(edge 557 "1")
(edge 558 "7")
(edge 559 "6")
(edge 560 "7")
(edge 561 "1")
(edge 562 "1")
(edge 563 "1")
(edge 564 "1")
(edge 565 "1")
(edge 566 "1")
(edge 567 "1")
(edge 568 "1")
(edge 569 "1")
(edge 570 "1")
(edge 571 "1")
(edge 572 "1")
(edge 573 "1")
(edge 574 "1")
(edge 575 "1")
(edge 576 "1")
(edge 577 "1")
(edge 578 "9")
(edge 579 "9")
(edge 580 "8")
(edge 581 "8")
(edge 582 "8")
(edge 583 "7")
(edge 584 "8")
(edge 585 "8")
(edge 586 "8")
(edge 587 "8")
(edge 588 "2")
(edge 589 "1")
(edge 590 "2")
(edge 591 "1")
(edge 592 "8")
(edge 593 "7")
(edge 594 "6")
(edge 595 "7")
(edge 596 "8")
(edge 597 "8")
(edge 598 "1")
(edge 599 "9")
(edge 600 "8")
(edge 601 "7.5")
(edge 602 "8")
(edge 603 "8")
(edge 604 "1.5")
(edge 605 "1.5")
(edge 606 "7.5")
(edge 607 "6.5")
(edge 608 "8")
(edge 609 "7")
(edge 610 "8")
(edge 611 "9")
(edge 612 "6")
(edge 613 "7")
(edge 614 "8")
(edge 615 "5")
(edge 616 "6")
(edge 617 "7")
(edge 618 "6")
(edge 619 "7")
(edge 620 "8")
(edge 621 "6")
(edge 622 "7")
(edge 623 "8")
(edge 624 "5")
(edge 625 "6")
(edge 626 "7")
(edge 627 "6")
(edge 628 "7")
(edge 629 "8")
(edge 630 "6")
(edge 631 "7")
(edge 632 "8")
(edge 633 "1")
(edge 634 "8")
(edge 635 "7")
(edge 636 "6")
(edge 637 "7")
(edge 638 "7")
(edge 639 "6")
(edge 640 "7")
(edge 641 "7")
(edge 642 "1")
(edge 643 "1")
(edge 644 "1")
(edge 645 "1")
(edge 646 "1")
(edge 647 "1")
(edge 648 "1")
(edge 649 "1")
(edge 650 "1")
(edge 651 "1")
(edge 652 "1")
(edge 653 "1")
(edge 654 "1")
(edge 655 "1")
(edge 656 "1")
(edge 657 "1")
(edge 658 "1")
(edge 659 "1")
(edge 660 "1")
(edge 661 "1")
(edge 662 "1")
(edge 663 "1")
(edge 664 "1")
(edge 665 "1")
(edge 666 "1")
(edge 667 "1")
(edge 668 "1")
(edge 669 "1")
(edge 670 "1")
(edge 671 "1")
(edge 672 "1")
(edge 673 "1")
(edge 674 "1")
(edge 675 "1")
(edge 676 "1")
(edge 677 "1")
(edge 678 "1")
(edge 679 "1")
(edge 680 "1")
(edge 681 "1")
(edge 682 "1")
(edge 683 "1")
(edge 684 "1")
(edge 685 "1")
(edge 686 "1")
(edge 687 "1")
(edge 688 "1")
(edge 689 "1")
(edge 690 "1")
(edge 691 "1")
(edge 692 "1")
(edge 693 "1")
(edge 694 "1")
(edge 695 "1")
(edge 696 "1")
(edge 697 "1")
(edge 698 "1")
(edge 699 "1")
(edge 700 "1")
(edge 701 "1")
(edge 702 "1")
(edge 703 "1")
(edge 704 "1")
(edge 705 "1")
(edge 706 "1")
(edge 707 "1")
(edge 708 "1")
(edge 709 "1")
(edge 710 "1")
(edge 711 "1")
(edge 712 "1")
(edge 713 "1")
(edge 714 "1")
(edge 715 "1")
(edge 716 "1")
(edge 717 "1")
(edge 718 "1")
(edge 719 "1")
(edge 720 "1")
(edge 721 "1")
(edge 722 "1")
(edge 723 "1")
(edge 724 "1")
(edge 725 "1")
(edge 726 "1")
(edge 727 "1")
(edge 728 "1")
(edge 729 "9")
(edge 730 "9")
(edge 731 "8")
(edge 732 "8")
(edge 733 "8")
(edge 734 "7")
(edge 735 "8")
(edge 736 "8")
(edge 737 "8")
(edge 738 "8")
(edge 739 "2")
(edge 740 "1")
(edge 741 "2")
(edge 742 "1")
(edge 743 "8")
(edge 744 "7")
(edge 745 "6")
(edge 746 "7")
(edge 747 "8")
(edge 748 "8")
(edge 749 "1")
(edge 750 "9")
(edge 751 "8")
(edge 752 "7.5")
(edge 753 "8")
(edge 754 "8")
(edge 755 "1.5")
(edge 756 "1.5")
(edge 757 "7.5")
(edge 758 "6.5")
(edge 759 "8")
(edge 760 "1")
(edge 761 "1")
(edge 762 "1")
(edge 763 "1")
(edge 764 "1")
(edge 765 "1")
(edge 766 "1")
(edge 767 "1")
(edge 768 "1")
(edge 769 "1")
(edge 770 "1")
(edge 771 "1")
(edge 772 "1")
(edge 773 "1")
(edge 774 "1")
(edge 775 "1")
(edge 776 "1")
(edge 777 "1")
(edge 778 "1")
(edge 779 "1")
(edge 780 "1")
(edge 781 "1")
(edge 782 "1")
(edge 783 "1")
(edge 784 "1")
(edge 785 "1")
(edge 786 "1")
(edge 787 "1")
(edge 788 "1")
(edge 789 "7")
(edge 790 "8")
(edge 791 "9")
(edge 792 "6")
(edge 793 "7")
(edge 794 "8")
(edge 795 "5")
(edge 796 "6")
(edge 797 "7")
(edge 798 "6")
(edge 799 "7")
(edge 800 "8")
(edge 801 "6")
(edge 802 "7")
(edge 803 "8")
(edge 804 "5")
(edge 805 "6")
(edge 806 "7")
(edge 807 "6")
(edge 808 "7")
(edge 809 "8")
(edge 810 "6")
(edge 811 "7")
(edge 812 "8")
(edge 813 "1")
(edge 814 "8")
(edge 815 "7")
(edge 816 "6")
(edge 817 "7")
(edge 818 "7")
(edge 819 "6")
(edge 820 "7")
(edge 821 "7")
(edge 822 "1")
(edge 823 "1")
(edge 824 "1")
(edge 825 "1")
(edge 826 "1")
(edge 827 "1")
(edge 828 "1")
(edge 829 "1")
(edge 830 "1")
(edge 831 "1")
(edge 832 "1")
(edge 833 "1")
(edge 834 "1")
(edge 835 "1")
(edge 836 "1")
(edge 837 "1")
(edge 838 "1")
(edge 839 "1")
(edge 840 "1")
(edge 841 "1")
(edge 842 "1")
(edge 843 "1")
(edge 844 "1")
(edge 845 "1")
(edge 846 "1")
(edge 847 "1")
(edge 848 "1")
(edge 849 "1")
(edge 850 "1")
(edge 851 "1")
(edge 852 "1")
(edge 853 "1")
(edge 854 "1")
(edge 855 "1")
(edge 856 "1")
(edge 857 "1")
(edge 858 "1")
(edge 859 "1")
(edge 860 "1")
(edge 861 "4")
(edge 862 "1")
(edge 863 "9")
(edge 864 "3")
(edge 865 "1")
(edge 866 "8")
(edge 867 "6")
(edge 868 "1")
(edge 869 "3")
(edge 870 "8")
(edge 871 "3")
(edge 872 "1")
(edge 873 "3")
(edge 874 "1")
(edge 875 "8")
(edge 876 "1")
(edge 877 "6")
(edge 878 "3")
(edge 879 "8")
(edge 880 "1")
(edge 881 "3")
(edge 882 "8")
(edge 883 "3")
(edge 884 "1")
(edge 885 "1")
(edge 886 "4.66667")
(edge 887 "4")
(edge 888 "3.33333")
(edge 889 "4")
(edge 890 "4")
(edge 891 "3.33333")
(edge 892 "4")
(edge 893 "4")
(edge 894 "8")
(edge 895 "9")
(edge 896 "7")
(edge 897 "7")
(edge 898 "8")
(edge 899 "6")
(edge 900 "7")
(edge 901 "8")
(edge 902 "6")
(edge 903 "7")
(edge 904 "8")
(edge 905 "6")
(edge 906 "7")
(edge 907 "8")
(edge 908 "6")
(edge 909 "1")
(edge 910 "1")
(edge 911 "1")
(edge 912 "1")
(edge 913 "1")
(edge 914 "1")
(edge 915 "7")
(edge 916 "8")
(edge 917 "6")
(edge 918 "6")
(edge 919 "7")
(edge 920 "5")
(edge 921 "7")
(edge 922 "8")
(edge 923 "6")
(edge 924 "1")
(edge 925 "8")
(edge 926 "7")
(edge 927 "7")
(edge 928 "7")
(edge 929 "7")
(edge 930 "1")
(edge 931 "1")
(edge 932 "7")
(edge 933 "6")
(edge 934 "7")
(edge 935 "1")
(edge 936 "1")
(edge 937 "1")
(edge 938 "1")
(edge 939 "1")
(edge 940 "1")
(edge 941 "1")
(edge 942 "1")
(edge 943 "1")
(edge 944 "1")
(edge 945 "1")
(edge 946 "1")
(edge 947 "1")
(edge 948 "1")
(edge 949 "1")
(edge 950 "1")
(edge 951 "1")
(edge 952 "1")
(edge 953 "1")
(edge 954 "1")
(edge 955 "1")
(edge 956 "1")
(edge 957 "1")
(edge 958 "1")
(edge 959 "1")
(edge 960 "1")
(edge 961 "1")
(edge 962 "1")
(edge 963 "1")
(edge 964 "1")
(edge 965 "1")
(edge 966 "1")
(edge 967 "1")
(edge 968 "1")
(edge 969 "1")
(edge 970 "1")
(edge 971 "1")
(edge 972 "1")
(edge 973 "1")
(edge 974 "1")
(edge 975 "1")
(edge 976 "1")
(edge 977 "1")
(edge 978 "1")
(edge 979 "1")
(edge 980 "1")
(edge 981 "1")
(edge 982 "1")
(edge 983 "1")
(edge 984 "1")
(edge 985 "1")
(edge 986 "1")
(edge 987 "1")
(edge 988 "1")
(edge 989 "1")
(edge 990 "1")
(edge 991 "1")
(edge 992 "1")
(edge 993 "1")
(edge 994 "1")
(edge 995 "1")
(edge 996 "1")
(edge 997 "1")
(edge 998 "1")
(edge 999 "1")
(edge 1000 "1")
(edge 1001 "1")
(edge 1002 "1")
(edge 1003 "1")
(edge 1004 "1")
(edge 1005 "1")
(edge 1006 "1")
(edge 1007 "1")
(edge 1008 "1")
(edge 1009 "1")
(edge 1010 "1")
(edge 1011 "1")
(edge 1012 "1")
(edge 1013 "1")
(edge 1014 "1")
(edge 1015 "1")
(edge 1016 "1")
(edge 1017 "1")
(edge 1018 "1")
(edge 1019 "1")
(edge 1020 "1")
(edge 1021 "1")
(edge 1022 "1")
(edge 1023 "1")
(edge 1024 "1")
(edge 1025 "1")
(edge 1026 "1")
(edge 1027 "1")
(edge 1028 "1")
(edge 1029 "1")
(edge 1030 "1")
(edge 1031 "1")
(edge 1032 "1")
(edge 1033 "1")
(edge 1034 "1")
(edge 1035 "1")
(edge 1036 "1")
(edge 1037 "1")
(edge 1038 "1")
(edge 1039 "1")
(edge 1040 "1")
(edge 1041 "1")
(edge 1042 "1")
(edge 1043 "1")
(edge 1044 "1")
(edge 1045 "1")
(edge 1046 "1")
(edge 1047 "1")
(edge 1048 "1")
(edge 1049 "1")
(edge 1050 "1")
(edge 1051 "1")
(edge 1052 "1")
(edge 1053 "1")
(edge 1054 "1")
(edge 1055 "1")
(edge 1056 "1")
(edge 1057 "1")
(edge 1058 "1")
(edge 1059 "1")
(edge 1060 "1")
(edge 1061 "1")
)
(property  0 vector<string> "subSystem"
(default "()" "()")
)
(property  0 bool "ubiquitous"
(default "false" "false")
(node 12 "true")
(node 13 "true")
(node 14 "true")
(node 16 "true")
(node 19 "true")
(node 22 "true")
(node 29 "true")
(node 30 "true")
(node 35 "true")
(node 48 "true")
(node 49 "true")
(node 105 "true")
(node 106 "true")
(node 107 "true")
(node 108 "true")
(node 109 "true")
(node 110 "true")
(node 111 "true")
(node 112 "true")
(node 113 "true")
(node 114 "true")
(node 115 "true")
(node 116 "true")
(node 117 "true")
(node 118 "true")
(node 119 "true")
(node 120 "true")
(node 121 "true")
(node 122 "true")
(node 123 "true")
(node 124 "true")
(node 125 "true")
(node 126 "true")
(node 127 "true")
(node 128 "true")
(node 129 "true")
(node 130 "true")
(node 131 "true")
(node 132 "true")
(node 133 "true")
(node 134 "true")
(node 135 "true")
(node 136 "true")
(node 137 "true")
(node 138 "true")
(node 139 "true")
(node 140 "true")
(node 141 "true")
(node 142 "true")
(node 143 "true")
(node 144 "true")
(node 145 "true")
(node 146 "true")
(node 147 "true")
(node 148 "true")
(node 149 "true")
(node 150 "true")
(node 151 "true")
(node 152 "true")
(node 153 "true")
(node 154 "true")
(node 155 "true")
(node 156 "true")
(node 157 "true")
(node 158 "true")
(node 159 "true")
(node 160 "true")
(node 161 "true")
(node 162 "true")
(node 163 "true")
(node 164 "true")
(node 165 "true")
(node 166 "true")
(node 167 "true")
(node 168 "true")
(node 169 "true")
(node 170 "true")
(node 171 "true")
(node 172 "true")
(node 173 "true")
(node 174 "true")
(node 175 "true")
(node 176 "true")
(node 177 "true")
(node 178 "true")
(node 179 "true")
(node 180 "true")
(node 181 "true")
(node 182 "true")
(node 183 "true")
(node 184 "true")
(node 185 "true")
(node 186 "true")
(node 187 "true")
(node 188 "true")
(node 189 "true")
(node 190 "true")
(node 191 "true")
(node 192 "true")
(node 193 "true")
(node 194 "true")
(node 195 "true")
(node 196 "true")
(node 197 "true")
(node 198 "true")
(node 199 "true")
(node 203 "true")
(node 204 "true")
(node 205 "true")
(node 206 "true")
(node 207 "true")
(node 208 "true")
(node 209 "true")
(node 210 "true")
(node 211 "true")
(node 212 "true")
(node 213 "true")
(node 214 "true")
(node 215 "true")
(node 216 "true")
(node 217 "true")
(node 218 "true")
(node 219 "true")
(node 220 "true")
(node 221 "true")
(node 222 "true")
(node 223 "true")
(node 224 "true")
(node 225 "true")
(node 226 "true")
(node 227 "true")
(node 228 "true")
(node 229 "true")
(node 230 "true")
(node 231 "true")
(node 232 "true")
(node 233 "true")
(node 234 "true")
(node 235 "true")
(node 236 "true")
(node 237 "true")
(node 238 "true")
(node 239 "true")
(node 240 "true")
(node 241 "true")
(node 242 "true")
(node 243 "true")
(node 244 "true")
(node 245 "true")
(node 246 "true")
(node 247 "true")
(node 248 "true")
(node 249 "true")
(node 250 "true")
(node 251 "true")
(node 252 "true")
(node 253 "true")
(node 254 "true")
(node 255 "true")
(node 256 "true")
(node 257 "true")
(node 258 "true")
(node 259 "true")
(node 260 "true")
(node 261 "true")
(node 262 "true")
(node 263 "true")
(node 264 "true")
(node 265 "true")
(node 266 "true")
(node 267 "true")
(node 268 "true")
(node 269 "true")
(node 270 "true")
(node 271 "true")
(node 272 "true")
(node 273 "true")
(node 274 "true")
(node 275 "true")
(node 276 "true")
(node 277 "true")
(node 278 "true")
(node 279 "true")
(node 280 "true")
(node 281 "true")
(node 282 "true")
(node 283 "true")
(node 284 "true")
(node 285 "true")
(node 286 "true")
(node 287 "true")
(node 288 "true")
(node 289 "true")
(node 290 "true")
(node 291 "true")
(node 292 "true")
(node 293 "true")
(node 294 "true")
(node 295 "true")
(node 296 "true")
(node 297 "true")
(node 298 "true")
(node 299 "true")
(node 300 "true")
(node 301 "true")
(node 302 "true")
(node 303 "true")
(node 304 "true")
(node 305 "true")
(node 306 "true")
(node 307 "true")
(node 308 "true")
(node 309 "true")
(node 310 "true")
(node 311 "true")
(node 312 "true")
(node 313 "true")
(node 317 "true")
(node 318 "true")
(node 319 "true")
(node 322 "true")
(node 323 "true")
(node 324 "true")
(node 325 "true")
(node 326 "true")
(node 327 "true")
(node 328 "true")
(node 329 "true")
(node 331 "true")
(node 332 "true")
(node 334 "true")
(node 335 "true")
(node 336 "true")
(node 337 "true")
(node 339 "true")
(node 341 "true")
(node 342 "true")
(node 343 "true")
(node 344 "true")
(node 346 "true")
(node 347 "true")
(node 348 "true")
(node 350 "true")
(node 351 "true")
(node 352 "true")
(node 353 "true")
(node 354 "true")
(node 355 "true")
(node 356 "true")
(node 357 "true")
(node 358 "true")
(node 359 "true")
(node 361 "true")
(node 362 "true")
(node 363 "true")
(node 364 "true")
(node 366 "true")
(node 367 "true")
(node 368 "true")
(node 369 "true")
(node 370 "true")
(node 371 "true")
(node 372 "true")
(node 373 "true")
(node 374 "true")
(node 375 "true")
(node 377 "true")
(node 378 "true")
(node 379 "true")
(node 380 "true")
(node 381 "true")
(node 382 "true")
(node 383 "true")
(node 384 "true")
(node 390 "true")
(node 391 "true")
(node 393 "true")
(node 394 "true")
(node 395 "true")
(node 397 "true")
(node 398 "true")
(node 400 "true")
(node 401 "true")
(node 403 "true")
(node 404 "true")
(node 405 "true")
(node 406 "true")
(node 407 "true")
(node 408 "true")
(node 409 "true")
(node 410 "true")
(node 411 "true")
(node 412 "true")
(node 416 "true")
(node 417 "true")
(node 418 "true")
(node 419 "true")
(node 421 "true")
(node 422 "true")
(node 423 "true")
(node 424 "true")
(node 425 "true")
(node 426 "true")
(node 427 "true")
(node 428 "true")
(node 432 "true")
(node 433 "true")
(node 434 "true")
(node 435 "true")
(node 436 "true")
(node 437 "true")
(node 438 "true")
(node 439 "true")
(node 441 "true")
(node 442 "true")
(node 443 "true")
(node 444 "true")
(node 445 "true")
(node 446 "true")
(node 447 "true")
(node 448 "true")
(node 449 "true")
(node 450 "true")
(node 452 "true")
(node 453 "true")
(node 454 "true")
(node 455 "true")
(node 457 "true")
(node 460 "true")
(node 461 "true")
(node 462 "true")
(node 464 "true")
(node 465 "true")
(node 467 "true")
(node 468 "true")
(node 469 "true")
)
(property  0 color "viewBorderColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 double "viewBorderWidth"
(default "1" "2")
)
(property  0 color "viewColor"
(default "(255,0,0,255)" "(0,0,0,255)")
(node 1 "(102,102,204,255)")
(node 6 "(102,204,102,255)")
(node 11 "(153,102,204,255)")
(node 12 "(211,211,211,255)")
(node 13 "(211,211,211,255)")
(node 14 "(211,211,211,255)")
(node 16 "(211,211,211,255)")
(node 19 "(211,211,211,255)")
(node 22 "(211,211,211,255)")
(node 25 "(102,204,127,255)")
(node 29 "(211,211,211,255)")
(node 30 "(211,211,211,255)")
(node 31 "(153,204,102,255)")
(node 35 "(211,211,211,255)")
(node 40 "(102,204,150,255)")
(node 41 "(102,204,204,255)")
(node 48 "(211,211,211,255)")
(node 49 "(211,211,211,255)")
(node 51 "(102,204,127,255)")
(node 52 "(0,255,0,255)")
(node 53 "(0,255,0,255)")
(node 54 "(211,211,211,255)")
(node 55 "(0,255,0,255)")
(node 56 "(0,255,0,255)")
(node 57 "(0,255,0,255)")
(node 58 "(211,211,211,255)")
(node 59 "(0,255,0,255)")
(node 60 "(211,211,211,255)")
(node 61 "(0,255,0,255)")
(node 62 "(0,255,0,255)")
(node 63 "(211,211,211,255)")
(node 64 "(0,255,0,255)")
(node 65 "(211,211,211,255)")
(node 66 "(0,255,0,255)")
(node 67 "(211,211,211,255)")
(node 68 "(211,211,211,255)")
(node 69 "(0,255,0,255)")
(node 70 "(0,255,0,255)")
(node 71 "(0,255,0,255)")
(node 72 "(0,255,0,255)")
(node 73 "(0,255,0,255)")
(node 74 "(211,211,211,255)")
(node 75 "(0,255,0,255)")
(node 76 "(0,255,0,255)")
(node 77 "(0,255,0,255)")
(node 78 "(0,255,0,255)")
(node 79 "(0,255,0,255)")
(node 80 "(0,255,0,255)")
(node 81 "(0,255,0,255)")
(node 82 "(0,255,0,255)")
(node 83 "(211,211,211,255)")
(node 84 "(0,255,0,255)")
(node 85 "(211,211,211,255)")
(node 86 "(211,211,211,255)")
(node 87 "(0,255,0,255)")
(node 88 "(0,255,0,255)")
(node 89 "(211,211,211,255)")
(node 90 "(0,255,0,255)")
(node 91 "(211,211,211,255)")
(node 92 "(0,255,0,255)")
(node 93 "(0,255,0,255)")
(node 94 "(0,255,0,255)")
(node 95 "(0,255,0,255)")
(node 96 "(0,255,0,255)")
(node 97 "(0,255,0,255)")
(node 98 "(211,211,211,255)")
(node 99 "(211,211,211,255)")
(node 100 "(0,255,0,255)")
(node 101 "(211,211,211,255)")
(node 102 "(0,255,0,255)")
(node 103 "(211,211,211,255)")
(node 104 "(211,211,211,255)")
(node 106 "(211,211,211,255)")
(node 108 "(211,211,211,255)")
(node 109 "(211,211,211,255)")
(node 118 "(211,211,211,255)")
(node 120 "(211,211,211,255)")
(node 121 "(211,211,211,255)")
(node 124 "(211,211,211,255)")
(node 126 "(211,211,211,255)")
(node 133 "(211,211,211,255)")
(node 135 "(211,211,211,255)")
(node 141 "(211,211,211,255)")
(node 143 "(211,211,211,255)")
(node 144 "(211,211,211,255)")
(node 153 "(211,211,211,255)")
(node 155 "(211,211,211,255)")
(node 156 "(211,211,211,255)")
(node 159 "(211,211,211,255)")
(node 161 "(211,211,211,255)")
(node 168 "(211,211,211,255)")
(node 169 "(211,211,211,255)")
(node 171 "(211,211,211,255)")
(node 173 "(211,211,211,255)")
(node 176 "(211,211,211,255)")
(node 178 "(211,211,211,255)")
(node 187 "(211,211,211,255)")
(node 196 "(211,211,211,255)")
(node 198 "(211,211,211,255)")
(node 199 "(211,211,211,255)")
(node 203 "(211,211,211,255)")
(node 205 "(211,211,211,255)")
(node 208 "(211,211,211,255)")
(node 216 "(211,211,211,255)")
(node 218 "(211,211,211,255)")
(node 219 "(211,211,211,255)")
(node 220 "(211,211,211,255)")
(node 222 "(211,211,211,255)")
(node 225 "(211,211,211,255)")
(node 233 "(211,211,211,255)")
(node 235 "(211,211,211,255)")
(node 236 "(211,211,211,255)")
(node 251 "(211,211,211,255)")
(node 260 "(211,211,211,255)")
(node 262 "(211,211,211,255)")
(node 263 "(211,211,211,255)")
(node 264 "(211,211,211,255)")
(node 266 "(211,211,211,255)")
(node 269 "(211,211,211,255)")
(node 277 "(211,211,211,255)")
(node 279 "(211,211,211,255)")
(node 280 "(211,211,211,255)")
(node 283 "(211,211,211,255)")
(node 284 "(211,211,211,255)")
(node 286 "(211,211,211,255)")
(node 290 "(211,211,211,255)")
(node 301 "(211,211,211,255)")
(node 303 "(211,211,211,255)")
(node 304 "(211,211,211,255)")
(node 307 "(211,211,211,255)")
(node 308 "(211,211,211,255)")
(node 310 "(211,211,211,255)")
(node 312 "(211,211,211,255)")
(node 313 "(211,211,211,255)")
(node 314 "(211,211,211,255)")
(node 315 "(204,102,189,255)")
(node 316 "(102,160,204,255)")
(node 317 "(211,211,211,255)")
(node 318 "(211,211,211,255)")
(node 319 "(211,211,211,255)")
(node 320 "(211,211,211,255)")
(node 321 "(204,189,102,255)")
(node 322 "(211,211,211,255)")
(node 323 "(211,211,211,255)")
(node 324 "(211,211,211,255)")
(node 325 "(211,211,211,255)")
(node 326 "(211,211,211,255)")
(node 327 "(211,211,211,255)")
(node 328 "(211,211,211,255)")
(node 329 "(211,211,211,255)")
(node 330 "(211,211,211,255)")
(node 331 "(211,211,211,255)")
(node 332 "(211,211,211,255)")
(node 333 "(211,211,211,255)")
(node 334 "(211,211,211,255)")
(node 335 "(211,211,211,255)")
(node 336 "(211,211,211,255)")
(node 337 "(211,211,211,255)")
(node 338 "(211,211,211,255)")
(node 339 "(211,211,211,255)")
(node 340 "(211,211,211,255)")
(node 341 "(211,211,211,255)")
(node 342 "(211,211,211,255)")
(node 343 "(211,211,211,255)")
(node 344 "(211,211,211,255)")
(node 345 "(211,211,211,255)")
(node 346 "(211,211,211,255)")
(node 347 "(211,211,211,255)")
(node 348 "(211,211,211,255)")
(node 349 "(211,211,211,255)")
(node 350 "(211,211,211,255)")
(node 351 "(211,211,211,255)")
(node 352 "(211,211,211,255)")
(node 353 "(211,211,211,255)")
(node 354 "(211,211,211,255)")
(node 355 "(211,211,211,255)")
(node 356 "(211,211,211,255)")
(node 357 "(211,211,211,255)")
(node 358 "(211,211,211,255)")
(node 359 "(211,211,211,255)")
(node 360 "(211,211,211,255)")
(node 361 "(211,211,211,255)")
(node 362 "(211,211,211,255)")
(node 363 "(211,211,211,255)")
(node 364 "(211,211,211,255)")
(node 365 "(211,211,211,255)")
(node 366 "(211,211,211,255)")
(node 367 "(211,211,211,255)")
(node 368 "(211,211,211,255)")
(node 369 "(211,211,211,255)")
(node 370 "(211,211,211,255)")
(node 371 "(211,211,211,255)")
(node 372 "(211,211,211,255)")
(node 373 "(211,211,211,255)")
(node 374 "(211,211,211,255)")
(node 375 "(211,211,211,255)")
(node 376 "(211,211,211,255)")
(node 377 "(211,211,211,255)")
(node 378 "(211,211,211,255)")
(node 379 "(211,211,211,255)")
(node 380 "(211,211,211,255)")
(node 381 "(211,211,211,255)")
(node 382 "(211,211,211,255)")
(node 383 "(211,211,211,255)")
(node 384 "(211,211,211,255)")
(node 385 "(211,211,211,255)")
(node 386 "(131,204,102,255)")
(node 387 "(204,102,102,255)")
(node 388 "(131,102,204,255)")
(node 389 "(102,204,160,255)")
(node 390 "(211,211,211,255)")
(node 391 "(211,211,211,255)")
(node 392 "(211,211,211,255)")
(node 393 "(211,211,211,255)")
(node 394 "(211,211,211,255)")
(node 395 "(211,211,211,255)")
(node 396 "(211,211,211,255)")
(node 397 "(211,211,211,255)")
(node 398 "(211,211,211,255)")
(node 399 "(211,211,211,255)")
(node 400 "(211,211,211,255)")
(node 401 "(211,211,211,255)")
(node 402 "(211,211,211,255)")
(node 403 "(211,211,211,255)")
(node 404 "(211,211,211,255)")
(node 405 "(211,211,211,255)")
(node 406 "(211,211,211,255)")
(node 407 "(211,211,211,255)")
(node 408 "(211,211,211,255)")
(node 409 "(211,211,211,255)")
(node 410 "(211,211,211,255)")
(node 411 "(211,211,211,255)")
(node 412 "(211,211,211,255)")
(node 413 "(211,211,211,255)")
(node 414 "(170,170,102,255)")
(node 415 "(102,170,170,255)")
(node 416 "(211,211,211,255)")
(node 417 "(211,211,211,255)")
(node 418 "(211,211,211,255)")
(node 419 "(211,211,211,255)")
(node 420 "(211,211,211,255)")
(node 421 "(211,211,211,255)")
(node 422 "(211,211,211,255)")
(node 423 "(211,211,211,255)")
(node 424 "(211,211,211,255)")
(node 425 "(211,211,211,255)")
(node 426 "(211,211,211,255)")
(node 427 "(211,211,211,255)")
(node 428 "(211,211,211,255)")
(node 429 "(211,211,211,255)")
(node 430 "(170,102,204,255)")
(node 431 "(102,170,204,255)")
(node 432 "(211,211,211,255)")
(node 433 "(211,211,211,255)")
(node 434 "(211,211,211,255)")
(node 435 "(211,211,211,255)")
(node 436 "(211,211,211,255)")
(node 437 "(211,211,211,255)")
(node 438 "(211,211,211,255)")
(node 439 "(211,211,211,255)")
(node 440 "(211,211,211,255)")
(node 441 "(211,211,211,255)")
(node 442 "(211,211,211,255)")
(node 443 "(211,211,211,255)")
(node 444 "(211,211,211,255)")
(node 445 "(211,211,211,255)")
(node 446 "(211,211,211,255)")
(node 447 "(211,211,211,255)")
(node 448 "(211,211,211,255)")
(node 449 "(211,211,211,255)")
(node 450 "(211,211,211,255)")
(node 451 "(211,211,211,255)")
(node 452 "(211,211,211,255)")
(node 453 "(211,211,211,255)")
(node 454 "(211,211,211,255)")
(node 455 "(211,211,211,255)")
(node 456 "(211,211,211,255)")
(node 457 "(211,211,211,255)")
(node 458 "(211,211,211,255)")
(node 459 "(204,170,102,255)")
(node 460 "(211,211,211,255)")
(node 461 "(211,211,211,255)")
(node 462 "(211,211,211,255)")
(node 463 "(211,211,211,255)")
(node 464 "(211,211,211,255)")
(node 465 "(211,211,211,255)")
(node 466 "(211,211,211,255)")
(node 467 "(211,211,211,255)")
(node 468 "(211,211,211,255)")
(node 469 "(211,211,211,255)")
(node 470 "(211,211,211,255)")
(node 471 "(102,204,102,255)")
(edge 0 "(102,204,176,255)")
(edge 1 "(102,204,176,255)")
(edge 2 "(102,204,176,255)")
(edge 3 "(102,204,176,255)")
(edge 4 "(102,204,176,255)")
(edge 5 "(102,204,176,255)")
(edge 6 "(102,204,176,255)")
(edge 7 "(102,204,176,255)")
(edge 8 "(102,204,176,255)")
(edge 9 "(102,204,176,255)")
(edge 10 "(102,204,176,255)")
(edge 11 "(102,204,176,255)")
(edge 12 "(139,102,204,255)")
(edge 13 "(139,102,204,255)")
(edge 14 "(139,102,204,255)")
(edge 15 "(139,102,204,255)")
(edge 16 "(139,102,204,255)")
(edge 17 "(139,102,204,255)")
(edge 18 "(139,102,204,255)")
(edge 19 "(139,102,204,255)")
(edge 20 "(139,102,204,255)")
(edge 21 "(139,102,204,255)")
(edge 22 "(139,102,204,255)")
(edge 23 "(139,102,204,255)")
(edge 24 "(139,204,102,255)")
(edge 25 "(139,204,102,255)")
(edge 26 "(102,204,183,255)")
(edge 27 "(102,204,183,255)")
(edge 28 "(139,204,102,255)")
(edge 29 "(139,204,102,255)")
(edge 30 "(139,204,102,255)")
(edge 31 "(139,204,102,255)")
(edge 32 "(139,204,102,255)")
(edge 33 "(139,204,102,255)")
(edge 34 "(139,204,102,255)")
(edge 35 "(102,204,120,255)")
(edge 36 "(102,204,120,255)")
(edge 37 "(102,204,120,255)")
(edge 38 "(102,204,120,255)")
(edge 39 "(102,204,120,255)")
(edge 40 "(102,204,120,255)")
(edge 41 "(102,204,120,255)")
(edge 42 "(102,204,120,255)")
(edge 43 "(102,204,120,255)")
(edge 44 "(102,204,120,255)")
(edge 45 "(102,204,120,255)")
(edge 46 "(102,120,204,255)")
(edge 47 "(194,102,204,255)")
(edge 48 "(102,120,204,255)")
(edge 49 "(194,102,204,255)")
(edge 50 "(102,120,204,255)")
(edge 51 "(204,102,102,255)")
(edge 52 "(204,102,102,255)")
(edge 53 "(204,157,102,255)")
(edge 54 "(194,102,204,255)")
(edge 55 "(204,157,102,255)")
(edge 58 "(194,204,102,255)")
(edge 59 "(194,204,102,255)")
(edge 60 "(194,204,102,255)")
(edge 61 "(194,204,102,255)")
(edge 62 "(194,204,102,255)")
(edge 63 "(102,176,204,255)")
(edge 64 "(102,176,204,255)")
(edge 65 "(204,102,102,255)")
(edge 66 "(204,102,102,255)")
(edge 67 "(194,204,102,255)")
(edge 68 "(194,204,102,255)")
(edge 69 "(194,204,102,255)")
(edge 70 "(194,204,102,255)")
(edge 71 "(194,204,102,255)")
(edge 72 "(194,204,102,255)")
(edge 73 "(102,176,204,255)")
(edge 74 "(102,176,204,255)")
(edge 75 "(204,102,157,255)")
(edge 76 "(204,102,157,255)")
(edge 77 "(204,102,157,255)")
(edge 78 "(204,102,157,255)")
(edge 79 "(204,102,142,255)")
(edge 80 "(204,102,142,255)")
(edge 81 "(204,102,157,255)")
(edge 82 "(204,102,157,255)")
(edge 83 "(204,102,157,255)")
(edge 84 "(204,102,157,255)")
(edge 85 "(204,102,157,255)")
(edge 86 "(204,102,157,255)")
(edge 87 "(204,102,157,255)")
(edge 88 "(204,102,157,255)")
(edge 89 "(194,204,102,255)")
(edge 90 "(194,204,102,255)")
(edge 91 "(194,204,102,255)")
(edge 92 "(194,204,102,255)")
(edge 93 "(194,204,102,255)")
(edge 94 "(204,157,102,255)")
(edge 95 "(204,157,102,255)")
(edge 96 "(204,157,102,255)")
(edge 97 "(204,157,102,255)")
(edge 98 "(204,157,102,255)")
(edge 99 "(204,157,102,255)")
(edge 100 "(204,157,102,255)")
(edge 101 "(204,157,102,255)")
(edge 102 "(204,157,102,255)")
(edge 103 "(139,204,102,255)")
(edge 104 "(102,204,183,255)")
(edge 105 "(139,204,102,255)")
(edge 106 "(139,204,102,255)")
(edge 107 "(139,204,102,255)")
(edge 108 "(139,204,102,255)")
(edge 109 "(102,120,204,255)")
(edge 110 "(194,102,204,255)")
(edge 111 "(102,120,204,255)")
(edge 112 "(194,102,204,255)")
(edge 113 "(102,120,204,255)")
(edge 114 "(204,102,102,255)")
(edge 115 "(204,102,102,255)")
(edge 116 "(204,157,102,255)")
(edge 117 "(194,102,204,255)")
(edge 118 "(204,157,102,255)")
(edge 120 "(194,204,102,255)")
(edge 121 "(194,204,102,255)")
(edge 122 "(194,204,102,255)")
(edge 123 "(102,176,204,255)")
(edge 124 "(204,102,102,255)")
(edge 125 "(194,204,102,255)")
(edge 126 "(194,204,102,255)")
(edge 127 "(194,204,102,255)")
(edge 128 "(102,176,204,255)")
(edge 129 "(194,204,102,255)")
(edge 130 "(194,204,102,255)")
(edge 131 "(194,204,102,255)")
(edge 132 "(102,176,204,255)")
(edge 133 "(204,102,102,255)")
(edge 134 "(194,204,102,255)")
(edge 135 "(194,204,102,255)")
(edge 136 "(194,204,102,255)")
(edge 137 "(102,176,204,255)")
(edge 138 "(139,204,102,255)")
(edge 139 "(102,204,183,255)")
(edge 140 "(139,204,102,255)")
(edge 141 "(139,204,102,255)")
(edge 142 "(139,204,102,255)")
(edge 143 "(139,204,102,255)")
(edge 144 "(102,120,204,255)")
(edge 145 "(194,102,204,255)")
(edge 146 "(102,120,204,255)")
(edge 147 "(194,102,204,255)")
(edge 148 "(102,120,204,255)")
(edge 149 "(204,102,102,255)")
(edge 150 "(204,102,102,255)")
(edge 151 "(204,157,102,255)")
(edge 152 "(194,102,204,255)")
(edge 153 "(204,157,102,255)")
(edge 155 "(194,204,102,255)")
(edge 156 "(194,204,102,255)")
(edge 157 "(194,204,102,255)")
(edge 158 "(102,176,204,255)")
(edge 159 "(204,102,102,255)")
(edge 160 "(194,204,102,255)")
(edge 161 "(194,204,102,255)")
(edge 162 "(194,204,102,255)")
(edge 163 "(102,176,204,255)")
(edge 164 "(204,102,157,255)")
(edge 165 "(204,102,157,255)")
(edge 166 "(204,102,142,255)")
(edge 167 "(204,102,157,255)")
(edge 168 "(204,102,157,255)")
(edge 169 "(204,102,157,255)")
(edge 170 "(204,102,157,255)")
(edge 171 "(194,204,102,255)")
(edge 172 "(194,204,102,255)")
(edge 173 "(194,204,102,255)")
(edge 174 "(194,204,102,255)")
(edge 175 "(102,176,204,255)")
(edge 176 "(204,102,102,255)")
(edge 177 "(194,204,102,255)")
(edge 178 "(194,204,102,255)")
(edge 179 "(194,204,102,255)")
(edge 180 "(102,176,204,255)")
(edge 181 "(102,204,120,255)")
(edge 182 "(102,204,120,255)")
(edge 183 "(102,204,120,255)")
(edge 184 "(102,204,120,255)")
(edge 185 "(102,204,120,255)")
(edge 186 "(102,204,120,255)")
(edge 187 "(102,120,204,255)")
(edge 188 "(194,102,204,255)")
(edge 189 "(102,120,204,255)")
(edge 190 "(194,102,204,255)")
(edge 191 "(102,120,204,255)")
(edge 192 "(204,102,102,255)")
(edge 193 "(204,102,102,255)")
(edge 194 "(204,157,102,255)")
(edge 195 "(194,102,204,255)")
(edge 196 "(204,157,102,255)")
(edge 198 "(139,204,102,255)")
(edge 199 "(102,204,120,255)")
(edge 200 "(194,204,102,255)")
(edge 201 "(139,102,204,255)")
(edge 202 "(139,102,204,255)")
(edge 203 "(139,102,204,255)")
(edge 204 "(139,102,204,255)")
(edge 205 "(139,102,204,255)")
(edge 206 "(139,102,204,255)")
(edge 207 "(102,120,204,255)")
(edge 208 "(194,102,204,255)")
(edge 209 "(102,120,204,255)")
(edge 210 "(194,102,204,255)")
(edge 211 "(102,120,204,255)")
(edge 212 "(204,102,102,255)")
(edge 213 "(204,102,102,255)")
(edge 214 "(204,157,102,255)")
(edge 215 "(194,102,204,255)")
(edge 216 "(204,157,102,255)")
(edge 218 "(139,102,204,255)")
(edge 219 "(139,102,204,255)")
(edge 220 "(139,102,204,255)")
(edge 221 "(139,102,204,255)")
(edge 222 "(139,102,204,255)")
(edge 223 "(139,102,204,255)")
(edge 224 "(102,120,204,255)")
(edge 225 "(194,102,204,255)")
(edge 226 "(102,120,204,255)")
(edge 227 "(194,102,204,255)")
(edge 228 "(102,120,204,255)")
(edge 229 "(204,102,102,255)")
(edge 230 "(204,102,102,255)")
(edge 231 "(204,157,102,255)")
(edge 232 "(194,102,204,255)")
(edge 233 "(204,157,102,255)")
(edge 235 "(194,102,204,255)")
(edge 236 "(194,102,204,255)")
(edge 237 "(204,102,102,255)")
(edge 238 "(204,102,102,255)")
(edge 239 "(194,102,204,255)")
(edge 240 "(194,102,204,255)")
(edge 241 "(194,102,204,255)")
(edge 242 "(204,102,102,255)")
(edge 243 "(204,102,102,255)")
(edge 244 "(194,102,204,255)")
(edge 245 "(102,204,120,255)")
(edge 246 "(102,204,120,255)")
(edge 247 "(102,204,120,255)")
(edge 248 "(102,204,120,255)")
(edge 249 "(102,204,120,255)")
(edge 250 "(102,204,120,255)")
(edge 251 "(102,120,204,255)")
(edge 252 "(194,102,204,255)")
(edge 253 "(102,120,204,255)")
(edge 254 "(194,102,204,255)")
(edge 255 "(102,120,204,255)")
(edge 256 "(204,102,102,255)")
(edge 257 "(204,102,102,255)")
(edge 258 "(204,157,102,255)")
(edge 259 "(194,102,204,255)")
(edge 260 "(204,157,102,255)")
(edge 262 "(139,102,204,255)")
(edge 263 "(139,102,204,255)")
(edge 264 "(139,102,204,255)")
(edge 265 "(139,102,204,255)")
(edge 266 "(139,102,204,255)")
(edge 267 "(139,102,204,255)")
(edge 268 "(102,120,204,255)")
(edge 269 "(194,102,204,255)")
(edge 270 "(102,120,204,255)")
(edge 271 "(194,102,204,255)")
(edge 272 "(102,120,204,255)")
(edge 273 "(204,102,102,255)")
(edge 274 "(204,102,102,255)")
(edge 275 "(204,157,102,255)")
(edge 276 "(194,102,204,255)")
(edge 277 "(204,157,102,255)")
(edge 279 "(204,102,157,255)")
(edge 280 "(204,102,157,255)")
(edge 281 "(204,102,142,255)")
(edge 282 "(204,102,157,255)")
(edge 283 "(204,102,157,255)")
(edge 284 "(204,102,157,255)")
(edge 285 "(204,102,157,255)")
(edge 286 "(102,204,176,255)")
(edge 287 "(102,204,176,255)")
(edge 288 "(102,204,176,255)")
(edge 289 "(102,204,176,255)")
(edge 290 "(102,204,176,255)")
(edge 291 "(102,204,176,255)")
(edge 292 "(102,120,204,255)")
(edge 293 "(194,102,204,255)")
(edge 294 "(102,120,204,255)")
(edge 295 "(194,102,204,255)")
(edge 296 "(102,120,204,255)")
(edge 297 "(204,102,102,255)")
(edge 298 "(204,102,102,255)")
(edge 299 "(204,157,102,255)")
(edge 300 "(194,102,204,255)")
(edge 301 "(204,157,102,255)")
(edge 303 "(204,102,157,255)")
(edge 304 "(204,102,157,255)")
(edge 305 "(204,102,142,255)")
(edge 306 "(204,102,157,255)")
(edge 307 "(204,102,157,255)")
(edge 308 "(204,102,157,255)")
(edge 309 "(204,102,157,255)")
(edge 310 "(142,204,102,255)")
(edge 311 "(142,204,102,255)")
(edge 312 "(142,204,102,255)")
(edge 313 "(142,204,102,255)")
(edge 314 "(142,204,102,255)")
(edge 315 "(142,204,102,255)")
(edge 316 "(142,204,102,255)")
(edge 317 "(142,204,102,255)")
(edge 318 "(142,204,102,255)")
(edge 319 "(142,204,102,255)")
(edge 320 "(142,204,102,255)")
(edge 321 "(142,204,102,255)")
(edge 322 "(142,204,102,255)")
(edge 323 "(142,204,102,255)")
(edge 324 "(183,204,102,255)")
(edge 325 "(102,204,142,255)")
(edge 326 "(183,204,102,255)")
(edge 327 "(102,204,142,255)")
(edge 328 "(183,204,102,255)")
(edge 329 "(102,204,142,255)")
(edge 330 "(183,204,102,255)")
(edge 331 "(102,204,142,255)")
(edge 332 "(183,204,102,255)")
(edge 333 "(102,204,142,255)")
(edge 334 "(183,204,102,255)")
(edge 335 "(102,204,142,255)")
(edge 336 "(102,183,204,255)")
(edge 337 "(204,183,102,255)")
(edge 338 "(204,142,102,255)")
(edge 339 "(102,183,204,255)")
(edge 340 "(204,183,102,255)")
(edge 341 "(204,142,102,255)")
(edge 342 "(204,183,102,255)")
(edge 343 "(102,204,142,255)")
(edge 344 "(102,204,142,255)")
(edge 345 "(102,204,142,255)")
(edge 346 "(102,204,142,255)")
(edge 347 "(102,204,142,255)")
(edge 348 "(102,204,142,255)")
(edge 349 "(102,204,142,255)")
(edge 350 "(102,204,142,255)")
(edge 351 "(102,204,142,255)")
(edge 352 "(102,204,142,255)")
(edge 353 "(102,204,142,255)")
(edge 354 "(102,204,142,255)")
(edge 355 "(102,204,142,255)")
(edge 356 "(102,204,142,255)")
(edge 357 "(102,204,142,255)")
(edge 358 "(102,204,142,255)")
(edge 359 "(102,204,142,255)")
(edge 360 "(102,204,142,255)")
(edge 361 "(102,204,142,255)")
(edge 362 "(102,204,142,255)")
(edge 363 "(102,204,142,255)")
(edge 364 "(102,204,142,255)")
(edge 365 "(102,204,142,255)")
(edge 366 "(102,204,142,255)")
(edge 367 "(102,204,142,255)")
(edge 368 "(102,204,142,255)")
(edge 369 "(102,204,142,255)")
(edge 370 "(102,204,142,255)")
(edge 371 "(102,204,183,255)")
(edge 372 "(102,204,142,255)")
(edge 373 "(102,204,183,255)")
(edge 374 "(102,204,183,255)")
(edge 375 "(142,102,204,255)")
(edge 376 "(142,102,204,255)")
(edge 377 "(102,204,183,255)")
(edge 378 "(102,102,204,255)")
(edge 379 "(102,102,204,255)")
(edge 380 "(102,102,204,255)")
(edge 381 "(102,102,204,255)")
(edge 382 "(102,102,204,255)")
(edge 383 "(102,102,204,255)")
(edge 384 "(102,102,204,255)")
(edge 385 "(102,102,204,255)")
(edge 386 "(102,102,204,255)")
(edge 387 "(102,102,204,255)")
(edge 388 "(102,102,204,255)")
(edge 389 "(102,102,204,255)")
(edge 390 "(102,102,204,255)")
(edge 391 "(102,102,204,255)")
(edge 392 "(102,102,204,255)")
(edge 393 "(102,102,204,255)")
(edge 394 "(102,102,204,255)")
(edge 395 "(102,102,204,255)")
(edge 396 "(102,102,204,255)")
(edge 397 "(102,102,204,255)")
(edge 398 "(102,102,204,255)")
(edge 399 "(102,102,204,255)")
(edge 400 "(102,102,204,255)")
(edge 401 "(102,102,204,255)")
(edge 402 "(102,102,204,255)")
(edge 403 "(102,102,204,255)")
(edge 404 "(102,102,204,255)")
(edge 405 "(102,102,204,255)")
(edge 406 "(102,102,204,255)")
(edge 407 "(102,102,204,255)")
(edge 408 "(102,102,204,255)")
(edge 409 "(102,102,204,255)")
(edge 410 "(102,102,204,255)")
(edge 411 "(102,102,204,255)")
(edge 412 "(102,102,204,255)")
(edge 413 "(102,204,183,255)")
(edge 414 "(102,204,183,255)")
(edge 415 "(102,204,183,255)")
(edge 416 "(102,204,183,255)")
(edge 417 "(102,204,183,255)")
(edge 418 "(102,204,183,255)")
(edge 419 "(102,204,183,255)")
(edge 420 "(102,204,183,255)")
(edge 421 "(102,204,183,255)")
(edge 422 "(102,204,183,255)")
(edge 423 "(102,204,183,255)")
(edge 424 "(102,204,183,255)")
(edge 425 "(102,204,183,255)")
(edge 426 "(102,204,183,255)")
(edge 427 "(102,204,183,255)")
(edge 428 "(102,183,204,255)")
(edge 429 "(102,183,204,255)")
(edge 430 "(102,183,204,255)")
(edge 431 "(102,183,204,255)")
(edge 432 "(102,183,204,255)")
(edge 433 "(102,183,204,255)")
(edge 434 "(102,183,204,255)")
(edge 435 "(102,183,204,255)")
(edge 436 "(102,183,204,255)")
(edge 437 "(102,183,204,255)")
(edge 438 "(102,183,204,255)")
(edge 439 "(102,183,204,255)")
(edge 440 "(102,183,204,255)")
(edge 441 "(102,183,204,255)")
(edge 442 "(102,183,204,255)")
(edge 443 "(183,204,102,255)")
(edge 444 "(183,204,102,255)")
(edge 445 "(183,204,102,255)")
(edge 446 "(183,204,102,255)")
(edge 447 "(183,204,102,255)")
(edge 448 "(183,204,102,255)")
(edge 449 "(183,204,102,255)")
(edge 450 "(183,204,102,255)")
(edge 451 "(183,204,102,255)")
(edge 452 "(183,204,102,255)")
(edge 453 "(183,204,102,255)")
(edge 454 "(183,204,102,255)")
(edge 455 "(183,204,102,255)")
(edge 456 "(183,204,102,255)")
(edge 457 "(204,102,102,255)")
(edge 458 "(204,102,102,255)")
(edge 459 "(204,102,102,255)")
(edge 460 "(204,102,102,255)")
(edge 461 "(204,102,102,255)")
(edge 462 "(204,102,102,255)")
(edge 463 "(204,102,102,255)")
(edge 464 "(204,102,102,255)")
(edge 465 "(204,102,102,255)")
(edge 466 "(204,102,102,255)")
(edge 467 "(204,102,102,255)")
(edge 468 "(204,102,102,255)")
(edge 469 "(204,102,102,255)")
(edge 470 "(204,102,102,255)")
(edge 471 "(204,102,102,255)")
(edge 472 "(204,102,102,255)")
(edge 473 "(204,102,102,255)")
(edge 474 "(204,102,102,255)")
(edge 475 "(204,102,102,255)")
(edge 476 "(204,102,102,255)")
(edge 477 "(204,102,102,255)")
(edge 478 "(204,102,102,255)")
(edge 479 "(204,102,102,255)")
(edge 480 "(204,102,102,255)")
(edge 481 "(204,102,102,255)")
(edge 482 "(204,102,102,255)")
(edge 483 "(204,102,102,255)")
(edge 484 "(204,102,102,255)")
(edge 485 "(204,102,102,255)")
(edge 486 "(204,102,102,255)")
(edge 487 "(204,102,102,255)")
(edge 488 "(204,102,102,255)")
(edge 489 "(204,102,102,255)")
(edge 490 "(204,102,102,255)")
(edge 491 "(204,102,102,255)")
(edge 492 "(204,102,102,255)")
(edge 493 "(204,102,102,255)")
(edge 494 "(204,102,102,255)")
(edge 495 "(204,102,102,255)")
(edge 496 "(204,102,102,255)")
(edge 497 "(204,102,142,255)")
(edge 498 "(204,102,142,255)")
(edge 499 "(204,102,142,255)")
(edge 500 "(204,102,142,255)")
(edge 501 "(204,102,142,255)")
(edge 502 "(204,102,142,255)")
(edge 503 "(204,102,142,255)")
(edge 504 "(204,102,142,255)")
(edge 505 "(204,102,142,255)")
(edge 506 "(204,102,142,255)")
(edge 507 "(204,102,142,255)")
(edge 508 "(204,102,142,255)")
(edge 509 "(204,102,142,255)")
(edge 510 "(204,102,142,255)")
(edge 511 "(204,102,142,255)")
(edge 512 "(204,102,142,255)")
(edge 513 "(204,102,142,255)")
(edge 514 "(204,102,142,255)")
(edge 515 "(204,102,142,255)")
(edge 516 "(204,102,142,255)")
(edge 517 "(204,102,142,255)")
(edge 518 "(204,102,142,255)")
(edge 519 "(204,102,142,255)")
(edge 520 "(183,102,204,255)")
(edge 521 "(183,102,204,255)")
(edge 522 "(183,102,204,255)")
(edge 523 "(183,102,204,255)")
(edge 524 "(183,102,204,255)")
(edge 525 "(183,102,204,255)")
(edge 526 "(183,102,204,255)")
(edge 527 "(183,102,204,255)")
(edge 528 "(183,102,204,255)")
(edge 529 "(183,102,204,255)")
(edge 530 "(183,102,204,255)")
(edge 531 "(183,102,204,255)")
(edge 532 "(183,102,204,255)")
(edge 533 "(183,102,204,255)")
(edge 534 "(183,102,204,255)")
(edge 535 "(183,102,204,255)")
(edge 536 "(183,102,204,255)")
(edge 537 "(183,102,204,255)")
(edge 538 "(183,102,204,255)")
(edge 539 "(183,102,204,255)")
(edge 540 "(183,102,204,255)")
(edge 541 "(183,102,204,255)")
(edge 542 "(183,102,204,255)")
(edge 543 "(183,102,204,255)")
(edge 544 "(183,102,204,255)")
(edge 545 "(183,102,204,255)")
(edge 546 "(183,102,204,255)")
(edge 547 "(183,102,204,255)")
(edge 548 "(183,102,204,255)")
(edge 549 "(183,102,204,255)")
(edge 550 "(183,102,204,255)")
(edge 551 "(183,102,204,255)")
(edge 552 "(183,102,204,255)")
(edge 553 "(183,102,204,255)")
(edge 554 "(183,102,204,255)")
(edge 555 "(183,102,204,255)")
(edge 556 "(183,102,204,255)")
(edge 557 "(183,102,204,255)")
(edge 558 "(183,102,204,255)")
(edge 559 "(183,102,204,255)")
(edge 560 "(183,102,204,255)")
(edge 561 "(183,102,204,255)")
(edge 562 "(183,102,204,255)")
(edge 563 "(204,142,102,255)")
(edge 564 "(204,142,102,255)")
(edge 565 "(204,142,102,255)")
(edge 566 "(204,142,102,255)")
(edge 567 "(204,142,102,255)")
(edge 568 "(204,142,102,255)")
(edge 569 "(204,142,102,255)")
(edge 570 "(204,142,102,255)")
(edge 571 "(204,142,102,255)")
(edge 572 "(204,142,102,255)")
(edge 573 "(204,142,102,255)")
(edge 574 "(204,142,102,255)")
(edge 575 "(204,142,102,255)")
(edge 576 "(204,142,102,255)")
(edge 577 "(204,142,102,255)")
(edge 578 "(102,204,102,255)")
(edge 579 "(102,204,102,255)")
(edge 580 "(102,204,102,255)")
(edge 581 "(102,204,102,255)")
(edge 582 "(102,204,102,255)")
(edge 583 "(102,204,102,255)")
(edge 584 "(102,204,102,255)")
(edge 585 "(102,204,102,255)")
(edge 586 "(102,204,102,255)")
(edge 587 "(102,204,102,255)")
(edge 588 "(102,204,102,255)")
(edge 589 "(102,204,102,255)")
(edge 590 "(102,204,102,255)")
(edge 591 "(102,204,102,255)")
(edge 592 "(102,204,102,255)")
(edge 593 "(102,204,102,255)")
(edge 594 "(102,204,102,255)")
(edge 595 "(102,204,102,255)")
(edge 596 "(102,204,102,255)")
(edge 597 "(102,204,102,255)")
(edge 598 "(102,204,102,255)")
(edge 599 "(102,204,102,255)")
(edge 600 "(102,204,102,255)")
(edge 601 "(102,204,102,255)")
(edge 602 "(102,204,102,255)")
(edge 603 "(102,204,102,255)")
(edge 604 "(102,204,102,255)")
(edge 605 "(102,204,102,255)")
(edge 606 "(102,204,102,255)")
(edge 607 "(102,204,102,255)")
(edge 608 "(102,204,102,255)")
(edge 609 "(102,142,204,255)")
(edge 610 "(102,142,204,255)")
(edge 611 "(102,142,204,255)")
(edge 612 "(102,142,204,255)")
(edge 613 "(102,142,204,255)")
(edge 614 "(102,142,204,255)")
(edge 615 "(102,142,204,255)")
(edge 616 "(102,142,204,255)")
(edge 617 "(102,142,204,255)")
(edge 618 "(102,142,204,255)")
(edge 619 "(102,142,204,255)")
(edge 620 "(102,142,204,255)")
(edge 621 "(102,142,204,255)")
(edge 622 "(102,142,204,255)")
(edge 623 "(102,142,204,255)")
(edge 624 "(102,142,204,255)")
(edge 625 "(102,142,204,255)")
(edge 626 "(102,142,204,255)")
(edge 627 "(102,142,204,255)")
(edge 628 "(102,142,204,255)")
(edge 629 "(102,142,204,255)")
(edge 630 "(102,142,204,255)")
(edge 631 "(102,142,204,255)")
(edge 632 "(102,142,204,255)")
(edge 633 "(102,142,204,255)")
(edge 634 "(102,142,204,255)")
(edge 635 "(102,142,204,255)")
(edge 636 "(102,142,204,255)")
(edge 637 "(102,142,204,255)")
(edge 638 "(102,142,204,255)")
(edge 639 "(102,142,204,255)")
(edge 640 "(102,142,204,255)")
(edge 641 "(102,142,204,255)")
(edge 642 "(102,142,204,255)")
(edge 643 "(102,142,204,255)")
(edge 644 "(204,102,102,255)")
(edge 645 "(204,102,142,255)")
(edge 646 "(204,102,183,255)")
(edge 647 "(183,204,102,255)")
(edge 648 "(183,102,204,255)")
(edge 649 "(204,142,102,255)")
(edge 650 "(102,142,204,255)")
(edge 651 "(142,204,102,255)")
(edge 652 "(204,102,183,255)")
(edge 653 "(204,102,183,255)")
(edge 654 "(142,102,204,255)")
(edge 655 "(204,102,183,255)")
(edge 656 "(204,183,102,255)")
(edge 657 "(102,183,204,255)")
(edge 658 "(142,102,204,255)")
(edge 659 "(204,102,183,255)")
(edge 660 "(204,183,102,255)")
(edge 661 "(204,102,183,255)")
(edge 663 "(204,183,102,255)")
(edge 664 "(102,102,204,255)")
(edge 665 "(204,102,102,255)")
(edge 666 "(142,204,102,255)")
(edge 667 "(102,204,183,255)")
(edge 668 "(204,102,142,255)")
(edge 670 "(102,204,102,255)")
(edge 671 "(204,102,183,255)")
(edge 672 "(204,102,183,255)")
(edge 673 "(204,102,183,255)")
(edge 674 "(204,102,183,255)")
(edge 675 "(204,102,183,255)")
(edge 676 "(204,102,183,255)")
(edge 677 "(204,102,183,255)")
(edge 678 "(204,102,183,255)")
(edge 679 "(204,102,183,255)")
(edge 680 "(204,102,183,255)")
(edge 681 "(204,183,102,255)")
(edge 682 "(204,183,102,255)")
(edge 683 "(204,183,102,255)")
(edge 684 "(204,183,102,255)")
(edge 685 "(204,183,102,255)")
(edge 686 "(204,183,102,255)")
(edge 687 "(204,183,102,255)")
(edge 688 "(204,183,102,255)")
(edge 689 "(204,183,102,255)")
(edge 690 "(204,183,102,255)")
(edge 691 "(204,183,102,255)")
(edge 692 "(204,183,102,255)")
(edge 693 "(204,183,102,255)")
(edge 694 "(204,183,102,255)")
(edge 695 "(142,102,204,255)")
(edge 696 "(142,102,204,255)")
(edge 697 "(142,102,204,255)")
(edge 698 "(142,102,204,255)")
(edge 699 "(142,102,204,255)")
(edge 700 "(142,102,204,255)")
(edge 701 "(142,102,204,255)")
(edge 702 "(142,102,204,255)")
(edge 703 "(102,204,120,255)")
(edge 704 "(102,204,120,255)")
(edge 705 "(102,204,120,255)")
(edge 706 "(102,204,120,255)")
(edge 707 "(102,204,120,255)")
(edge 708 "(102,204,120,255)")
(edge 709 "(102,204,120,255)")
(edge 710 "(102,204,120,255)")
(edge 711 "(102,204,120,255)")
(edge 712 "(102,204,120,255)")
(edge 713 "(102,204,120,255)")
(edge 714 "(102,204,120,255)")
(edge 715 "(102,204,120,255)")
(edge 716 "(102,204,120,255)")
(edge 717 "(102,204,120,255)")
(edge 718 "(102,204,120,255)")
(edge 719 "(102,204,120,255)")
(edge 720 "(102,204,120,255)")
(edge 721 "(102,204,120,255)")
(edge 722 "(102,204,120,255)")
(edge 723 "(102,204,120,255)")
(edge 724 "(102,204,120,255)")
(edge 725 "(102,204,120,255)")
(edge 726 "(102,204,120,255)")
(edge 727 "(102,204,120,255)")
(edge 728 "(102,204,120,255)")
(edge 729 "(204,102,102,255)")
(edge 730 "(204,102,102,255)")
(edge 731 "(204,102,102,255)")
(edge 732 "(204,102,102,255)")
(edge 733 "(204,102,102,255)")
(edge 734 "(204,102,102,255)")
(edge 735 "(204,102,102,255)")
(edge 736 "(204,102,102,255)")
(edge 737 "(204,102,102,255)")
(edge 738 "(204,102,102,255)")
(edge 739 "(204,102,102,255)")
(edge 740 "(204,102,102,255)")
(edge 741 "(204,102,102,255)")
(edge 742 "(204,102,102,255)")
(edge 743 "(204,102,102,255)")
(edge 744 "(204,102,102,255)")
(edge 745 "(204,102,102,255)")
(edge 746 "(204,102,102,255)")
(edge 747 "(204,102,102,255)")
(edge 748 "(204,102,102,255)")
(edge 749 "(204,102,102,255)")
(edge 750 "(204,102,102,255)")
(edge 751 "(204,102,102,255)")
(edge 752 "(204,102,102,255)")
(edge 753 "(204,102,102,255)")
(edge 754 "(204,102,102,255)")
(edge 755 "(204,102,102,255)")
(edge 756 "(204,102,102,255)")
(edge 757 "(204,102,102,255)")
(edge 758 "(204,102,102,255)")
(edge 759 "(204,102,102,255)")
(edge 760 "(102,176,204,255)")
(edge 761 "(102,176,204,255)")
(edge 762 "(102,204,176,255)")
(edge 763 "(139,102,204,255)")
(edge 764 "(102,204,176,255)")
(edge 765 "(139,102,204,255)")
(edge 766 "(102,204,176,255)")
(edge 767 "(139,102,204,255)")
(edge 768 "(102,204,176,255)")
(edge 769 "(139,102,204,255)")
(edge 770 "(102,204,176,255)")
(edge 771 "(139,102,204,255)")
(edge 772 "(102,204,176,255)")
(edge 773 "(139,102,204,255)")
(edge 774 "(102,176,204,255)")
(edge 775 "(102,176,204,255)")
(edge 776 "(102,176,204,255)")
(edge 777 "(102,176,204,255)")
(edge 778 "(102,176,204,255)")
(edge 779 "(102,176,204,255)")
(edge 780 "(102,176,204,255)")
(edge 781 "(102,176,204,255)")
(edge 782 "(102,176,204,255)")
(edge 783 "(102,176,204,255)")
(edge 784 "(102,176,204,255)")
(edge 785 "(102,176,204,255)")
(edge 786 "(102,176,204,255)")
(edge 787 "(102,176,204,255)")
(edge 788 "(102,176,204,255)")
(edge 789 "(102,120,204,255)")
(edge 790 "(102,120,204,255)")
(edge 791 "(102,120,204,255)")
(edge 792 "(102,120,204,255)")
(edge 793 "(102,120,204,255)")
(edge 794 "(102,120,204,255)")
(edge 795 "(102,120,204,255)")
(edge 796 "(102,120,204,255)")
(edge 797 "(102,120,204,255)")
(edge 798 "(102,120,204,255)")
(edge 799 "(102,120,204,255)")
(edge 800 "(102,120,204,255)")
(edge 801 "(102,120,204,255)")
(edge 802 "(102,120,204,255)")
(edge 803 "(102,120,204,255)")
(edge 804 "(102,120,204,255)")
(edge 805 "(102,120,204,255)")
(edge 806 "(102,120,204,255)")
(edge 807 "(102,120,204,255)")
(edge 808 "(102,120,204,255)")
(edge 809 "(102,120,204,255)")
(edge 810 "(102,120,204,255)")
(edge 811 "(102,120,204,255)")
(edge 812 "(102,120,204,255)")
(edge 813 "(102,120,204,255)")
(edge 814 "(102,120,204,255)")
(edge 815 "(102,120,204,255)")
(edge 816 "(102,120,204,255)")
(edge 817 "(102,120,204,255)")
(edge 818 "(102,120,204,255)")
(edge 819 "(102,120,204,255)")
(edge 820 "(102,120,204,255)")
(edge 821 "(102,120,204,255)")
(edge 822 "(102,120,204,255)")
(edge 823 "(102,120,204,255)")
(edge 824 "(204,102,157,255)")
(edge 825 "(194,204,102,255)")
(edge 826 "(204,157,102,255)")
(edge 827 "(139,204,102,255)")
(edge 828 "(194,204,102,255)")
(edge 829 "(204,102,157,255)")
(edge 830 "(102,204,120,255)")
(edge 831 "(204,157,102,255)")
(edge 832 "(204,102,102,255)")
(edge 833 "(139,204,102,255)")
(edge 834 "(204,157,102,255)")
(edge 835 "(194,204,102,255)")
(edge 836 "(204,102,157,255)")
(edge 837 "(139,204,102,255)")
(edge 838 "(194,204,102,255)")
(edge 839 "(204,102,157,255)")
(edge 840 "(139,204,102,255)")
(edge 842 "(204,102,157,255)")
(edge 843 "(194,204,102,255)")
(edge 844 "(139,204,102,255)")
(edge 845 "(194,204,102,255)")
(edge 846 "(204,102,157,255)")
(edge 847 "(194,204,102,255)")
(edge 848 "(194,204,102,255)")
(edge 849 "(194,204,102,255)")
(edge 850 "(204,102,157,255)")
(edge 851 "(194,204,102,255)")
(edge 852 "(204,102,157,255)")
(edge 853 "(194,204,102,255)")
(edge 854 "(204,102,157,255)")
(edge 855 "(194,204,102,255)")
(edge 856 "(204,102,157,255)")
(edge 857 "(194,204,102,255)")
(edge 858 "(204,102,157,255)")
(edge 859 "(204,102,157,255)")
(edge 860 "(194,204,102,255)")
(edge 861 "(204,157,102,255)")
(edge 862 "(204,157,102,255)")
(edge 863 "(204,157,102,255)")
(edge 864 "(204,157,102,255)")
(edge 865 "(204,157,102,255)")
(edge 866 "(204,157,102,255)")
(edge 867 "(204,157,102,255)")
(edge 868 "(204,157,102,255)")
(edge 869 "(204,157,102,255)")
(edge 870 "(204,157,102,255)")
(edge 871 "(204,157,102,255)")
(edge 872 "(204,157,102,255)")
(edge 873 "(204,157,102,255)")
(edge 874 "(204,157,102,255)")
(edge 875 "(204,157,102,255)")
(edge 876 "(204,157,102,255)")
(edge 877 "(204,157,102,255)")
(edge 878 "(204,157,102,255)")
(edge 879 "(204,157,102,255)")
(edge 880 "(204,157,102,255)")
(edge 881 "(204,157,102,255)")
(edge 882 "(204,157,102,255)")
(edge 883 "(204,157,102,255)")
(edge 884 "(204,157,102,255)")
(edge 885 "(204,157,102,255)")
(edge 886 "(204,157,102,255)")
(edge 887 "(204,157,102,255)")
(edge 888 "(204,157,102,255)")
(edge 889 "(204,157,102,255)")
(edge 890 "(204,157,102,255)")
(edge 891 "(204,157,102,255)")
(edge 892 "(204,157,102,255)")
(edge 893 "(204,157,102,255)")
(edge 894 "(194,102,204,255)")
(edge 895 "(194,102,204,255)")
(edge 896 "(194,102,204,255)")
(edge 897 "(194,102,204,255)")
(edge 898 "(194,102,204,255)")
(edge 899 "(194,102,204,255)")
(edge 900 "(194,102,204,255)")
(edge 901 "(194,102,204,255)")
(edge 902 "(194,102,204,255)")
(edge 903 "(194,102,204,255)")
(edge 904 "(194,102,204,255)")
(edge 905 "(194,102,204,255)")
(edge 906 "(194,102,204,255)")
(edge 907 "(194,102,204,255)")
(edge 908 "(194,102,204,255)")
(edge 909 "(194,102,204,255)")
(edge 910 "(194,102,204,255)")
(edge 911 "(194,102,204,255)")
(edge 912 "(194,102,204,255)")
(edge 913 "(194,102,204,255)")
(edge 914 "(194,102,204,255)")
(edge 915 "(194,102,204,255)")
(edge 916 "(194,102,204,255)")
(edge 917 "(194,102,204,255)")
(edge 918 "(194,102,204,255)")
(edge 919 "(194,102,204,255)")
(edge 920 "(194,102,204,255)")
(edge 921 "(194,102,204,255)")
(edge 922 "(194,102,204,255)")
(edge 923 "(194,102,204,255)")
(edge 924 "(194,102,204,255)")
(edge 925 "(194,102,204,255)")
(edge 926 "(194,102,204,255)")
(edge 927 "(194,102,204,255)")
(edge 928 "(194,102,204,255)")
(edge 929 "(194,102,204,255)")
(edge 930 "(194,102,204,255)")
(edge 931 "(194,102,204,255)")
(edge 932 "(194,102,204,255)")
(edge 933 "(194,102,204,255)")
(edge 934 "(194,102,204,255)")
(edge 935 "(194,102,204,255)")
(edge 936 "(194,102,204,255)")
(edge 937 "(194,204,102,255)")
(edge 938 "(194,204,102,255)")
(edge 939 "(194,204,102,255)")
(edge 940 "(194,204,102,255)")
(edge 941 "(194,204,102,255)")
(edge 942 "(194,204,102,255)")
(edge 943 "(194,204,102,255)")
(edge 944 "(194,204,102,255)")
(edge 945 "(194,204,102,255)")
(edge 946 "(194,204,102,255)")
(edge 947 "(194,204,102,255)")
(edge 948 "(194,204,102,255)")
(edge 949 "(194,204,102,255)")
(edge 950 "(194,204,102,255)")
(edge 951 "(194,204,102,255)")
(edge 952 "(194,204,102,255)")
(edge 953 "(194,204,102,255)")
(edge 954 "(194,204,102,255)")
(edge 955 "(194,204,102,255)")
(edge 956 "(194,204,102,255)")
(edge 957 "(194,204,102,255)")
(edge 958 "(194,204,102,255)")
(edge 959 "(194,204,102,255)")
(edge 960 "(194,204,102,255)")
(edge 961 "(194,204,102,255)")
(edge 962 "(194,204,102,255)")
(edge 963 "(194,204,102,255)")
(edge 964 "(194,204,102,255)")
(edge 965 "(194,204,102,255)")
(edge 966 "(194,204,102,255)")
(edge 967 "(194,204,102,255)")
(edge 968 "(194,204,102,255)")
(edge 969 "(194,204,102,255)")
(edge 970 "(194,204,102,255)")
(edge 971 "(102,204,176,255)")
(edge 972 "(102,204,176,255)")
(edge 973 "(102,204,176,255)")
(edge 974 "(102,204,176,255)")
(edge 975 "(102,204,176,255)")
(edge 976 "(102,204,176,255)")
(edge 977 "(102,204,176,255)")
(edge 978 "(102,204,176,255)")
(edge 979 "(102,204,176,255)")
(edge 980 "(102,204,176,255)")
(edge 981 "(102,204,176,255)")
(edge 982 "(102,204,176,255)")
(edge 983 "(102,204,176,255)")
(edge 984 "(102,204,176,255)")
(edge 985 "(102,204,120,255)")
(edge 986 "(102,176,204,255)")
(edge 987 "(102,120,204,255)")
(edge 988 "(194,102,204,255)")
(edge 989 "(102,204,176,255)")
(edge 990 "(204,102,157,255)")
(edge 991 "(204,102,157,255)")
(edge 992 "(204,102,157,255)")
(edge 993 "(204,102,157,255)")
(edge 994 "(204,102,157,255)")
(edge 995 "(204,102,157,255)")
(edge 996 "(204,102,157,255)")
(edge 997 "(204,102,157,255)")
(edge 998 "(204,102,157,255)")
(edge 999 "(204,102,157,255)")
(edge 1000 "(204,102,157,255)")
(edge 1001 "(204,102,157,255)")
(edge 1002 "(204,102,157,255)")
(edge 1003 "(204,102,157,255)")
(edge 1004 "(204,102,157,255)")
(edge 1005 "(204,102,157,255)")
(edge 1006 "(204,102,157,255)")
(edge 1007 "(204,102,157,255)")
(edge 1008 "(204,102,157,255)")
(edge 1009 "(204,102,157,255)")
(edge 1010 "(204,102,157,255)")
(edge 1011 "(204,102,157,255)")
(edge 1012 "(204,102,157,255)")
(edge 1013 "(139,204,102,255)")
(edge 1014 "(139,204,102,255)")
(edge 1015 "(139,204,102,255)")
(edge 1016 "(139,204,102,255)")
(edge 1017 "(139,204,102,255)")
(edge 1018 "(139,204,102,255)")
(edge 1019 "(139,204,102,255)")
(edge 1020 "(139,204,102,255)")
(edge 1021 "(139,204,102,255)")
(edge 1022 "(139,204,102,255)")
(edge 1023 "(139,204,102,255)")
(edge 1024 "(139,204,102,255)")
(edge 1025 "(139,204,102,255)")
(edge 1026 "(139,204,102,255)")
(edge 1027 "(139,204,102,255)")
(edge 1028 "(139,204,102,255)")
(edge 1029 "(139,204,102,255)")
(edge 1030 "(139,204,102,255)")
(edge 1031 "(139,102,204,255)")
(edge 1032 "(139,102,204,255)")
(edge 1033 "(139,102,204,255)")
(edge 1034 "(139,102,204,255)")
(edge 1035 "(139,102,204,255)")
(edge 1036 "(139,102,204,255)")
(edge 1037 "(139,102,204,255)")
(edge 1038 "(139,102,204,255)")
(edge 1039 "(139,102,204,255)")
(edge 1040 "(139,102,204,255)")
(edge 1041 "(139,102,204,255)")
(edge 1042 "(139,102,204,255)")
(edge 1043 "(139,102,204,255)")
(edge 1044 "(139,102,204,255)")
(edge 1045 "(139,102,204,255)")
(edge 1046 "(139,102,204,255)")
(edge 1047 "(139,102,204,255)")
(edge 1048 "(139,102,204,255)")
(edge 1049 "(139,102,204,255)")
(edge 1050 "(139,102,204,255)")
(edge 1051 "(139,102,204,255)")
(edge 1052 "(139,102,204,255)")
(edge 1053 "(139,102,204,255)")
(edge 1054 "(139,102,204,255)")
(edge 1055 "(139,102,204,255)")
(edge 1056 "(139,102,204,255)")
(edge 1057 "(139,102,204,255)")
(edge 1058 "(139,102,204,255)")
(edge 1059 "(139,204,102,255)")
(edge 1060 "(139,102,204,255)")
(edge 1061 "(102,204,183,255)")
)
(property  0 string "viewFont"
(default "TulipBitmapDir/font.ttf" "TulipBitmapDir/font.ttf")
)
(property  0 int "viewFontSize"
(default "18" "18")
)
(property  0 string "viewLabel"
(default "" "")
(node 0 "(S)-3-hydroxydecanoyl-CoA")
(node 1 "C47H86N-\n7O18P3S")
(node 2 "(S)-3-hydroxylauroyl-CoA")
(node 3 "(S)-3-hydroxypalmitoyl-CoA")
(node 4 "(S)-3-hydroxytetradecanoyl-CoA")
(node 5 "3-hydroxyoctadecanoyl-CoA")
(node 6 "C31H52N-\n7O18P3S")
(node 7 "3-oxohexacosanoyl-CoA")
(node 8 "3-oxolauroyl-CoA")
(node 9 "3-oxooctadecanoyl-CoA")
(node 10 "3-oxopalmitoyl-CoA")
(node 11 "C35H60N-\n7O18P3S")
(node 12 "AcCoA")
(node 13 "AMP")
(node 14 "atp")
(node 15 "cerotate")
(node 16 "CoA")
(node 17 "decanoate")
(node 18 "decanoyl-CoA")
(node 19 "PPi")
(node 20 "hexacosanoyl-CoA")
(node 21 "hexadec-2-enoyl-CoA")
(node 22 "H2O2")
(node 23 "laurate")
(node 24 "lauroyl-CoA")
(node 25 "C24H48O2")
(node 26 "myristate")
(node 27 "myristoleate")
(node 28 "myristoyl-CoA")
(node 29 "NAD")
(node 30 "NADH")
(node 31 "C39H66N-\n7O17P3S")
(node 32 "octanoate")
(node 33 "octanoyl-CoA")
(node 34 "oleoyl-CoA")
(node 35 "O2")
(node 36 "palmitate")
(node 37 "palmitoleate")
(node 38 "palmitoyl-CoA")
(node 39 "stearate")
(node 40 "C18:0-\nCoA")
(node 41 "C24:0-\nCoA")
(node 42 "tetradecenoyl-CoA")
(node 43 "trans-dec-2-enoyl-CoA")
(node 44 "trans-dodec-2-enoyl-CoA")
(node 45 "trans-hexacos-2-enoyl-CoA")
(node 46 "trans-octadec-2-enoyl-CoA")
(node 47 "trans-tetradec-2-enoyl-CoA")
(node 48 "H")
(node 49 "H2O")
(node 50 "butyrate")
(node 51 "4:0-CoA")
(node 52 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxydecanoyl-CoA)")
(node 53 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxydodecanoyl-CoA)")
(node 54 "3-hydro-\nxyacyl-\nCoA dehy-\ndratase")
(node 55 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxyhexadecanoyl-CoA)")
(node 56 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxyoctadecanoyl-CoA)")
(node 57 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxytetradecanoyl-CoA)")
(node 58 "3-hydrox-\nyacyl-CoA\ndehydrog-\nenase")
(node 59 "3-hydroxyacyl-CoA\ndehydrogenase\n(3-oxodecanoyl-CoA)")
(node 60 "3-hydrox-\nyacyl-CoA\ndehydrog-\nenase")
(node 61 "3-hydroxyacyl-CoA\ndehydrogenase\n(3-oxohexadecanoyl-CoA)")
(node 62 "3-hydroxyacyl-CoA\ndehydrogenase\n(3-oxooctadecanoyl-CoA)")
(node 63 "3-hydrox-\nyacyl-CoA\ndehydrog-\nenase")
(node 64 "acetyl-CoA\nacyltransferase\n(hexadecanoyl-CoA)")
(node 65 "acetyl-\nCoA acyl-\ntransferase")
(node 66 "acetyl-CoA\nacyltransferase\n(tetradecanoyl-CoA)")
(node 67 "acetyl-\nCoAC-\nacetylt-\nransferase")
(node 68 "acetyl-\nCoAC-\nacetylt-\nransferase")
(node 69 "acetyl-CoA\nC-acyltransferase\n(decanoyl-CoA)")
(node 70 "acyl-CoA\noxidase\n(decanoyl-CoA)")
(node 71 "acyl-CoA\noxidase\n(dodecanoyl-CoA)")
(node 72 "acyl-CoA\noxidase\n(hexacanoyl-CoA)")
(node 73 "acyl-CoA\noxidase\n(hexadecanoyl-CoA)")
(node 74 "acyl-\nCoA oxid-\nase")
(node 75 "acyl-CoA\noxidase\n(tetradecanoyl-CoA)")
(node 76 "fatty\nacid\noxidation")
(node 77 "fatty\nacid\noxidation")
(node 78 "fatty\nacid\noxidation")
(node 79 "fatty\nacid\noxidation")
(node 80 "fatty\nacid\noxidation")
(node 81 "fatty\nacid\noxidation")
(node 82 "fatty\nacid\noxidation")
(node 83 "fatty\nacid oxi-\ndation")
(node 84 "fatty\nacid\noxidation")
(node 85 "fatty\nacid oxi-\ndation")
(node 86 "fatty\nacid oxi-\ndation")
(node 87 "fatty-acid--CoA\nligase\n(decanoate)")
(node 88 "fatty-acid--CoA\nligase\n(dodecanoate)")
(node 89 "fatty-\nacid-\n-CoA lig-\nase")
(node 90 "fatty-acid--CoA\nligase\n(hexadecenoate)")
(node 91 "fatty-\nacid-\n-CoA lig-\nase")
(node 92 "fatty-acid--CoA\nligase\n(n-C26:0)")
(node 93 "fatty-acid--CoA\nligase\n(octanoate)")
(node 94 "fatty-acid--CoA\nligase\n(tetradecanoate)")
(node 95 "fatty-acid--CoA\nligase\n(tetradecenoate)")
(node 96 "peroxisomal\nacyl-CoA\nthioesterase")
(node 97 "peroxisomal\nacyl-CoA\nthioesterase")
(node 98 "peroxiso-\nmalacyl-\nCoA thioe-\nsterase")
(node 99 "peroxiso-\nmalacyl-\nCoA thioe-\nsterase")
(node 100 "peroxisomal\nacyl-CoA\nthioesterase")
(node 101 "peroxiso-\nmalacyl-\nCoA thioe-\nsterase")
(node 102 "peroxisomal\nacyl-CoA\nthioesterase")
(node 103 "fatty-\nacid-\n-CoA lig-\nase")
(node 104 "fatty\nacid oxi-\ndation")
(node 105 "acetyl-CoA")
(node 106 "AcCoA")
(node 107 "acetyl-CoA")
(node 108 "AcCoA")
(node 109 "AcCoA")
(node 110 "acetyl-CoA")
(node 111 "acetyl-CoA")
(node 112 "acetyl-CoA")
(node 113 "acetyl-CoA")
(node 114 "acetyl-CoA")
(node 115 "acetyl-CoA")
(node 116 "acetyl-CoA")
(node 117 "acetyl-CoA")
(node 118 "AcCoA")
(node 119 "acetyl-CoA")
(node 120 "AcCoA")
(node 121 "AcCoA")
(node 122 "AMP")
(node 123 "AMP")
(node 124 "AMP")
(node 125 "AMP")
(node 126 "AMP")
(node 127 "AMP")
(node 128 "AMP")
(node 129 "AMP")
(node 130 "AMP")
(node 131 "ATP")
(node 132 "ATP")
(node 133 "atp")
(node 134 "ATP")
(node 135 "atp")
(node 136 "ATP")
(node 137 "ATP")
(node 138 "ATP")
(node 139 "ATP")
(node 140 "coenzyme\nA")
(node 141 "CoA")
(node 142 "coenzyme\nA")
(node 143 "CoA")
(node 144 "CoA")
(node 145 "coenzyme\nA")
(node 146 "coenzyme\nA")
(node 147 "coenzyme\nA")
(node 148 "coenzyme\nA")
(node 149 "coenzyme\nA")
(node 150 "coenzyme\nA")
(node 151 "coenzyme\nA")
(node 152 "coenzyme\nA")
(node 153 "CoA")
(node 154 "coenzyme\nA")
(node 155 "CoA")
(node 156 "CoA")
(node 157 "coenzyme\nA")
(node 158 "coenzyme\nA")
(node 159 "CoA")
(node 160 "coenzyme\nA")
(node 161 "CoA")
(node 162 "coenzyme\nA")
(node 163 "coenzyme\nA")
(node 164 "coenzyme\nA")
(node 165 "coenzyme\nA")
(node 166 "coenzyme\nA")
(node 167 "coenzyme\nA")
(node 168 "CoA")
(node 169 "CoA")
(node 170 "coenzyme\nA")
(node 171 "CoA")
(node 172 "coenzyme\nA")
(node 173 "CoA")
(node 174 "pyrophosphate")
(node 175 "pyrophosphate")
(node 176 "PPi")
(node 177 "pyrophosphate")
(node 178 "PPi")
(node 179 "pyrophosphate")
(node 180 "pyrophosphate")
(node 181 "pyrophosphate")
(node 182 "pyrophosphate")
(node 183 "hydrogen\nperoxide")
(node 184 "hydrogen\nperoxide")
(node 185 "hydrogen\nperoxide")
(node 186 "hydrogen\nperoxide")
(node 187 "H2O2")
(node 188 "hydrogen\nperoxide")
(node 189 "hydrogen\nperoxide")
(node 190 "hydrogen\nperoxide")
(node 191 "hydrogen\nperoxide")
(node 192 "hydrogen\nperoxide")
(node 193 "hydrogen\nperoxide")
(node 194 "hydrogen\nperoxide")
(node 195 "hydrogen\nperoxide")
(node 196 "H2O2")
(node 197 "hydrogen\nperoxide")
(node 198 "H2O2")
(node 199 "H2O2")
(node 200 "lauroyl-CoA")
(node 201 "lauroyl-CoA")
(node 202 "lauroyl-CoA")
(node 203 "NAD")
(node 204 "NAD")
(node 205 "NAD")
(node 206 "NAD")
(node 207 "NAD")
(node 208 "NAD")
(node 209 "NAD")
(node 210 "NAD")
(node 211 "NAD")
(node 212 "NAD")
(node 213 "NAD")
(node 214 "NAD")
(node 215 "NAD")
(node 216 "NAD")
(node 217 "NAD")
(node 218 "NAD")
(node 219 "NAD")
(node 220 "NADH")
(node 221 "NADH")
(node 222 "NADH")
(node 223 "NADH")
(node 224 "NADH")
(node 225 "NADH")
(node 226 "NADH")
(node 227 "NADH")
(node 228 "NADH")
(node 229 "NADH")
(node 230 "NADH")
(node 231 "NADH")
(node 232 "NADH")
(node 233 "NADH")
(node 234 "NADH")
(node 235 "NADH")
(node 236 "NADH")
(node 237 "NADP(+)")
(node 238 "NADP(+)")
(node 239 "NADP(+)")
(node 240 "NADP(+)")
(node 241 "NADP(+)")
(node 242 "NADPH")
(node 243 "NADPH")
(node 244 "NADPH")
(node 245 "NADPH")
(node 246 "NADPH")
(node 247 "oxygen")
(node 248 "oxygen")
(node 249 "oxygen")
(node 250 "oxygen")
(node 251 "O2")
(node 252 "oxygen")
(node 253 "oxygen")
(node 254 "oxygen")
(node 255 "oxygen")
(node 256 "oxygen")
(node 257 "oxygen")
(node 258 "oxygen")
(node 259 "oxygen")
(node 260 "O2")
(node 261 "oxygen")
(node 262 "O2")
(node 263 "O2")
(node 264 "H")
(node 265 "H+")
(node 266 "H")
(node 267 "H+")
(node 268 "H+")
(node 269 "H")
(node 270 "H+")
(node 271 "H+")
(node 272 "H+")
(node 273 "H+")
(node 274 "H+")
(node 275 "H+")
(node 276 "H+")
(node 277 "H")
(node 278 "H+")
(node 279 "H")
(node 280 "H")
(node 281 "H+")
(node 282 "H+")
(node 283 "H")
(node 284 "H")
(node 285 "H+")
(node 286 "H")
(node 287 "H+")
(node 288 "H2O")
(node 289 "H2O")
(node 290 "H2O")
(node 291 "H2O")
(node 292 "H2O")
(node 293 "H2O")
(node 294 "H2O")
(node 295 "H2O")
(node 296 "H2O")
(node 297 "H2O")
(node 298 "H2O")
(node 299 "H2O")
(node 300 "H2O")
(node 301 "H2O")
(node 302 "H2O")
(node 303 "H2O")
(node 304 "H2O")
(node 305 "H2O")
(node 306 "H2O")
(node 307 "H2O")
(node 308 "H2O")
(node 309 "H2O")
(node 310 "H2O")
(node 311 "H2O")
(node 312 "H2O2")
(node 313 "O2")
(node 314 "acyl-\nCoA oxid-\nase")
(node 315 "hydroxy\nFA-CoA")
(node 316 "CO2R")
(node 317 "NAD")
(node 318 "NADH")
(node 319 "H")
(node 320 "3-hydroxyac-\nyl-CoA\ndehydrogena-\nse")
(node 321 "3-ketoa-\ncyl-CoA")
(node 322 "AcCoA")
(node 323 "CoA")
(node 324 "H2O2")
(node 325 "NAD")
(node 326 "NADH")
(node 327 "O2")
(node 328 "H")
(node 329 "H2O")
(node 330 "fatty\nacid oxid-\nation")
(node 331 "AcCoA")
(node 332 "CoA")
(node 333 "acetyl-\nCoA acyltr-\nansferase")
(node 334 "AMP")
(node 335 "atp")
(node 336 "CoA")
(node 337 "PPi")
(node 338 "fatty-\nacid-\n-CoA liga-\nse")
(node 339 "H2O")
(node 340 "3-hydroxya-\ncyl-CoA\ndehydratase")
(node 341 "AMP")
(node 342 "ATP")
(node 343 "CoA")
(node 344 "PPi")
(node 345 "fatty-\nacid-\n-CoA liga-\nse")
(node 346 "CoA")
(node 347 "H")
(node 348 "H2O")
(node 349 "peroxisomal\nacyl-\nCoA thioeste-\nrase")
(node 350 "AcCoA")
(node 351 "CoA")
(node 352 "H2O2")
(node 353 "NAD")
(node 354 "NADH")
(node 355 "TPN")
(node 356 "NADPH")
(node 357 "O2")
(node 358 "H")
(node 359 "H2O")
(node 360 "fatty\nacid oxid-\nation")
(node 361 "AMP")
(node 362 "ATP")
(node 363 "CoA")
(node 364 "PPi")
(node 365 "fatty-\nacid-\n-CoA liga-\nse")
(node 366 "AcCoA")
(node 367 "CoA")
(node 368 "H2O2")
(node 369 "NAD")
(node 370 "NADH")
(node 371 "TPN")
(node 372 "NADPH")
(node 373 "O2")
(node 374 "H")
(node 375 "H2O")
(node 376 "fatty\nacid oxid-\nation")
(node 377 "AcCoA")
(node 378 "CoA")
(node 379 "H2O2")
(node 380 "NAD")
(node 381 "NADH")
(node 382 "O2")
(node 383 "H")
(node 384 "H2O")
(node 385 "fatty\nacid oxid-\nation")
(node 386 "straight-\nchain\nsaturated\nfatty\nacidanion")
(node 387 "dehydro-\nacyl-CoA")
(node 388 "LCFA-\nCoA")
(node 389 "fatty\nacyl-\nCoA")
(node 390 "H2O2")
(node 391 "O2")
(node 392 "acyl-\nCoA oxid-\nase")
(node 393 "CoA")
(node 394 "H")
(node 395 "H2O")
(node 396 "peroxisomal\nacyl-\nCoA thioeste-\nrase")
(node 397 "AcCoA")
(node 398 "CoA")
(node 399 "acetyl-\nCoA acyltr-\nansferase")
(node 400 "H2O2")
(node 401 "O2")
(node 402 "acyl-\nCoA oxid-\nase")
(node 403 "AcCoA")
(node 404 "CoA")
(node 405 "H2O2")
(node 406 "NAD")
(node 407 "NADH")
(node 408 "TPN")
(node 409 "NADPH")
(node 410 "O2")
(node 411 "H")
(node 412 "H2O")
(node 413 "fatty\nacid oxid-\nation")
(node 414 "straigh-\nt-chain\nFAanion")
(node 415 "hydroxy\nFA-CoA")
(node 416 "AMP")
(node 417 "ATP")
(node 418 "CoA")
(node 419 "PPi")
(node 420 "fatty-\nacid-\n-CoA liga-\nse")
(node 421 "AcCoA")
(node 422 "CoA")
(node 423 "H2O2")
(node 424 "NAD")
(node 425 "NADH")
(node 426 "O2")
(node 427 "H")
(node 428 "H2O")
(node 429 "fatty\nacid oxid-\nation")
(node 430 "fatty\nacyl-\nCoA")
(node 431 "straight-\nchain\nsaturated\nfatty\nacidanion")
(node 432 "AcCoA")
(node 433 "CoA")
(node 434 "H2O2")
(node 435 "NAD")
(node 436 "NADH")
(node 437 "O2")
(node 438 "H")
(node 439 "H2O")
(node 440 "fatty\nacid oxid-\nation")
(node 441 "AcCoA")
(node 442 "CoA")
(node 443 "H2O2")
(node 444 "NAD")
(node 445 "NADH")
(node 446 "TPN")
(node 447 "NADPH")
(node 448 "O2")
(node 449 "H")
(node 450 "H2O")
(node 451 "fatty\nacid oxid-\nation")
(node 452 "AMP")
(node 453 "ATP")
(node 454 "CoA")
(node 455 "PPi")
(node 456 "fatty-\nacid-\n-CoA liga-\nse")
(node 457 "H2O")
(node 458 "3-hydroxya-\ncyl-CoA\ndehydratase")
(node 459 "dehydro-\nacyl-CoA")
(node 460 "CoA")
(node 461 "H")
(node 462 "H2O")
(node 463 "peroxisomal\nacyl-\nCoA thioeste-\nrase")
(node 464 "AcCoA")
(node 465 "CoA")
(node 466 "acetyl-\nCoA acyltr-\nansferase")
(node 467 "NAD")
(node 468 "NADH")
(node 469 "H")
(node 470 "3-hydroxyac-\nyl-CoA\ndehydrogena-\nse")
(node 471 "3-Oxoac-\nyl-CoA")
)
(property  0 color "viewLabelColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 int "viewLabelPosition"
(default "0" "0")
)
(property  0 layout "viewLayout"
(default "(0,0,0)" "()")
(node 0 "(120.471,307.069,0)")
(node 1 "(36.5,270.583,0)")
(node 2 "(21.5,307.069,0)")
(node 3 "(80.3573,209.625,0)")
(node 4 "(172.304,224.125,0)")
(node 5 "(145.472,267.583,9.79717e-16)")
(node 6 "(135.471,307.069,0)")
(node 7 "(51.5,270.583,0)")
(node 8 "(36.5,307.069,0)")
(node 9 "(153.472,294.583,1.95943e-15)")
(node 10 "(101.357,218.625,0)")
(node 11 "(187.304,224.125,0)")
(node 12 "(37.0863,168.387,0)")
(node 13 "(37.0863,187.387,0)")
(node 14 "(37.0863,195.387,0)")
(node 15 "(-6.5,270.583,0)")
(node 16 "(37.0863,176.387,0)")
(node 17 "(70.3314,309.924,0)")
(node 18 "(74.8314,305.409,0)")
(node 19 "(45.0863,187.387,0)")
(node 20 "(8.5,270.583,0)")
(node 21 "(59.3573,222.625,0)")
(node 22 "(45.0863,168.387,0)")
(node 23 "(41.0863,142.887,0)")
(node 24 "(41.0863,157.887,0)")
(node 25 "(32.8571,-17.6031,0)")
(node 26 "(120.974,222.471,0)")
(node 27 "(66.3097,197.644,0)")
(node 28 "(125.49,226.971,0)")
(node 29 "(37.0863,180.387,0)")
(node 30 "(41.0863,160.887,0)")
(node 31 "(132.047,189.723,0)")
(node 32 "(169.285,304.223,0)")
(node 33 "(173.801,308.723,0)")
(node 34 "(97.0469,189.723,0)")
(node 35 "(45.0863,176.387,0)")
(node 36 "(185.09,268.929,0)")
(node 37 "(80.3573,222.625,0)")
(node 38 "(189.605,273.429,0)")
(node 39 "(113.472,246.583,-2.93915e-15)")
(node 40 "(121.472,267.583,-1.95943e-15)")
(node 41 "(34.1404,24.831,0)")
(node 42 "(66.3097,178.644,0)")
(node 43 "(107.471,307.069,0)")
(node 44 "(8.5,307.069,0)")
(node 45 "(23.5,270.583,0)")
(node 46 "(137.472,246.583,0)")
(node 47 "(159.304,224.125,0)")
(node 48 "(37.0863,164.387,0)")
(node 49 "(45.0863,180.387,0)")
(node 50 "(41.0863,198.887,0)")
(node 51 "(41.0863,183.887,0)")
(node 52 "(114.971,307.069,0)")
(node 53 "(16,307.069,0)")
(node 54 "(31,270.583,0)")
(node 55 "(69.8573,206.625,0)")
(node 56 "(145.472,257.083,9.79717e-16)")
(node 57 "(166.804,224.125,0)")
(node 58 "(127.971,307.069,0)")
(node 59 "(29,307.069,0)")
(node 60 "(44,270.583,0)")
(node 61 "(90.8573,212.625,0)")
(node 62 "(145.472,281.083,9.79717e-16)")
(node 63 "(179.804,224.125,0)")
(node 64 "(161.472,281.083,2.93915e-15)")
(node 65 "(28.5933,27.7756,0)")
(node 66 "(90.8573,230.625,0)")
(node 67 "(194.804,224.125,0)")
(node 68 "(142.971,307.069,0)")
(node 69 "(44,307.069,0)")
(node 70 "(99.9715,307.069,0)")
(node 71 "(1,307.069,0)")
(node 72 "(16,270.583,0)")
(node 73 "(69.8573,238.625,0)")
(node 74 "(129.472,257.083,-9.79717e-16)")
(node 75 "(151.804,224.125,0)")
(node 76 "(74.3097,160.144,0)")
(node 77 "(40.8573,214.625,0)")
(node 78 "(40.8573,230.625,0)")
(node 79 "(105.047,171.223,0)")
(node 80 "(89.0469,171.223,0)")
(node 81 "(148.047,171.223,0)")
(node 82 "(132.047,171.223,0)")
(node 83 "(116.047,171.223,0)")
(node 84 "(58.3097,160.144,0)")
(node 85 "(206.919,307.069,0)")
(node 86 "(44.7994,21.5309,-1.95943e-15)")
(node 87 "(70.3235,305.416,0)")
(node 88 "(41.0863,135.387,0)")
(node 89 "(189.598,268.921,0)")
(node 90 "(69.8573,222.625,0)")
(node 91 "(30.1963,-10.185,0)")
(node 92 "(1,270.583,0)")
(node 93 "(169.293,308.731,0)")
(node 94 "(125.482,222.463,0)")
(node 95 "(66.3097,188.144,0)")
(node 96 "(74.8392,309.916,0)")
(node 97 "(41.0863,150.387,0)")
(node 98 "(35.0803,-10.1272,0)")
(node 99 "(185.098,273.436,0)")
(node 100 "(120.982,226.978,0)")
(node 101 "(113.472,257.083,-2.93915e-15)")
(node 102 "(173.793,304.215,0)")
(node 103 "(41.0863,191.387,0)")
(node 104 "(41.0863,172.387,0)")
(node 105 "(161.472,267.583,2.93915e-15)")
(node 106 "(27.9425,22.717,0)")
(node 107 "(80.3573,230.625,0)")
(node 108 "(198.804,220.125,0)")
(node 109 "(148.471,307.069,0)")
(node 110 "(49.5,307.069,0)")
(node 111 "(70.3097,155.644,0)")
(node 112 "(36.3573,218.625,0)")
(node 113 "(36.3573,234.625,0)")
(node 114 "(101.047,166.723,0)")
(node 115 "(85.0469,166.723,0)")
(node 116 "(144.047,166.723,0)")
(node 117 "(128.047,166.723,0)")
(node 118 "(112.047,166.723,0)")
(node 119 "(54.3097,155.644,0)")
(node 120 "(202.419,303.069,4.89859e-16)")
(node 121 "(49.1062,18.2581,-1.46958e-15)")
(node 122 "(67.2647,299.986,0)")
(node 123 "(37.0863,131.387,0)")
(node 124 "(195.028,265.862,0)")
(node 125 "(65.3573,226.625,0)")
(node 126 "(25.4762,-11.592,0)")
(node 127 "(5,266.583,0)")
(node 128 "(166.253,314.172,0)")
(node 129 "(130.913,219.404,0)")
(node 130 "(62.3097,183.644,0)")
(node 131 "(62.5,304.767,0)")
(node 132 "(37.0863,139.387,0)")
(node 133 "(190.247,261.097,0)")
(node 134 "(74.3573,226.625,0)")
(node 135 "(25.3637,-4.54155,0)")
(node 136 "(-3,266.583,0)")
(node 137 "(161.472,309.408,0)")
(node 138 "(126.132,214.639,0)")
(node 139 "(62.3097,192.644,0)")
(node 140 "(165.472,285.583,3.42901e-15)")
(node 141 "(24.4027,25.4609,0)")
(node 142 "(95.3573,234.625,0)")
(node 143 "(190.804,220.125,0)")
(node 144 "(138.971,303.069,0)")
(node 145 "(40,303.069,0)")
(node 146 "(70.3097,164.644,0)")
(node 147 "(45.3573,218.625,0)")
(node 148 "(45.3573,234.625,0)")
(node 149 "(101.047,175.723,0)")
(node 150 "(85.0469,175.723,0)")
(node 151 "(144.047,175.723,0)")
(node 152 "(128.047,175.723,0)")
(node 153 "(112.047,175.723,0)")
(node 154 "(54.3097,164.644,0)")
(node 155 "(211.419,303.069,4.89859e-16)")
(node 156 "(48.7994,24.1896,-1.46958e-15)")
(node 157 "(64.8823,302.377,0)")
(node 158 "(45.0863,139.387,0)")
(node 159 "(192.638,263.48,0)")
(node 160 "(74.3573,218.625,0)")
(node 161 "(25.3632,-8.17979,0)")
(node 162 "(-3,274.583,0)")
(node 163 "(163.862,311.79,0)")
(node 164 "(128.522,217.022,0)")
(node 165 "(70.3097,192.644,0)")
(node 166 "(79.0893,314.152,0)")
(node 167 "(37.0863,146.387,0)")
(node 168 "(39.7962,-10.3701,0)")
(node 169 "(180.862,277.686,0)")
(node 170 "(116.747,231.228,0)")
(node 171 "(117.472,252.583,-2.44929e-15)")
(node 172 "(178.028,299.965,0)")
(node 173 "(45.0863,195.387,0)")
(node 174 "(69.647,297.595,0)")
(node 175 "(45.0863,131.387,0)")
(node 176 "(197.419,268.244,0)")
(node 177 "(65.3573,218.625,0)")
(node 178 "(25.4756,-15.3446,0)")
(node 179 "(5,274.583,0)")
(node 180 "(168.643,316.555,0)")
(node 181 "(133.304,221.786,0)")
(node 182 "(70.3097,183.644,0)")
(node 183 "(103.971,303.069,0)")
(node 184 "(5,303.069,0)")
(node 185 "(20,266.583,0)")
(node 186 "(65.3573,242.625,0)")
(node 187 "(133.472,252.583,-4.89859e-16)")
(node 188 "(155.804,220.125,0)")
(node 189 "(70.3097,151.644,0)")
(node 190 "(32.3573,218.625,0)")
(node 191 "(32.3573,234.625,0)")
(node 192 "(101.047,162.723,0)")
(node 193 "(85.0469,162.723,0)")
(node 194 "(144.047,162.723,0)")
(node 195 "(128.047,162.723,0)")
(node 196 "(112.047,162.723,0)")
(node 197 "(54.3097,151.644,0)")
(node 198 "(198.419,303.069,4.89859e-16)")
(node 199 "(46.5207,15.1469,-1.46958e-15)")
(node 200 "(202.304,224.125,0)")
(node 201 "(-6.5,307.069,0)")
(node 202 "(41.0863,127.887,0)")
(node 203 "(123.971,303.069,0)")
(node 204 "(25,303.069,0)")
(node 205 "(40,266.583,0)")
(node 206 "(86.3573,216.625,0)")
(node 207 "(149.472,276.583,1.46958e-15)")
(node 208 "(175.804,220.125,0)")
(node 209 "(70.3097,168.644,0)")
(node 210 "(49.3573,218.625,0)")
(node 211 "(49.3573,234.625,0)")
(node 212 "(101.047,179.723,0)")
(node 213 "(85.0469,179.723,0)")
(node 214 "(144.047,179.723,0)")
(node 215 "(128.047,179.723,0)")
(node 216 "(112.047,179.723,0)")
(node 217 "(54.3097,168.644,0)")
(node 218 "(220.419,307.069,0)")
(node 219 "(42.9759,27.3106,-1.95943e-15)")
(node 220 "(131.971,303.069,0)")
(node 221 "(33,303.069,0)")
(node 222 "(48,266.583,0)")
(node 223 "(95.3573,216.625,0)")
(node 224 "(149.472,285.583,1.46958e-15)")
(node 225 "(183.804,220.125,0)")
(node 226 "(74.3097,141.644,0)")
(node 227 "(36.3573,210.625,0)")
(node 228 "(22.3573,230.625,0)")
(node 229 "(109.047,166.723,0)")
(node 230 "(89.0469,152.723,0)")
(node 231 "(152.047,166.723,0)")
(node 232 "(136.047,166.723,0)")
(node 233 "(116.047,152.723,0)")
(node 234 "(62.3097,155.644,0)")
(node 235 "(193.419,307.069,0)")
(node 236 "(41.1062,18.2581,-2.44929e-15)")
(node 237 "(22.3573,214.625,0)")
(node 238 "(105.047,152.723,0)")
(node 239 "(148.047,152.723,0)")
(node 240 "(132.047,152.723,0)")
(node 241 "(58.3097,141.644,0)")
(node 242 "(53.3573,218.625,0)")
(node 243 "(101.047,183.723,0)")
(node 244 "(144.047,183.723,0)")
(node 245 "(128.047,183.723,0)")
(node 246 "(54.3097,172.644,0)")
(node 247 "(94.4715,307.069,0)")
(node 248 "(-3,303.069,0)")
(node 249 "(12,266.583,0)")
(node 250 "(80.3573,238.625,0)")
(node 251 "(133.472,261.583,-4.89859e-16)")
(node 252 "(146.304,224.125,0)")
(node 253 "(78.3097,164.644,0)")
(node 254 "(45.3573,210.625,0)")
(node 255 "(45.3573,226.625,0)")
(node 256 "(109.047,175.723,0)")
(node 257 "(93.0469,175.723,0)")
(node 258 "(152.047,175.723,0)")
(node 259 "(136.047,175.723,0)")
(node 260 "(120.047,175.723,0)")
(node 261 "(62.3097,164.644,0)")
(node 262 "(215.419,303.069,4.89859e-16)")
(node 263 "(46.9411,27.3008,-1.46958e-15)")
(node 264 "(131.971,311.069,0)")
(node 265 "(33,311.069,0)")
(node 266 "(48,274.583,0)")
(node 267 "(95.3573,208.625,0)")
(node 268 "(141.472,285.583,4.89859e-16)")
(node 269 "(183.804,228.125,0)")
(node 270 "(78.3097,155.644,0)")
(node 271 "(32.3573,210.625,0)")
(node 272 "(36.3573,226.625,0)")
(node 273 "(109.047,162.723,0)")
(node 274 "(93.0469,166.723,0)")
(node 275 "(152.047,162.723,0)")
(node 276 "(136.047,162.723,0)")
(node 277 "(120.047,166.723,0)")
(node 278 "(62.3097,151.644,0)")
(node 279 "(202.419,311.069,-4.89859e-16)")
(node 280 "(42.9646,15.2277,-2.44929e-15)")
(node 281 "(76.7069,316.542,0)")
(node 282 "(45.0863,146.387,0)")
(node 283 "(39.9101,-6.27706,0)")
(node 284 "(178.472,275.304,0)")
(node 285 "(114.356,228.846,0)")
(node 286 "(109.472,252.583,-3.42901e-15)")
(node 287 "(175.637,297.583,0)")
(node 288 "(110.971,303.069,0)")
(node 289 "(12,303.069,0)")
(node 290 "(27,266.583,0)")
(node 291 "(65.3573,210.625,0)")
(node 292 "(149.472,252.583,1.46958e-15)")
(node 293 "(162.804,220.125,0)")
(node 294 "(78.3097,168.644,0)")
(node 295 "(49.3573,210.625,0)")
(node 296 "(49.3573,226.625,0)")
(node 297 "(109.047,179.723,0)")
(node 298 "(93.0469,179.723,0)")
(node 299 "(152.047,179.723,0)")
(node 300 "(136.047,179.723,0)")
(node 301 "(120.047,179.723,0)")
(node 302 "(62.3097,168.644,0)")
(node 303 "(211.419,311.069,-4.89859e-16)")
(node 304 "(40.7994,24.1896,-2.44929e-15)")
(node 305 "(81.4716,311.761,0)")
(node 306 "(37.0863,154.387,0)")
(node 307 "(39.7956,-14.8035,0)")
(node 308 "(183.253,280.069,0)")
(node 309 "(119.138,233.611,0)")
(node 310 "(117.472,261.583,-2.44929e-15)")
(node 311 "(180.419,302.348,0)")
(node 312 "(103.971,303.069,0)")
(node 313 "(94.4715,307.069,0)")
(node 314 "(99.9715,307.069,0)")
(node 315 "(120.471,307.069,0)")
(node 316 "(120.974,222.471,0)")
(node 317 "(123.971,303.069,0)")
(node 318 "(131.971,303.069,0)")
(node 319 "(131.971,311.069,0)")
(node 320 "(127.971,307.069,0)")
(node 321 "(135.471,307.069,0)")
(node 322 "(112.047,166.723,0)")
(node 323 "(112.047,175.723,0)")
(node 324 "(112.047,162.723,0)")
(node 325 "(112.047,179.723,0)")
(node 326 "(116.047,152.723,0)")
(node 327 "(120.047,175.723,0)")
(node 328 "(120.047,166.723,0)")
(node 329 "(120.047,179.723,0)")
(node 330 "(116.047,171.223,0)")
(node 331 "(64.5,270.583,0)")
(node 332 "(55,266.583,0)")
(node 333 "(59,270.583,0)")
(node 334 "(195.028,265.862,0)")
(node 335 "(190.247,261.097,0)")
(node 336 "(192.638,263.48,0)")
(node 337 "(197.419,268.244,0)")
(node 338 "(189.598,268.921,0)")
(node 339 "(110.971,303.069,0)")
(node 340 "(114.971,307.069,0)")
(node 341 "(67.2647,299.986,0)")
(node 342 "(62.5,304.767,0)")
(node 343 "(64.8823,302.377,0)")
(node 344 "(69.647,297.595,0)")
(node 345 "(70.3235,305.416,0)")
(node 346 "(79.0893,314.152,0)")
(node 347 "(76.7069,316.542,0)")
(node 348 "(81.4716,311.761,0)")
(node 349 "(74.8392,309.916,0)")
(node 350 "(36.3573,218.625,0)")
(node 351 "(45.3573,218.625,0)")
(node 352 "(32.3573,218.625,0)")
(node 353 "(49.3573,218.625,0)")
(node 354 "(36.3573,210.625,0)")
(node 355 "(22.3573,214.625,0)")
(node 356 "(53.3573,218.625,0)")
(node 357 "(45.3573,210.625,0)")
(node 358 "(32.3573,210.625,0)")
(node 359 "(49.3573,210.625,0)")
(node 360 "(40.8573,214.625,0)")
(node 361 "(65.3573,226.625,0)")
(node 362 "(74.3573,226.625,0)")
(node 363 "(74.3573,218.625,0)")
(node 364 "(65.3573,218.625,0)")
(node 365 "(69.8573,222.625,0)")
(node 366 "(144.047,166.723,0)")
(node 367 "(144.047,175.723,0)")
(node 368 "(144.047,162.723,0)")
(node 369 "(144.047,179.723,0)")
(node 370 "(152.047,166.723,0)")
(node 371 "(148.047,152.723,0)")
(node 372 "(144.047,183.723,0)")
(node 373 "(152.047,175.723,0)")
(node 374 "(152.047,162.723,0)")
(node 375 "(152.047,179.723,0)")
(node 376 "(148.047,171.223,0)")
(node 377 "(70.3097,155.644,0)")
(node 378 "(70.3097,164.644,0)")
(node 379 "(70.3097,151.644,0)")
(node 380 "(70.3097,168.644,0)")
(node 381 "(74.3097,141.644,0)")
(node 382 "(78.3097,164.644,0)")
(node 383 "(78.3097,155.644,0)")
(node 384 "(78.3097,168.644,0)")
(node 385 "(74.3097,160.144,0)")
(node 386 "(60.0304,323.216,0)")
(node 387 "(59.3573,222.625,0)")
(node 388 "(125.49,226.971,0)")
(node 389 "(74.8314,305.409,0)")
(node 390 "(65.3573,242.625,0)")
(node 391 "(80.3573,238.625,0)")
(node 392 "(69.8573,238.625,0)")
(node 393 "(180.862,277.686,0)")
(node 394 "(178.472,275.304,0)")
(node 395 "(183.253,280.069,0)")
(node 396 "(185.098,273.436,0)")
(node 397 "(161.472,267.583,2.93915e-15)")
(node 398 "(165.472,285.583,3.42901e-15)")
(node 399 "(161.472,281.083,2.93915e-15)")
(node 400 "(68.9995,3.5,0)")
(node 401 "(74.7066,9.20711,0)")
(node 402 "(63.795,14.4116,0)")
(node 403 "(72.767,-24.1793,0)")
(node 404 "(72.767,-15.1793,0)")
(node 405 "(76.104,-28.4606,0)")
(node 406 "(75.3716,-10.5593,0)")
(node 407 "(86.9062,-24.1636,0)")
(node 408 "(79.7754,-33.2703,0)")
(node 409 "(79.6342,-6.48178,0)")
(node 410 "(86.9062,-15.1636,0)")
(node 411 "(83.2879,-28.4319,0)")
(node 412 "(83.7591,-10.7918,0)")
(node 413 "(79.6816,-19.8343,0)")
(node 414 "(105.405,-8.52621,0)")
(node 415 "(44.6059,60.7382,0)")
(node 416 "(88.0861,7.86399,0)")
(node 417 "(87.9984,19.8961,0)")
(node 418 "(87.8779,13.9484,0)")
(node 419 "(88.1074,1.82394,0)")
(node 420 "(97.9462,10.9122,0)")
(node 421 "(95.8754,29.1379,0)")
(node 422 "(95.8754,38.1379,0)")
(node 423 "(98.7974,24.4514,0)")
(node 424 "(98.7974,42.687,0)")
(node 425 "(104.994,24.4741,0)")
(node 426 "(108.464,38.5891,0)")
(node 427 "(108.464,29.5891,0)")
(node 428 "(104.601,42.9616,0)")
(node 429 "(102.386,33.6379,0)")
(node 430 "(44.6059,6.46327,0)")
(node 431 "(46.8432,-55.2329,0)")
(node 432 "(73.751,-51.7684,0)")
(node 433 "(73.751,-42.7684,0)")
(node 434 "(77.0921,-55.9856,0)")
(node 435 "(77.2626,-38.7299,0)")
(node 436 "(83.3939,-55.926,0)")
(node 437 "(86.9839,-43.0708,0)")
(node 438 "(86.9839,-52.0708,0)")
(node 439 "(83.0461,-38.7298,0)")
(node 440 "(80.3248,-47.4003,0)")
(node 441 "(94.2807,65.4142,0)")
(node 442 "(108.936,65.6872,0)")
(node 443 "(97.1574,70.0849,0)")
(node 444 "(104.724,69.8545,0)")
(node 445 "(94.2807,57.4142,0)")
(node 446 "(101.224,48.3508,0)")
(node 447 "(101.037,74.6883,0)")
(node 448 "(108.936,57.6872,0)")
(node 449 "(96.5861,52.8746,0)")
(node 450 "(105.748,53.098,0)")
(node 451 "(101.281,61.822,0)")
(node 452 "(31.6343,-39.5232,0)")
(node 453 "(31.7022,-26.4293,0)")
(node 454 "(31.5812,-33.1574,0)")
(node 455 "(31.7355,-46.265,0)")
(node 456 "(40.5729,-36.7875,0)")
(node 457 "(72.0021,60.9969,0)")
(node 458 "(63.795,52.7898,0)")
(node 459 "(71.7433,33.6007,0)")
(node 460 "(60.3576,-37.0312,0)")
(node 461 "(60.3411,-30.3438,0)")
(node 462 "(60.4971,-43.839,0)")
(node 463 "(51.9738,-36.648,0)")
(node 464 "(20.2123,3.5,0)")
(node 465 "(14.5052,9.20711,0)")
(node 466 "(25.4168,14.4116,0)")
(node 467 "(12.5416,54.1195,0)")
(node 468 "(17.7766,60.2626,0)")
(node 469 "(23.9197,65.4976,0)")
(node 470 "(25.4168,52.7898,0)")
(node 471 "(17.4684,33.6007,0)")
(edge 40 "((72.4177,242.718,-9.15527e-05), (179.457,243.462,-9.15527e-05))")
)
(property  0 graph "viewMetaGraph"
(default "" "()")
(node 312 "911")
(node 313 "912")
(node 314 "913")
(node 315 "914")
(node 316 "915")
(node 317 "916")
(node 318 "917")
(node 319 "918")
(node 320 "919")
(node 321 "920")
(node 322 "921")
(node 323 "922")
(node 324 "923")
(node 325 "924")
(node 326 "925")
(node 327 "926")
(node 328 "927")
(node 329 "928")
(node 330 "929")
(node 331 "930")
(node 332 "931")
(node 333 "932")
(node 334 "933")
(node 335 "934")
(node 336 "935")
(node 337 "936")
(node 338 "937")
(node 339 "938")
(node 340 "939")
(node 341 "940")
(node 342 "941")
(node 343 "942")
(node 344 "943")
(node 345 "944")
(node 346 "945")
(node 347 "946")
(node 348 "947")
(node 349 "948")
(node 350 "949")
(node 351 "950")
(node 352 "951")
(node 353 "952")
(node 354 "953")
(node 355 "954")
(node 356 "955")
(node 357 "956")
(node 358 "957")
(node 359 "958")
(node 360 "959")
(node 361 "960")
(node 362 "961")
(node 363 "962")
(node 364 "963")
(node 365 "964")
(node 366 "965")
(node 367 "966")
(node 368 "967")
(node 369 "968")
(node 370 "969")
(node 371 "970")
(node 372 "971")
(node 373 "972")
(node 374 "973")
(node 375 "974")
(node 376 "975")
(node 377 "976")
(node 378 "977")
(node 379 "978")
(node 380 "979")
(node 381 "980")
(node 382 "981")
(node 383 "982")
(node 384 "983")
(node 385 "984")
(node 386 "985")
(node 387 "986")
(node 388 "987")
(node 389 "988")
(node 390 "989")
(node 391 "990")
(node 392 "991")
(node 393 "992")
(node 394 "993")
(node 395 "994")
(node 396 "995")
(node 397 "996")
(node 398 "997")
(node 399 "998")
(node 400 "66")
(node 401 "67")
(node 402 "68")
(node 403 "69")
(node 404 "70")
(node 405 "71")
(node 406 "72")
(node 407 "73")
(node 408 "74")
(node 409 "75")
(node 410 "76")
(node 411 "77")
(node 412 "78")
(node 413 "79")
(node 414 "80")
(node 415 "81")
(node 416 "82")
(node 417 "83")
(node 418 "84")
(node 419 "85")
(node 420 "86")
(node 421 "87")
(node 422 "88")
(node 423 "89")
(node 424 "90")
(node 425 "91")
(node 426 "92")
(node 427 "93")
(node 428 "94")
(node 429 "95")
(node 430 "96")
(node 431 "97")
(node 432 "98")
(node 433 "99")
(node 434 "100")
(node 435 "101")
(node 436 "102")
(node 437 "103")
(node 438 "104")
(node 439 "105")
(node 440 "106")
(node 441 "107")
(node 442 "108")
(node 443 "109")
(node 444 "110")
(node 445 "111")
(node 446 "112")
(node 447 "113")
(node 448 "114")
(node 449 "115")
(node 450 "116")
(node 451 "117")
(node 452 "118")
(node 453 "119")
(node 454 "120")
(node 455 "121")
(node 456 "122")
(node 457 "123")
(node 458 "124")
(node 459 "125")
(node 460 "126")
(node 461 "127")
(node 462 "128")
(node 463 "129")
(node 464 "130")
(node 465 "131")
(node 466 "132")
(node 467 "133")
(node 468 "134")
(node 469 "135")
(node 470 "136")
(node 471 "137")
(edge 310 "(181 )")
(edge 311 "(182 )")
(edge 312 "(183 )")
(edge 313 "(245 )")
(edge 314 "(246 )")
(edge 315 "(247 )")
(edge 316 "(35 )")
(edge 317 "(36 )")
(edge 318 "(310 311 312 )")
(edge 319 "(313 314 315 )")
(edge 320 "(37 )")
(edge 321 "(199 )")
(edge 322 "(38 )")
(edge 323 "(39 )")
(edge 324 "(0 )")
(edge 325 "(13 )")
(edge 326 "(5 )")
(edge 327 "(16 )")
(edge 328 "(2 )")
(edge 329 "(15 )")
(edge 330 "(6 )")
(edge 331 "(19 )")
(edge 332 "(10 )")
(edge 333 "(23 )")
(edge 334 "(8 )")
(edge 335 "(21 )")
(edge 336 "(71 )")
(edge 337 "(84 )")
(edge 338 "(73 )")
(edge 339 "(61 )")
(edge 340 "(82 )")
(edge 341 "(63 )")
(edge 342 "(86 )")
(edge 343 "(201 )")
(edge 344 "(202 )")
(edge 345 "(203 )")
(edge 346 "(204 )")
(edge 347 "(205 )")
(edge 348 "(206 )")
(edge 349 "(218 )")
(edge 350 "(219 )")
(edge 351 "(220 )")
(edge 352 "(221 )")
(edge 353 "(222 )")
(edge 354 "(223 )")
(edge 355 "(262 )")
(edge 356 "(263 )")
(edge 357 "(264 )")
(edge 358 "(265 )")
(edge 359 "(266 )")
(edge 360 "(267 )")
(edge 361 "(12 )")
(edge 362 "(325 327 329 331 333 335 )")
(edge 363 "(343 344 345 346 347 348 )")
(edge 364 "(349 350 351 352 353 354 )")
(edge 365 "(355 356 357 358 359 360 )")
(edge 366 "(14 )")
(edge 367 "(17 )")
(edge 368 "(18 )")
(edge 369 "(20 )")
(edge 370 "(22 )")
(edge 371 "(31 )")
(edge 372 "(361 366 367 368 369 370 )")
(edge 373 "(26 )")
(edge 374 "(33 )")
(edge 375 "(24 )")
(edge 376 "(28 )")
(edge 377 "(30 )")
(edge 378 "(118 )")
(edge 379 "(99 )")
(edge 380 "(116 )")
(edge 381 "(153 )")
(edge 382 "(94 )")
(edge 383 "(151 )")
(edge 384 "(194 )")
(edge 385 "(101 )")
(edge 386 "(196 )")
(edge 387 "(214 )")
(edge 388 "(216 )")
(edge 389 "(95 )")
(edge 390 "(233 )")
(edge 391 "(102 )")
(edge 392 "(231 )")
(edge 393 "(97 )")
(edge 394 "(258 )")
(edge 395 "(260 )")
(edge 396 "(275 )")
(edge 397 "(100 )")
(edge 398 "(277 )")
(edge 399 "(299 )")
(edge 400 "(301 )")
(edge 401 "(98 )")
(edge 402 "(53 )")
(edge 403 "(378 379 380 )")
(edge 404 "(381 382 383 )")
(edge 405 "(384 385 386 )")
(edge 406 "(387 388 389 )")
(edge 407 "(390 391 392 )")
(edge 408 "(393 394 395 )")
(edge 409 "(396 397 398 )")
(edge 410 "(399 400 401 )")
(edge 411 "(55 )")
(edge 412 "(96 )")
(edge 413 "(104 )")
(edge 414 "(106 )")
(edge 415 "(107 )")
(edge 416 "(108 )")
(edge 417 "(139 )")
(edge 418 "(141 )")
(edge 419 "(142 )")
(edge 420 "(143 )")
(edge 421 "(27 )")
(edge 422 "(371 373 374 377 )")
(edge 423 "(413 414 415 416 )")
(edge 424 "(417 418 419 420 )")
(edge 425 "(198 )")
(edge 426 "(32 )")
(edge 427 "(34 )")
(edge 428 "(122 )")
(edge 429 "(127 )")
(edge 430 "(131 )")
(edge 431 "(136 )")
(edge 432 "(157 )")
(edge 433 "(162 )")
(edge 434 "(174 )")
(edge 435 "(179 )")
(edge 436 "(62 )")
(edge 437 "(336 339 )")
(edge 438 "(428 429 )")
(edge 439 "(430 431 )")
(edge 440 "(432 433 )")
(edge 441 "(434 435 )")
(edge 442 "(72 )")
(edge 443 "(286 )")
(edge 444 "(287 )")
(edge 445 "(288 )")
(edge 446 "(289 )")
(edge 447 "(290 )")
(edge 448 "(291 )")
(edge 449 "(1 )")
(edge 450 "(324 326 328 330 332 334 )")
(edge 451 "(443 444 445 446 447 448 )")
(edge 452 "(3 )")
(edge 453 "(4 )")
(edge 454 "(7 )")
(edge 455 "(9 )")
(edge 456 "(11 )")
(edge 457 "(120 )")
(edge 458 "(92 )")
(edge 459 "(121 )")
(edge 460 "(124 )")
(edge 461 "(125 )")
(edge 462 "(126 )")
(edge 463 "(130 )")
(edge 464 "(90 )")
(edge 465 "(133 )")
(edge 466 "(134 )")
(edge 467 "(135 )")
(edge 468 "(129 )")
(edge 469 "(155 )")
(edge 470 "(156 )")
(edge 471 "(159 )")
(edge 472 "(160 )")
(edge 473 "(161 )")
(edge 474 "(171 )")
(edge 475 "(176 )")
(edge 476 "(177 )")
(edge 477 "(178 )")
(edge 478 "(93 )")
(edge 479 "(172 )")
(edge 480 "(173 )")
(edge 481 "(58 )")
(edge 482 "(59 )")
(edge 483 "(457 458 459 460 461 462 )")
(edge 484 "(463 464 465 466 467 468 )")
(edge 485 "(469 470 471 472 473 474 )")
(edge 486 "(475 476 477 478 479 480 )")
(edge 487 "(60 )")
(edge 488 "(200 )")
(edge 489 "(65 )")
(edge 490 "(66 )")
(edge 491 "(67 )")
(edge 492 "(68 )")
(edge 493 "(69 )")
(edge 494 "(70 )")
(edge 495 "(89 )")
(edge 496 "(91 )")
(edge 497 "(164 )")
(edge 498 "(165 )")
(edge 499 "(166 )")
(edge 500 "(170 )")
(edge 501 "(279 )")
(edge 502 "(280 )")
(edge 503 "(281 )")
(edge 504 "(285 )")
(edge 505 "(303 )")
(edge 506 "(304 )")
(edge 507 "(305 )")
(edge 508 "(309 )")
(edge 509 "(75 )")
(edge 510 "(76 )")
(edge 511 "(497 498 499 500 )")
(edge 512 "(501 502 503 504 )")
(edge 513 "(505 506 507 508 )")
(edge 514 "(77 )")
(edge 515 "(78 )")
(edge 516 "(79 )")
(edge 517 "(80 )")
(edge 518 "(87 )")
(edge 519 "(88 )")
(edge 520 "(110 )")
(edge 521 "(112 )")
(edge 522 "(117 )")
(edge 523 "(145 )")
(edge 524 "(147 )")
(edge 525 "(152 )")
(edge 526 "(188 )")
(edge 527 "(190 )")
(edge 528 "(195 )")
(edge 529 "(208 )")
(edge 530 "(210 )")
(edge 531 "(215 )")
(edge 532 "(225 )")
(edge 533 "(227 )")
(edge 534 "(232 )")
(edge 535 "(235 )")
(edge 536 "(236 )")
(edge 537 "(239 )")
(edge 538 "(240 )")
(edge 539 "(241 )")
(edge 540 "(244 )")
(edge 541 "(252 )")
(edge 542 "(254 )")
(edge 543 "(259 )")
(edge 544 "(269 )")
(edge 545 "(271 )")
(edge 546 "(276 )")
(edge 547 "(293 )")
(edge 548 "(295 )")
(edge 549 "(300 )")
(edge 550 "(47 )")
(edge 551 "(520 521 522 )")
(edge 552 "(523 524 525 )")
(edge 553 "(526 527 528 )")
(edge 554 "(529 530 531 )")
(edge 555 "(532 533 534 )")
(edge 556 "(535 536 537 )")
(edge 557 "(538 539 540 )")
(edge 558 "(541 542 543 )")
(edge 559 "(544 545 546 )")
(edge 560 "(547 548 549 )")
(edge 561 "(49 )")
(edge 562 "(54 )")
(edge 563 "(123 )")
(edge 564 "(128 )")
(edge 565 "(132 )")
(edge 566 "(137 )")
(edge 567 "(158 )")
(edge 568 "(163 )")
(edge 569 "(175 )")
(edge 570 "(180 )")
(edge 571 "(64 )")
(edge 572 "(338 341 )")
(edge 573 "(563 564 )")
(edge 574 "(565 566 )")
(edge 575 "(567 568 )")
(edge 576 "(569 570 )")
(edge 577 "(74 )")
(edge 578 "(114 )")
(edge 579 "(115 )")
(edge 580 "(149 )")
(edge 581 "(150 )")
(edge 582 "(192 )")
(edge 583 "(193 )")
(edge 584 "(212 )")
(edge 585 "(213 )")
(edge 586 "(229 )")
(edge 587 "(230 )")
(edge 588 "(237 )")
(edge 589 "(238 )")
(edge 590 "(242 )")
(edge 591 "(243 )")
(edge 592 "(256 )")
(edge 593 "(257 )")
(edge 594 "(273 )")
(edge 595 "(274 )")
(edge 596 "(297 )")
(edge 597 "(298 )")
(edge 598 "(51 52 )")
(edge 599 "(578 579 )")
(edge 600 "(580 581 )")
(edge 601 "(582 583 )")
(edge 602 "(584 585 )")
(edge 603 "(586 587 )")
(edge 604 "(588 589 )")
(edge 605 "(590 591 )")
(edge 606 "(592 593 )")
(edge 607 "(594 595 )")
(edge 608 "(596 597 )")
(edge 609 "(109 )")
(edge 610 "(111 )")
(edge 611 "(113 )")
(edge 612 "(144 )")
(edge 613 "(146 )")
(edge 614 "(148 )")
(edge 615 "(187 )")
(edge 616 "(189 )")
(edge 617 "(191 )")
(edge 618 "(207 )")
(edge 619 "(209 )")
(edge 620 "(211 )")
(edge 621 "(224 )")
(edge 622 "(226 )")
(edge 623 "(228 )")
(edge 624 "(251 )")
(edge 625 "(253 )")
(edge 626 "(255 )")
(edge 627 "(268 )")
(edge 628 "(270 )")
(edge 629 "(272 )")
(edge 630 "(292 )")
(edge 631 "(294 )")
(edge 632 "(296 )")
(edge 633 "(46 )")
(edge 634 "(609 610 611 )")
(edge 635 "(612 613 614 )")
(edge 636 "(615 616 617 )")
(edge 637 "(618 619 620 )")
(edge 638 "(621 622 623 )")
(edge 639 "(624 625 626 )")
(edge 640 "(627 628 629 )")
(edge 641 "(630 631 632 )")
(edge 642 "(48 )")
(edge 643 "(50 )")
(edge 644 "(481 487 489 491 493 495 )")
(edge 645 "(510 515 517 519 )")
(edge 646 "(41 )")
(edge 647 "(449 452 453 454 455 456 )")
(edge 648 "(550 561 562 )")
(edge 649 "(571 577 )")
(edge 650 "(633 642 643 )")
(edge 651 "(317 320 323 )")
(edge 652 "(43 )")
(edge 653 "(45 )")
(edge 654 "(29 )")
(edge 655 "(44 )")
(edge 656 "(83 )")
(edge 657 "(436 442 )")
(edge 658 "(25 )")
(edge 659 "(40 )")
(edge 660 "(81 )")
(edge 661 "(42 )")
(edge 662 "(57 )")
(edge 663 "(85 )")
(edge 664 "(402 411 412 )")
(edge 665 "(482 488 490 492 494 496 )")
(edge 666 "(316 321 322 )")
(edge 667 "(421 425 426 427 )")
(edge 668 "(509 514 516 518 )")
(edge 669 "(56 )")
(edge 670 "(598 )")
(edge 671 "(184 )")
(edge 672 "(185 )")
(edge 673 "(186 )")
(edge 674 "(248 )")
(edge 675 "(249 )")
(edge 676 "(250 )")
(edge 677 "(646 652 653 )")
(edge 678 "(655 659 661 )")
(edge 679 "(671 672 673 )")
(edge 680 "(674 675 676 )")
(edge 681 "(167 )")
(edge 682 "(168 )")
(edge 683 "(169 )")
(edge 684 "(282 )")
(edge 685 "(283 )")
(edge 686 "(284 )")
(edge 687 "(306 )")
(edge 688 "(307 )")
(edge 689 "(308 )")
(edge 690 "(337 340 342 )")
(edge 691 "(656 660 663 )")
(edge 692 "(681 682 683 )")
(edge 693 "(684 685 686 )")
(edge 694 "(687 688 689 )")
(edge 695 "(103 )")
(edge 696 "(105 )")
(edge 697 "(138 )")
(edge 698 "(140 )")
(edge 699 "(375 376 )")
(edge 700 "(654 658 )")
(edge 701 "(695 696 )")
(edge 702 "(697 698 )")
(edge 703 "(181 )")
(edge 704 "(182 )")
(edge 705 "(183 )")
(edge 706 "(184 )")
(edge 707 "(185 )")
(edge 708 "(186 )")
(edge 709 "(245 )")
(edge 710 "(246 )")
(edge 711 "(247 )")
(edge 712 "(248 )")
(edge 713 "(249 )")
(edge 714 "(250 )")
(edge 715 "(35 )")
(edge 716 "(36 )")
(edge 717 "(703 704 705 706 707 708 )")
(edge 718 "(709 710 711 712 713 714 )")
(edge 719 "(37 )")
(edge 720 "(199 )")
(edge 721 "(38 )")
(edge 722 "(39 )")
(edge 723 "(40 )")
(edge 724 "(41 )")
(edge 725 "(42 )")
(edge 726 "(43 )")
(edge 727 "(44 )")
(edge 728 "(45 )")
(edge 729 "(114 )")
(edge 730 "(115 )")
(edge 731 "(149 )")
(edge 732 "(150 )")
(edge 733 "(192 )")
(edge 734 "(193 )")
(edge 735 "(212 )")
(edge 736 "(213 )")
(edge 737 "(229 )")
(edge 738 "(230 )")
(edge 739 "(237 )")
(edge 740 "(238 )")
(edge 741 "(242 )")
(edge 742 "(243 )")
(edge 743 "(256 )")
(edge 744 "(257 )")
(edge 745 "(273 )")
(edge 746 "(274 )")
(edge 747 "(297 )")
(edge 748 "(298 )")
(edge 749 "(51 52 )")
(edge 750 "(729 730 )")
(edge 751 "(731 732 )")
(edge 752 "(733 734 )")
(edge 753 "(735 736 )")
(edge 754 "(737 738 )")
(edge 755 "(739 740 )")
(edge 756 "(741 742 )")
(edge 757 "(743 744 )")
(edge 758 "(745 746 )")
(edge 759 "(747 748 )")
(edge 760 "(73 )")
(edge 761 "(63 )")
(edge 762 "(0 )")
(edge 763 "(13 )")
(edge 764 "(5 )")
(edge 765 "(16 )")
(edge 766 "(2 )")
(edge 767 "(15 )")
(edge 768 "(6 )")
(edge 769 "(19 )")
(edge 770 "(10 )")
(edge 771 "(23 )")
(edge 772 "(8 )")
(edge 773 "(21 )")
(edge 774 "(123 )")
(edge 775 "(128 )")
(edge 776 "(132 )")
(edge 777 "(137 )")
(edge 778 "(158 )")
(edge 779 "(163 )")
(edge 780 "(175 )")
(edge 781 "(180 )")
(edge 782 "(64 )")
(edge 783 "(760 761 )")
(edge 784 "(774 775 )")
(edge 785 "(776 777 )")
(edge 786 "(778 779 )")
(edge 787 "(780 781 )")
(edge 788 "(74 )")
(edge 789 "(109 )")
(edge 790 "(111 )")
(edge 791 "(113 )")
(edge 792 "(144 )")
(edge 793 "(146 )")
(edge 794 "(148 )")
(edge 795 "(187 )")
(edge 796 "(189 )")
(edge 797 "(191 )")
(edge 798 "(207 )")
(edge 799 "(209 )")
(edge 800 "(211 )")
(edge 801 "(224 )")
(edge 802 "(226 )")
(edge 803 "(228 )")
(edge 804 "(251 )")
(edge 805 "(253 )")
(edge 806 "(255 )")
(edge 807 "(268 )")
(edge 808 "(270 )")
(edge 809 "(272 )")
(edge 810 "(292 )")
(edge 811 "(294 )")
(edge 812 "(296 )")
(edge 813 "(46 )")
(edge 814 "(789 790 791 )")
(edge 815 "(792 793 794 )")
(edge 816 "(795 796 797 )")
(edge 817 "(798 799 800 )")
(edge 818 "(801 802 803 )")
(edge 819 "(804 805 806 )")
(edge 820 "(807 808 809 )")
(edge 821 "(810 811 812 )")
(edge 822 "(48 )")
(edge 823 "(50 )")
(edge 824 "(77 )")
(edge 825 "(91 )")
(edge 826 "(96 )")
(edge 827 "(29 )")
(edge 828 "(72 )")
(edge 829 "(83 )")
(edge 830 "(715 720 721 723 725 727 )")
(edge 831 "(53 )")
(edge 832 "(749 )")
(edge 833 "(32 )")
(edge 834 "(55 )")
(edge 835 "(70 )")
(edge 836 "(87 )")
(edge 837 "(25 )")
(edge 838 "(62 )")
(edge 839 "(81 )")
(edge 840 "(198 )")
(edge 841 "(57 )")
(edge 842 "(85 )")
(edge 843 "(200 )")
(edge 844 "(34 )")
(edge 845 "(59 )")
(edge 846 "(75 )")
(edge 847 "(68 )")
(edge 848 "(67 )")
(edge 849 "(58 )")
(edge 850 "(76 )")
(edge 851 "(60 )")
(edge 852 "(78 )")
(edge 853 "(71 )")
(edge 854 "(84 )")
(edge 855 "(69 )")
(edge 856 "(88 )")
(edge 857 "(61 )")
(edge 858 "(82 )")
(edge 859 "(86 )")
(edge 860 "(89 )")
(edge 861 "(118 )")
(edge 862 "(99 )")
(edge 863 "(116 )")
(edge 864 "(153 )")
(edge 865 "(94 )")
(edge 866 "(151 )")
(edge 867 "(194 )")
(edge 868 "(101 )")
(edge 869 "(196 )")
(edge 870 "(214 )")
(edge 871 "(216 )")
(edge 872 "(95 )")
(edge 873 "(233 )")
(edge 874 "(102 )")
(edge 875 "(231 )")
(edge 876 "(97 )")
(edge 877 "(258 )")
(edge 878 "(260 )")
(edge 879 "(275 )")
(edge 880 "(100 )")
(edge 881 "(277 )")
(edge 882 "(299 )")
(edge 883 "(301 )")
(edge 884 "(98 )")
(edge 885 "(826 831 834 )")
(edge 886 "(861 862 863 )")
(edge 887 "(864 865 866 )")
(edge 888 "(867 868 869 )")
(edge 889 "(870 871 872 )")
(edge 890 "(873 874 875 )")
(edge 891 "(876 877 878 )")
(edge 892 "(879 880 881 )")
(edge 893 "(882 883 884 )")
(edge 894 "(110 )")
(edge 895 "(112 )")
(edge 896 "(117 )")
(edge 897 "(145 )")
(edge 898 "(147 )")
(edge 899 "(152 )")
(edge 900 "(188 )")
(edge 901 "(190 )")
(edge 902 "(195 )")
(edge 903 "(208 )")
(edge 904 "(210 )")
(edge 905 "(215 )")
(edge 906 "(225 )")
(edge 907 "(227 )")
(edge 908 "(232 )")
(edge 909 "(235 )")
(edge 910 "(236 )")
(edge 911 "(239 )")
(edge 912 "(240 )")
(edge 913 "(241 )")
(edge 914 "(244 )")
(edge 915 "(252 )")
(edge 916 "(254 )")
(edge 917 "(259 )")
(edge 918 "(269 )")
(edge 919 "(271 )")
(edge 920 "(276 )")
(edge 921 "(293 )")
(edge 922 "(295 )")
(edge 923 "(300 )")
(edge 924 "(47 )")
(edge 925 "(894 895 896 )")
(edge 926 "(897 898 899 )")
(edge 927 "(900 901 902 )")
(edge 928 "(903 904 905 )")
(edge 929 "(906 907 908 )")
(edge 930 "(909 910 911 )")
(edge 931 "(912 913 914 )")
(edge 932 "(915 916 917 )")
(edge 933 "(918 919 920 )")
(edge 934 "(921 922 923 )")
(edge 935 "(49 )")
(edge 936 "(54 )")
(edge 937 "(120 )")
(edge 938 "(92 )")
(edge 939 "(121 )")
(edge 940 "(122 )")
(edge 941 "(125 )")
(edge 942 "(126 )")
(edge 943 "(127 )")
(edge 944 "(130 )")
(edge 945 "(131 )")
(edge 946 "(90 )")
(edge 947 "(134 )")
(edge 948 "(135 )")
(edge 949 "(136 )")
(edge 950 "(129 )")
(edge 951 "(155 )")
(edge 952 "(156 )")
(edge 953 "(157 )")
(edge 954 "(160 )")
(edge 955 "(161 )")
(edge 956 "(162 )")
(edge 957 "(171 )")
(edge 958 "(174 )")
(edge 959 "(177 )")
(edge 960 "(178 )")
(edge 961 "(179 )")
(edge 962 "(93 )")
(edge 963 "(172 )")
(edge 964 "(173 )")
(edge 965 "(825 828 835 838 843 845 847 )")
(edge 966 "(848 849 851 853 855 857 860 )")
(edge 967 "(937 938 939 940 941 942 943 )")
(edge 968 "(944 945 946 947 948 949 950 )")
(edge 969 "(951 952 953 954 955 956 957 )")
(edge 970 "(958 959 960 961 962 963 964 )")
(edge 971 "(286 )")
(edge 972 "(287 )")
(edge 973 "(288 )")
(edge 974 "(289 )")
(edge 975 "(290 )")
(edge 976 "(291 )")
(edge 977 "(1 )")
(edge 978 "(762 764 766 768 770 772 )")
(edge 979 "(971 972 973 974 975 976 )")
(edge 980 "(3 )")
(edge 981 "(4 )")
(edge 982 "(7 )")
(edge 983 "(9 )")
(edge 984 "(11 )")
(edge 985 "(716 719 722 724 726 728 )")
(edge 986 "(782 788 )")
(edge 987 "(813 822 823 )")
(edge 988 "(924 935 936 )")
(edge 989 "(977 980 981 982 983 984 )")
(edge 990 "(164 )")
(edge 991 "(165 )")
(edge 992 "(167 )")
(edge 993 "(168 )")
(edge 994 "(169 )")
(edge 995 "(170 )")
(edge 996 "(279 )")
(edge 997 "(280 )")
(edge 998 "(282 )")
(edge 999 "(283 )")
(edge 1000 "(284 )")
(edge 1001 "(285 )")
(edge 1002 "(303 )")
(edge 1003 "(304 )")
(edge 1004 "(306 )")
(edge 1005 "(307 )")
(edge 1006 "(308 )")
(edge 1007 "(309 )")
(edge 1008 "(824 829 836 839 842 846 )")
(edge 1009 "(850 852 854 856 858 859 )")
(edge 1010 "(990 991 992 993 994 995 )")
(edge 1011 "(996 997 998 999 1000 1001 )")
(edge 1012 "(1002 1003 1004 1005 1006 1007 )")
(edge 1013 "(103 )")
(edge 1014 "(105 )")
(edge 1015 "(106 )")
(edge 1016 "(107 )")
(edge 1017 "(108 )")
(edge 1018 "(138 )")
(edge 1019 "(140 )")
(edge 1020 "(141 )")
(edge 1021 "(142 )")
(edge 1022 "(143 )")
(edge 1023 "(24 )")
(edge 1024 "(827 833 837 840 844 )")
(edge 1025 "(1013 1014 1015 1016 1017 )")
(edge 1026 "(1018 1019 1020 1021 1022 )")
(edge 1027 "(28 )")
(edge 1028 "(30 )")
(edge 1029 "(31 )")
(edge 1030 "(33 )")
(edge 1031 "(201 )")
(edge 1032 "(202 )")
(edge 1033 "(203 )")
(edge 1034 "(204 )")
(edge 1035 "(205 )")
(edge 1036 "(206 )")
(edge 1037 "(218 )")
(edge 1038 "(219 )")
(edge 1039 "(220 )")
(edge 1040 "(221 )")
(edge 1041 "(222 )")
(edge 1042 "(223 )")
(edge 1043 "(262 )")
(edge 1044 "(263 )")
(edge 1045 "(264 )")
(edge 1046 "(265 )")
(edge 1047 "(266 )")
(edge 1048 "(267 )")
(edge 1049 "(12 )")
(edge 1050 "(763 765 767 769 771 773 )")
(edge 1051 "(1031 1032 1033 1034 1035 1036 )")
(edge 1052 "(1037 1038 1039 1040 1041 1042 )")
(edge 1053 "(1043 1044 1045 1046 1047 1048 )")
(edge 1054 "(14 )")
(edge 1055 "(17 )")
(edge 1056 "(18 )")
(edge 1057 "(20 )")
(edge 1058 "(22 )")
(edge 1059 "(1023 1027 1028 1029 1030 )")
(edge 1060 "(1049 1054 1055 1056 1057 1058 )")
(edge 1061 "(26 )")
)
(property  0 double "viewRotation"
(default "0" "0")
)
(property  0 bool "viewSelection"
(default "false" "false")
)
(property  0 int "viewShape"
(default "4" "0")
(node 0 "120")
(node 1 "120")
(node 2 "120")
(node 3 "120")
(node 4 "120")
(node 5 "120")
(node 6 "120")
(node 7 "120")
(node 8 "120")
(node 9 "120")
(node 10 "120")
(node 11 "120")
(node 12 "120")
(node 13 "120")
(node 14 "120")
(node 15 "120")
(node 16 "120")
(node 17 "120")
(node 18 "120")
(node 19 "120")
(node 20 "120")
(node 21 "120")
(node 22 "120")
(node 23 "120")
(node 24 "120")
(node 25 "120")
(node 26 "120")
(node 27 "120")
(node 28 "120")
(node 29 "120")
(node 30 "120")
(node 31 "120")
(node 32 "120")
(node 33 "120")
(node 34 "120")
(node 35 "120")
(node 36 "120")
(node 37 "120")
(node 38 "120")
(node 39 "120")
(node 40 "120")
(node 41 "120")
(node 42 "120")
(node 43 "120")
(node 44 "120")
(node 45 "120")
(node 46 "120")
(node 47 "120")
(node 48 "120")
(node 49 "120")
(node 50 "120")
(node 51 "120")
(node 52 "124")
(node 53 "124")
(node 54 "124")
(node 55 "124")
(node 56 "124")
(node 57 "124")
(node 58 "124")
(node 59 "124")
(node 60 "124")
(node 61 "124")
(node 62 "124")
(node 63 "124")
(node 64 "124")
(node 65 "124")
(node 66 "124")
(node 67 "124")
(node 68 "124")
(node 69 "124")
(node 70 "124")
(node 71 "124")
(node 72 "124")
(node 73 "124")
(node 74 "124")
(node 75 "124")
(node 76 "124")
(node 77 "124")
(node 78 "124")
(node 79 "124")
(node 80 "124")
(node 81 "124")
(node 82 "124")
(node 83 "124")
(node 84 "124")
(node 85 "124")
(node 86 "124")
(node 87 "124")
(node 88 "124")
(node 89 "124")
(node 90 "124")
(node 91 "124")
(node 92 "124")
(node 93 "124")
(node 94 "124")
(node 95 "124")
(node 96 "124")
(node 97 "124")
(node 98 "124")
(node 99 "124")
(node 100 "124")
(node 101 "124")
(node 102 "124")
(node 103 "124")
(node 104 "124")
(node 105 "120")
(node 106 "120")
(node 107 "120")
(node 108 "120")
(node 109 "120")
(node 110 "120")
(node 111 "120")
(node 112 "120")
(node 113 "120")
(node 114 "120")
(node 115 "120")
(node 116 "120")
(node 117 "120")
(node 118 "120")
(node 119 "120")
(node 120 "120")
(node 121 "120")
(node 122 "120")
(node 123 "120")
(node 124 "120")
(node 125 "120")
(node 126 "120")
(node 127 "120")
(node 128 "120")
(node 129 "120")
(node 130 "120")
(node 131 "120")
(node 132 "120")
(node 133 "120")
(node 134 "120")
(node 135 "120")
(node 136 "120")
(node 137 "120")
(node 138 "120")
(node 139 "120")
(node 140 "120")
(node 141 "120")
(node 142 "120")
(node 143 "120")
(node 144 "120")
(node 145 "120")
(node 146 "120")
(node 147 "120")
(node 148 "120")
(node 149 "120")
(node 150 "120")
(node 151 "120")
(node 152 "120")
(node 153 "120")
(node 154 "120")
(node 155 "120")
(node 156 "120")
(node 157 "120")
(node 158 "120")
(node 159 "120")
(node 160 "120")
(node 161 "120")
(node 162 "120")
(node 163 "120")
(node 164 "120")
(node 165 "120")
(node 166 "120")
(node 167 "120")
(node 168 "120")
(node 169 "120")
(node 170 "120")
(node 171 "120")
(node 172 "120")
(node 173 "120")
(node 174 "120")
(node 175 "120")
(node 176 "120")
(node 177 "120")
(node 178 "120")
(node 179 "120")
(node 180 "120")
(node 181 "120")
(node 182 "120")
(node 183 "120")
(node 184 "120")
(node 185 "120")
(node 186 "120")
(node 187 "120")
(node 188 "120")
(node 189 "120")
(node 190 "120")
(node 191 "120")
(node 192 "120")
(node 193 "120")
(node 194 "120")
(node 195 "120")
(node 196 "120")
(node 197 "120")
(node 198 "120")
(node 199 "120")
(node 200 "120")
(node 201 "120")
(node 202 "120")
(node 203 "120")
(node 204 "120")
(node 205 "120")
(node 206 "120")
(node 207 "120")
(node 208 "120")
(node 209 "120")
(node 210 "120")
(node 211 "120")
(node 212 "120")
(node 213 "120")
(node 214 "120")
(node 215 "120")
(node 216 "120")
(node 217 "120")
(node 218 "120")
(node 219 "120")
(node 220 "120")
(node 221 "120")
(node 222 "120")
(node 223 "120")
(node 224 "120")
(node 225 "120")
(node 226 "120")
(node 227 "120")
(node 228 "120")
(node 229 "120")
(node 230 "120")
(node 231 "120")
(node 232 "120")
(node 233 "120")
(node 234 "120")
(node 235 "120")
(node 236 "120")
(node 237 "120")
(node 238 "120")
(node 239 "120")
(node 240 "120")
(node 241 "120")
(node 242 "120")
(node 243 "120")
(node 244 "120")
(node 245 "120")
(node 246 "120")
(node 247 "120")
(node 248 "120")
(node 249 "120")
(node 250 "120")
(node 251 "120")
(node 252 "120")
(node 253 "120")
(node 254 "120")
(node 255 "120")
(node 256 "120")
(node 257 "120")
(node 258 "120")
(node 259 "120")
(node 260 "120")
(node 261 "120")
(node 262 "120")
(node 263 "120")
(node 264 "120")
(node 265 "120")
(node 266 "120")
(node 267 "120")
(node 268 "120")
(node 269 "120")
(node 270 "120")
(node 271 "120")
(node 272 "120")
(node 273 "120")
(node 274 "120")
(node 275 "120")
(node 276 "120")
(node 277 "120")
(node 278 "120")
(node 279 "120")
(node 280 "120")
(node 281 "120")
(node 282 "120")
(node 283 "120")
(node 284 "120")
(node 285 "120")
(node 286 "120")
(node 287 "120")
(node 288 "120")
(node 289 "120")
(node 290 "120")
(node 291 "120")
(node 292 "120")
(node 293 "120")
(node 294 "120")
(node 295 "120")
(node 296 "120")
(node 297 "120")
(node 298 "120")
(node 299 "120")
(node 300 "120")
(node 301 "120")
(node 302 "120")
(node 303 "120")
(node 304 "120")
(node 305 "120")
(node 306 "120")
(node 307 "120")
(node 308 "120")
(node 309 "120")
(node 310 "120")
(node 311 "120")
(node 312 "120")
(node 313 "120")
(node 314 "124")
(node 315 "120")
(node 316 "120")
(node 317 "120")
(node 318 "120")
(node 319 "120")
(node 320 "124")
(node 321 "120")
(node 322 "120")
(node 323 "120")
(node 324 "120")
(node 325 "120")
(node 326 "120")
(node 327 "120")
(node 328 "120")
(node 329 "120")
(node 330 "124")
(node 331 "120")
(node 332 "120")
(node 333 "124")
(node 334 "120")
(node 335 "120")
(node 336 "120")
(node 337 "120")
(node 338 "124")
(node 339 "120")
(node 340 "124")
(node 341 "120")
(node 342 "120")
(node 343 "120")
(node 344 "120")
(node 345 "124")
(node 346 "120")
(node 347 "120")
(node 348 "120")
(node 349 "124")
(node 350 "120")
(node 351 "120")
(node 352 "120")
(node 353 "120")
(node 354 "120")
(node 355 "120")
(node 356 "120")
(node 357 "120")
(node 358 "120")
(node 359 "120")
(node 360 "124")
(node 361 "120")
(node 362 "120")
(node 363 "120")
(node 364 "120")
(node 365 "124")
(node 366 "120")
(node 367 "120")
(node 368 "120")
(node 369 "120")
(node 370 "120")
(node 371 "120")
(node 372 "120")
(node 373 "120")
(node 374 "120")
(node 375 "120")
(node 376 "124")
(node 377 "120")
(node 378 "120")
(node 379 "120")
(node 380 "120")
(node 381 "120")
(node 382 "120")
(node 383 "120")
(node 384 "120")
(node 385 "124")
(node 386 "120")
(node 387 "120")
(node 388 "120")
(node 389 "120")
(node 390 "120")
(node 391 "120")
(node 392 "124")
(node 393 "120")
(node 394 "120")
(node 395 "120")
(node 396 "124")
(node 397 "120")
(node 398 "120")
(node 399 "124")
(node 400 "120")
(node 401 "120")
(node 402 "124")
(node 403 "120")
(node 404 "120")
(node 405 "120")
(node 406 "120")
(node 407 "120")
(node 408 "120")
(node 409 "120")
(node 410 "120")
(node 411 "120")
(node 412 "120")
(node 413 "124")
(node 414 "120")
(node 415 "120")
(node 416 "120")
(node 417 "120")
(node 418 "120")
(node 419 "120")
(node 420 "124")
(node 421 "120")
(node 422 "120")
(node 423 "120")
(node 424 "120")
(node 425 "120")
(node 426 "120")
(node 427 "120")
(node 428 "120")
(node 429 "124")
(node 430 "120")
(node 431 "120")
(node 432 "120")
(node 433 "120")
(node 434 "120")
(node 435 "120")
(node 436 "120")
(node 437 "120")
(node 438 "120")
(node 439 "120")
(node 440 "124")
(node 441 "120")
(node 442 "120")
(node 443 "120")
(node 444 "120")
(node 445 "120")
(node 446 "120")
(node 447 "120")
(node 448 "120")
(node 449 "120")
(node 450 "120")
(node 451 "124")
(node 452 "120")
(node 453 "120")
(node 454 "120")
(node 455 "120")
(node 456 "124")
(node 457 "120")
(node 458 "124")
(node 459 "120")
(node 460 "120")
(node 461 "120")
(node 462 "120")
(node 463 "124")
(node 464 "120")
(node 465 "120")
(node 466 "124")
(node 467 "120")
(node 468 "120")
(node 469 "120")
(node 470 "124")
(node 471 "120")
)
(property  0 size "viewSize"
(default "(1,1,1)" "(0.125,0.125,0.5)")
(node 0 "(3,3,3)")
(node 1 "(3,3,3)")
(node 2 "(3,3,3)")
(node 3 "(3,3,3)")
(node 4 "(3,3,3)")
(node 5 "(3,3,3)")
(node 6 "(3,3,3)")
(node 7 "(3,3,3)")
(node 8 "(3,3,3)")
(node 9 "(3,3,3)")
(node 10 "(3,3,3)")
(node 11 "(3,3,3)")
(node 12 "(3,3,3)")
(node 13 "(3,3,3)")
(node 14 "(3,3,3)")
(node 15 "(3,3,3)")
(node 16 "(3,3,3)")
(node 17 "(3,3,3)")
(node 18 "(3,3,3)")
(node 19 "(3,3,3)")
(node 20 "(3,3,3)")
(node 21 "(3,3,3)")
(node 22 "(3,3,3)")
(node 23 "(3,3,3)")
(node 24 "(3,3,3)")
(node 25 "(4,4,4)")
(node 26 "(3,3,3)")
(node 27 "(3,3,3)")
(node 28 "(3,3,3)")
(node 29 "(3,3,3)")
(node 30 "(3,3,3)")
(node 31 "(3,3,3)")
(node 32 "(3,3,3)")
(node 33 "(3,3,3)")
(node 34 "(3,3,3)")
(node 35 "(3,3,3)")
(node 36 "(3,3,3)")
(node 37 "(3,3,3)")
(node 38 "(3,3,3)")
(node 39 "(3,3,3)")
(node 40 "(3,3,3)")
(node 41 "(4,4,4)")
(node 42 "(3,3,3)")
(node 43 "(3,3,3)")
(node 44 "(3,3,3)")
(node 45 "(3,3,3)")
(node 46 "(3,3,3)")
(node 47 "(3,3,3)")
(node 48 "(3,3,3)")
(node 49 "(3,3,3)")
(node 50 "(3,3,3)")
(node 51 "(3,3,3)")
(node 65 "(3,3,3)")
(node 86 "(3,3,3)")
(node 91 "(3,3,3)")
(node 98 "(3,3,3)")
(node 105 "(3,3,3)")
(node 106 "(4,4,4)")
(node 107 "(3,3,3)")
(node 108 "(3,3,3)")
(node 109 "(3,3,3)")
(node 110 "(3,3,3)")
(node 111 "(3,3,3)")
(node 112 "(3,3,3)")
(node 113 "(3,3,3)")
(node 114 "(3,3,3)")
(node 115 "(3,3,3)")
(node 116 "(3,3,3)")
(node 117 "(3,3,3)")
(node 118 "(3,3,3)")
(node 119 "(3,3,3)")
(node 120 "(3,3,3)")
(node 121 "(4,4,4)")
(node 122 "(3,3,3)")
(node 123 "(3,3,3)")
(node 124 "(3,3,3)")
(node 125 "(3,3,3)")
(node 126 "(4,4,4)")
(node 127 "(3,3,3)")
(node 128 "(3,3,3)")
(node 129 "(3,3,3)")
(node 130 "(3,3,3)")
(node 131 "(3,3,3)")
(node 132 "(3,3,3)")
(node 133 "(3,3,3)")
(node 134 "(3,3,3)")
(node 135 "(4,4,4)")
(node 136 "(3,3,3)")
(node 137 "(3,3,3)")
(node 138 "(3,3,3)")
(node 139 "(3,3,3)")
(node 140 "(3,3,3)")
(node 141 "(4,4,4)")
(node 142 "(3,3,3)")
(node 143 "(3,3,3)")
(node 144 "(3,3,3)")
(node 145 "(3,3,3)")
(node 146 "(3,3,3)")
(node 147 "(3,3,3)")
(node 148 "(3,3,3)")
(node 149 "(3,3,3)")
(node 150 "(3,3,3)")
(node 151 "(3,3,3)")
(node 152 "(3,3,3)")
(node 153 "(3,3,3)")
(node 154 "(3,3,3)")
(node 155 "(3,3,3)")
(node 156 "(4,4,4)")
(node 157 "(3,3,3)")
(node 158 "(3,3,3)")
(node 159 "(3,3,3)")
(node 160 "(3,3,3)")
(node 161 "(4,4,4)")
(node 162 "(3,3,3)")
(node 163 "(3,3,3)")
(node 164 "(3,3,3)")
(node 165 "(3,3,3)")
(node 166 "(3,3,3)")
(node 167 "(3,3,3)")
(node 168 "(4,4,4)")
(node 169 "(3,3,3)")
(node 170 "(3,3,3)")
(node 171 "(3,3,3)")
(node 172 "(3,3,3)")
(node 173 "(3,3,3)")
(node 174 "(3,3,3)")
(node 175 "(3,3,3)")
(node 176 "(3,3,3)")
(node 177 "(3,3,3)")
(node 178 "(4,4,4)")
(node 179 "(3,3,3)")
(node 180 "(3,3,3)")
(node 181 "(3,3,3)")
(node 182 "(3,3,3)")
(node 183 "(3,3,3)")
(node 184 "(3,3,3)")
(node 185 "(3,3,3)")
(node 186 "(3,3,3)")
(node 187 "(3,3,3)")
(node 188 "(3,3,3)")
(node 189 "(3,3,3)")
(node 190 "(3,3,3)")
(node 191 "(3,3,3)")
(node 192 "(3,3,3)")
(node 193 "(3,3,3)")
(node 194 "(3,3,3)")
(node 195 "(3,3,3)")
(node 196 "(3,3,3)")
(node 197 "(3,3,3)")
(node 198 "(3,3,3)")
(node 199 "(4,4,4)")
(node 200 "(3,3,3)")
(node 201 "(3,3,3)")
(node 202 "(3,3,3)")
(node 203 "(3,3,3)")
(node 204 "(3,3,3)")
(node 205 "(3,3,3)")
(node 206 "(3,3,3)")
(node 207 "(3,3,3)")
(node 208 "(3,3,3)")
(node 209 "(3,3,3)")
(node 210 "(3,3,3)")
(node 211 "(3,3,3)")
(node 212 "(3,3,3)")
(node 213 "(3,3,3)")
(node 214 "(3,3,3)")
(node 215 "(3,3,3)")
(node 216 "(3,3,3)")
(node 217 "(3,3,3)")
(node 218 "(3,3,3)")
(node 219 "(4,4,4)")
(node 220 "(3,3,3)")
(node 221 "(3,3,3)")
(node 222 "(3,3,3)")
(node 223 "(3,3,3)")
(node 224 "(3,3,3)")
(node 225 "(3,3,3)")
(node 226 "(3,3,3)")
(node 227 "(3,3,3)")
(node 228 "(3,3,3)")
(node 229 "(3,3,3)")
(node 230 "(3,3,3)")
(node 231 "(3,3,3)")
(node 232 "(3,3,3)")
(node 233 "(3,3,3)")
(node 234 "(3,3,3)")
(node 235 "(3,3,3)")
(node 236 "(4,4,4)")
(node 237 "(3,3,3)")
(node 238 "(3,3,3)")
(node 239 "(3,3,3)")
(node 240 "(3,3,3)")
(node 241 "(3,3,3)")
(node 242 "(3,3,3)")
(node 243 "(3,3,3)")
(node 244 "(3,3,3)")
(node 245 "(3,3,3)")
(node 246 "(3,3,3)")
(node 247 "(3,3,3)")
(node 248 "(3,3,3)")
(node 249 "(3,3,3)")
(node 250 "(3,3,3)")
(node 251 "(3,3,3)")
(node 252 "(3,3,3)")
(node 253 "(3,3,3)")
(node 254 "(3,3,3)")
(node 255 "(3,3,3)")
(node 256 "(3,3,3)")
(node 257 "(3,3,3)")
(node 258 "(3,3,3)")
(node 259 "(3,3,3)")
(node 260 "(3,3,3)")
(node 261 "(3,3,3)")
(node 262 "(3,3,3)")
(node 263 "(4,4,4)")
(node 264 "(3,3,3)")
(node 265 "(3,3,3)")
(node 266 "(3,3,3)")
(node 267 "(3,3,3)")
(node 268 "(3,3,3)")
(node 269 "(3,3,3)")
(node 270 "(3,3,3)")
(node 271 "(3,3,3)")
(node 272 "(3,3,3)")
(node 273 "(3,3,3)")
(node 274 "(3,3,3)")
(node 275 "(3,3,3)")
(node 276 "(3,3,3)")
(node 277 "(3,3,3)")
(node 278 "(3,3,3)")
(node 279 "(3,3,3)")
(node 280 "(4,4,4)")
(node 281 "(3,3,3)")
(node 282 "(3,3,3)")
(node 283 "(4,4,4)")
(node 284 "(3,3,3)")
(node 285 "(3,3,3)")
(node 286 "(3,3,3)")
(node 287 "(3,3,3)")
(node 288 "(3,3,3)")
(node 289 "(3,3,3)")
(node 290 "(3,3,3)")
(node 291 "(3,3,3)")
(node 292 "(3,3,3)")
(node 293 "(3,3,3)")
(node 294 "(3,3,3)")
(node 295 "(3,3,3)")
(node 296 "(3,3,3)")
(node 297 "(3,3,3)")
(node 298 "(3,3,3)")
(node 299 "(3,3,3)")
(node 300 "(3,3,3)")
(node 301 "(3,3,3)")
(node 302 "(3,3,3)")
(node 303 "(3,3,3)")
(node 304 "(4,4,4)")
(node 305 "(3,3,3)")
(node 306 "(3,3,3)")
(node 307 "(4,4,4)")
(node 308 "(3,3,3)")
(node 309 "(3,3,3)")
(node 310 "(3,3,3)")
(node 311 "(3,3,3)")
(node 312 "(5,5,0)")
(node 313 "(5,5,0)")
(node 314 "(6,6,0)")
(node 315 "(10,10,0)")
(node 316 "(10,10,0)")
(node 317 "(5,5,0)")
(node 318 "(5,5,0)")
(node 319 "(5,5,0)")
(node 320 "(6,6,0)")
(node 321 "(10,10,0)")
(node 322 "(5,5,0)")
(node 323 "(5,5,0)")
(node 324 "(5,5,0)")
(node 325 "(5,5,0)")
(node 326 "(5,5,0)")
(node 327 "(5,5,0)")
(node 328 "(5,5,0)")
(node 329 "(5,5,0)")
(node 330 "(6,6,0)")
(node 331 "(5,5,0)")
(node 332 "(5,5,0)")
(node 333 "(6,6,0)")
(node 334 "(5,5,0)")
(node 335 "(5,5,0)")
(node 336 "(5,5,0)")
(node 337 "(5,5,0)")
(node 338 "(6,6,0)")
(node 339 "(5,5,0)")
(node 340 "(6,6,0)")
(node 341 "(5,5,0)")
(node 342 "(5,5,0)")
(node 343 "(5,5,0)")
(node 344 "(5,5,0)")
(node 345 "(6,6,0)")
(node 346 "(5,5,0)")
(node 347 "(5,5,0)")
(node 348 "(5,5,0)")
(node 349 "(6,6,0)")
(node 350 "(5,5,0)")
(node 351 "(5,5,0)")
(node 352 "(5,5,0)")
(node 353 "(5,5,0)")
(node 354 "(5,5,0)")
(node 355 "(5,5,0)")
(node 356 "(5,5,0)")
(node 357 "(5,5,0)")
(node 358 "(5,5,0)")
(node 359 "(5,5,0)")
(node 360 "(6,6,0)")
(node 361 "(5,5,0)")
(node 362 "(5,5,0)")
(node 363 "(5,5,0)")
(node 364 "(5,5,0)")
(node 365 "(6,6,0)")
(node 366 "(5,5,0)")
(node 367 "(5,5,0)")
(node 368 "(5,5,0)")
(node 369 "(5,5,0)")
(node 370 "(5,5,0)")
(node 371 "(5,5,0)")
(node 372 "(5,5,0)")
(node 373 "(5,5,0)")
(node 374 "(5,5,0)")
(node 375 "(5,5,0)")
(node 376 "(6,6,0)")
(node 377 "(5,5,0)")
(node 378 "(5,5,0)")
(node 379 "(5,5,0)")
(node 380 "(5,5,0)")
(node 381 "(5,5,0)")
(node 382 "(5,5,0)")
(node 383 "(5,5,0)")
(node 384 "(5,5,0)")
(node 385 "(6,6,0)")
(node 386 "(10,10,0)")
(node 387 "(10,10,0)")
(node 388 "(10,10,0)")
(node 389 "(10,10,0)")
(node 390 "(5,5,0)")
(node 391 "(5,5,0)")
(node 392 "(6,6,0)")
(node 393 "(5,5,0)")
(node 394 "(5,5,0)")
(node 395 "(5,5,0)")
(node 396 "(6,6,0)")
(node 397 "(5,5,0)")
(node 398 "(5,5,0)")
(node 399 "(6,6,0)")
(node 400 "(5,5,0)")
(node 401 "(5,5,0)")
(node 402 "(5,5,5)")
(node 403 "(5,5,0)")
(node 404 "(5,5,0)")
(node 405 "(5,5,0)")
(node 406 "(5,5,0)")
(node 407 "(5,5,0)")
(node 408 "(5,5,0)")
(node 409 "(5,5,0)")
(node 410 "(5,5,0)")
(node 411 "(5,5,0)")
(node 412 "(5,5,0)")
(node 413 "(5,5,5)")
(node 414 "(9,9,9)")
(node 415 "(9,9,9)")
(node 416 "(5,5,0)")
(node 417 "(5,5,0)")
(node 418 "(5,5,0)")
(node 419 "(5,5,0)")
(node 420 "(5,5,5)")
(node 421 "(5,5,0)")
(node 422 "(5,5,0)")
(node 423 "(5,5,0)")
(node 424 "(5,5,0)")
(node 425 "(5,5,0)")
(node 426 "(5,5,0)")
(node 427 "(5,5,0)")
(node 428 "(5,5,0)")
(node 429 "(5,5,5)")
(node 430 "(9,9,9)")
(node 431 "(9,9,9)")
(node 432 "(5,5,0)")
(node 433 "(5,5,0)")
(node 434 "(5,5,0)")
(node 435 "(5,5,0)")
(node 436 "(5,5,0)")
(node 437 "(5,5,0)")
(node 438 "(5,5,0)")
(node 439 "(5,5,0)")
(node 440 "(5,5,5)")
(node 441 "(5,5,0)")
(node 442 "(5,5,0)")
(node 443 "(5,5,0)")
(node 444 "(5,5,0)")
(node 445 "(5,5,0)")
(node 446 "(5,5,0)")
(node 447 "(5,5,0)")
(node 448 "(5,5,0)")
(node 449 "(5,5,0)")
(node 450 "(5,5,0)")
(node 451 "(5,5,5)")
(node 452 "(5,5,0)")
(node 453 "(5,5,0)")
(node 454 "(5,5,0)")
(node 455 "(5,5,0)")
(node 456 "(5,5,5)")
(node 457 "(5,5,0)")
(node 458 "(5,5,5)")
(node 459 "(9,9,9)")
(node 460 "(5,5,0)")
(node 461 "(5,5,0)")
(node 462 "(5,5,0)")
(node 463 "(5,5,5)")
(node 464 "(5,5,0)")
(node 465 "(5,5,0)")
(node 466 "(5,5,5)")
(node 467 "(5,5,0)")
(node 468 "(5,5,0)")
(node 469 "(5,5,0)")
(node 470 "(5,5,5)")
(node 471 "(9,9,9)")
)
(property  0 int "viewSrcAnchorShape"
(default "0" "-1")
)
(property  0 size "viewSrcAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  0 string "viewTexture"
(default "" "")
)
(property  0 int "viewTgtAnchorShape"
(default "0" "50")
)
(property  0 size "viewTgtAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  1 string "ancestor"
(default "" "")
(node 0 "hydroxy fatty acyl-CoA")
(node 1 "hydroxy fatty acyl-CoA")
(node 2 "hydroxy fatty acyl-CoA")
(node 3 "hydroxy fatty acyl-CoA")
(node 4 "hydroxy fatty acyl-CoA")
(node 5 "hydroxy fatty acyl-CoA")
(node 6 "3-oxo-fatty acyl-CoA")
(node 7 "3-oxo-fatty acyl-CoA")
(node 8 "3-oxo-fatty acyl-CoA")
(node 9 "3-oxo-fatty acyl-CoA")
(node 10 "3-oxo-fatty acyl-CoA")
(node 11 "3-oxo-fatty acyl-CoA")
(node 15 "straight-chain saturated fatty acid anion")
(node 17 "straight-chain saturated fatty acid anion")
(node 18 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 20 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 21 "unsaturated fatty acyl-CoA")
(node 23 "straight-chain saturated fatty acid anion")
(node 24 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 25 "straight-chain saturated fatty acid anion, but not long-chain fatty acid anion")
(node 26 "straight-chain saturated fatty acid anion")
(node 27 "straight-chain fatty acid anion")
(node 28 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 31 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 32 "straight-chain saturated fatty acid anion")
(node 33 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 34 "unsaturated fatty acyl-CoA")
(node 36 "straight-chain saturated fatty acid anion")
(node 37 "straight-chain fatty acid anion")
(node 38 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 39 "straight-chain saturated fatty acid anion")
(node 40 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 41 "fatty acyl-CoA, but not hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor long-chain fatty acyl-CoA")
(node 42 "unsaturated fatty acyl-CoA")
(node 43 "unsaturated fatty acyl-CoA")
(node 44 "unsaturated fatty acyl-CoA")
(node 45 "unsaturated fatty acyl-CoA")
(node 46 "unsaturated fatty acyl-CoA")
(node 47 "unsaturated fatty acyl-CoA")
(node 50 "straight-chain saturated fatty acid anion")
(node 51 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 52 "6.0")
(node 53 "6.0")
(node 54 "6.0")
(node 55 "6.0")
(node 56 "6.0")
(node 57 "6.0")
(node 58 "12.0")
(node 59 "12.0")
(node 60 "12.0")
(node 61 "12.0")
(node 62 "12.0")
(node 63 "12.0")
(node 64 "3.0")
(node 65 "8.0")
(node 66 "3.0")
(node 67 "3.0")
(node 68 "3.0")
(node 69 "3.0")
(node 70 "5.0")
(node 71 "5.0")
(node 72 "5.0")
(node 73 "5.0")
(node 74 "5.0")
(node 75 "5.0")
(node 76 "11.0")
(node 77 "13.0")
(node 78 "11.0")
(node 79 "13.0")
(node 80 "11.0")
(node 81 "0.0")
(node 82 "0.0")
(node 83 "1.0")
(node 84 "13.0")
(node 85 "1.0")
(node 86 "10.0")
(node 87 "2.0")
(node 88 "2.0")
(node 89 "2.0")
(node 90 "7.0")
(node 91 "4.0")
(node 92 "2.0")
(node 93 "2.0")
(node 94 "2.0")
(node 95 "7.0")
(node 96 "14.0")
(node 97 "14.0")
(node 98 "9.0")
(node 99 "14.0")
(node 100 "14.0")
(node 101 "14.0")
(node 102 "14.0")
(node 103 "2.0")
(node 104 "1.0")
(node 200 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 201 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 202 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 314 "5.0")
(node 315 "hydroxy fatty acyl-CoA")
(node 316 "long-chain fatty acid anion")
(node 320 "7.0")
(node 321 "3-oxo-fatty acyl-CoA(4-)")
(node 330 "11.0")
(node 333 "8.0")
(node 338 "9.0")
(node 340 "4.0")
(node 345 "1.0")
(node 349 "15.0")
(node 360 "13.0")
(node 365 "2.0")
(node 376 "6.0")
(node 385 "10.0")
(node 386 "straight-chain saturated fatty acid anion, but not long-chain fatty acid anion")
(node 387 "unsaturated fatty acyl-CoA")
(node 388 "long-chain fatty acyl-CoA, but not hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 389 "fatty acyl-CoA, but not hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA(4-), nor long-chain fatty acyl-CoA")
(node 392 "14.0")
(node 396 "3.0")
(node 399 "12.0")
(node 402 "5.0")
(node 413 "0.0")
(node 414 "straight-chain fatty acid anion")
(node 415 "hydroxy fatty acyl-CoA")
(node 420 "7.0")
(node 429 "11.0")
(node 430 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA, nor 3-oxo-fatty acyl-CoA, nor hydroxy fatty acyl-CoA")
(node 431 "straight-chain saturated fatty acid anion")
(node 440 "1.0")
(node 451 "13.0")
(node 456 "2.0")
(node 458 "6.0")
(node 459 "unsaturated fatty acyl-CoA")
(node 463 "14.0")
(node 466 "3.0")
(node 470 "12.0")
(node 471 "3-oxo-fatty acyl-CoA")
)
(property  1 vector<string> "ancestor_chebi_id"
(default "()" "()")
(node 0 "(\"chebi:61902\")")
(node 1 "(\"chebi:61902\")")
(node 2 "(\"chebi:61902\")")
(node 3 "(\"chebi:61902\")")
(node 4 "(\"chebi:61902\")")
(node 5 "(\"chebi:61902\")")
(node 6 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
(node 7 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
(node 8 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
(node 9 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
(node 10 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
(node 11 "(\"citexplore:8541311\", \"chebi:20161\", \"citexplore:11315193\", \"citexplore:7957058\", \"chebi:15489\", \"chebi:11868\", \"chebi:1629\", \"citexplore:11418601\", \"chebi:13606\", \"kegg.compound:c00264\", \"citexplore:11879205\")")
(node 15 "(\"chebi:58954\")")
(node 17 "(\"chebi:58954\")")
(node 18 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 20 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 21 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 23 "(\"chebi:58954\")")
(node 24 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 25 "(\"chebi:58954\")")
(node 26 "(\"chebi:58954\")")
(node 27 "(\"chebi:59203\")")
(node 28 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 31 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 32 "(\"chebi:58954\")")
(node 33 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 34 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 36 "(\"chebi:58954\")")
(node 37 "(\"chebi:59203\")")
(node 38 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 39 "(\"chebi:58954\")")
(node 40 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 41 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 200 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 42 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 201 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 43 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 202 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 44 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 45 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 46 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 47 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 50 "(\"chebi:58954\")")
(node 51 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
)
(property  909 vector<string> "comprises"
(default "()" "()")
(node 400 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 401 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 402 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 403 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 404 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 405 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 406 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 407 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 408 "(\"NADP(+) [peroxisome]\", \"NADP(+) [peroxisome]\")")
(node 409 "(\"NADPH [peroxisome]\", \"NADPH [peroxisome]\")")
(node 410 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 411 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 412 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 413 "(\"\", \"\")")
(node 414 "(\"myristoleate [peroxisome]\", \"palmitoleate [peroxisome]\")")
(node 415 "(\"(S)-3-hydroxydecanoyl-CoA [peroxisome]\", \"(S)-3-hydroxyhexacosanoyl-CoA [peroxisome]\", \"(S)-3-hydroxylauroyl-CoA [peroxisome]\", \"(S)-3-hydroxypalmitoyl-CoA [peroxisome]\", \"(S)-3-hydroxytetradecanoyl-CoA [peroxisome]\", \"3-hydroxyoctadecanoyl-CoA [peroxisome]\")")
(node 416 "(\"AMP [peroxisome]\", \"AMP [peroxisome]\")")
(node 417 "(\"ATP [peroxisome]\", \"ATP [peroxisome]\")")
(node 418 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 419 "(\"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\")")
(node 420 "(\"\", \"\")")
(node 421 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 422 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 423 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 424 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 425 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 426 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 427 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 428 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 429 "(\"\", \"\", \"\")")
(node 430 "(\"decanoyl-CoA [peroxisome]\", \"hexacosanoyl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\", \"myristoyl-CoA [peroxisome]\", \"octadec-9-ynoyl-CoA [peroxisome]\", \"octanoyl-CoA [peroxisome]\", \"palmitoyl-CoA [peroxisome]\", \"stearoyl-CoA [peroxisome]\", \"butyryl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\")")
(node 431 "(\"cerotate [peroxisome]\", \"decanoate [peroxisome]\", \"laurate [peroxisome]\", \"myristate [peroxisome]\", \"octanoate [peroxisome]\", \"palmitate [peroxisome]\", \"stearate [peroxisome]\", \"butyrate [peroxisome]\")")
(node 432 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 433 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 434 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 435 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 436 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 437 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 438 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 439 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 440 "(\"\", \"\", \"\")")
(node 441 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 442 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 443 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 444 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 445 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 446 "(\"NADP(+) [peroxisome]\", \"NADP(+) [peroxisome]\", \"NADP(+) [peroxisome]\")")
(node 447 "(\"NADPH [peroxisome]\", \"NADPH [peroxisome]\", \"NADPH [peroxisome]\")")
(node 448 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 449 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 450 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 451 "(\"\", \"\", \"\")")
(node 452 "(\"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\")")
(node 453 "(\"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\")")
(node 454 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 455 "(\"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\")")
(node 456 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 457 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 458 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 459 "(\"hexadec-2-enoyl-CoA [peroxisome]\", \"oleoyl-CoA [peroxisome]\", \"tetradecenoyl-CoA [peroxisome]\", \"trans-dec-2-enoyl-CoA [peroxisome]\", \"trans-dodec-2-enoyl-CoA [peroxisome]\", \"trans-hexacos-2-enoyl-CoA [peroxisome]\", \"trans-octadec-2-enoyl-CoA [peroxisome]\", \"trans-tetradec-2-enoyl-CoA [peroxisome]\")")
(node 460 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 461 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 462 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 463 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 464 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 465 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 466 "(\"\", \"\", \"\", \"\", \"\")")
(node 467 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 468 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 469 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 470 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 471 "(\"3-oxodecanoyl-CoA [peroxisome]\", \"3-oxohexacosanoyl-CoA [peroxisome]\", \"3-oxolauroyl-CoA [peroxisome]\", \"3-oxooctadecanoyl-CoA [peroxisome]\", \"3-oxopalmitoyl-CoA [peroxisome]\", \"3-oxotetradecanoyl-CoA [peroxisome]\")")
)
(property  65 vector<string> "synonyms"
(default "()" "()")
(node 199 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 106 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 400 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 401 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 304 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 403 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 404 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 307 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 405 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 406 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 407 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 408 "(\"NADP(+)\", \"C21H29N7O17P3\", \"InChIKey=XJLXINKUBYWONI-NNYOXOHSSA-O\", \"TPN\", \"oxidized nicotinamide-adenine dinucleotide phosphate\", \"InChI=1S/C21H28N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1-4,7-8,10-11,13-16,20-21,29-31H,5-6H2,(H7-,22,23,24,25,32,33,34,35,36,37,38,39)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"Nicotinamide adenine dinucleotide phosphate\", \"2'-O-phosphonoadenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NADP+\", \"beta-Nicotinamide adenine dinucleotide phosphate\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](OP(O)(O)=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"NADP\", \"beta-nicotinamide adenine dinucleotide phosphate\", \"Triphosphopyridine nucleotide\")")
(node 409 "(\"NADPH(4-)\", \"InChI=1S/C21H30N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1,3-4,7-8,10-11,13-16,20-21,29-31H,2,5-6H2,(H2,23,32)(H,36,37)(H,38,39)(H2,22,24,25)(H2,33,34,35)/p-4/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"NADPH\", \"NADPH tetraanion\", \"2'-O-phosphonatoadenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] diphosphate}\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OC[C@H]2O[C@H]([C@H](OP([O-])([O-])=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"C21H26N7O17P3\", \"InChIKey=ACFIXJIJDZMPPO-NNYOXOHSSA-J\")")
(node 410 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 411 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 412 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 121 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 219 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 25 "(\"lignoceric acid\", \"C24H48O2\", \"CCCCCCCCCCCCCCCCCCCCCCCC(O)=O\", \"Lignozerinsaeure\", \"InChIKey=QZZGJDVWLFXDLK-UHFFFAOYSA-N\", \"tetracosanic acid\", \"tetracosoic acid\", \"CH3-[CH2]22-COOH\", \"tetraicosanoic acid\", \"Tetracosanoic acid\", \"n-tetracosanoic acid\", \"Lignoceric acid\", \"tetraeicosanoic acid\", \"tetracosanoic acid\", \"InChI=1S/C24H48O2/c1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24(25)26/h2-23H2,1H3,(H,25,26)\", \"Tetracosansaeure\")")
(node 414 "(\"straight-chain fatty acid anion\", \"straight-chain FA anion\", \"straight-chain fatty acid anions\", \"straight-chain FA anions\")")
(node 415 "(\"hydroxy fatty acyl-CoA\", \"hydroxy FA-CoA\", \"hydroxy-fatty acyl-CoAs\", \"hydroxy-fatty acyl-coenzyme A\", \"hydroxy-FA-coenzyme A\")")
(node 416 "(\"AMP(2-)\", \"5'-O-phosphonatoadenosine\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"InChI=1S/C10H14N5O7P/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(22-10)1-21-23(18,19)20/h2-4,6-7,10,16-17H,1H2,(H2,11,12,13)(H2,18,19,20)/p-2/t4-,6-,7-,10-/m1/s1\", \"AMP dianion\", \"InChIKey=UDMBCSSLTHHNCD-KQYNXXCUSA-L\", \"Adenosine-5-monophosphate(2-)\", \"AMP\", \"C10H12N5O7P\", \"Adenosine-5-monophosphate dianion\")")
(node 417 "(\"ATP(4-)\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-J\", \"atp\", \"ATP\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"adenosine 5'-triphosphate(4-)\", \"C10H12N5O13P3\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/p-4/t4-,6-,7-,10-/m1/s1\")")
(node 126 "(\"AMP(2-)\", \"5'-O-phosphonatoadenosine\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"InChI=1S/C10H14N5O7P/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(22-10)1-21-23(18,19)20/h2-4,6-7,10,16-17H,1H2,(H2,11,12,13)(H2,18,19,20)/p-2/t4-,6-,7-,10-/m1/s1\", \"AMP dianion\", \"InChIKey=UDMBCSSLTHHNCD-KQYNXXCUSA-L\", \"Adenosine-5-monophosphate(2-)\", \"AMP\", \"C10H12N5O7P\", \"Adenosine-5-monophosphate dianion\")")
(node 418 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 419 "(\"diphosphate(4-)\", \"mu-oxido-bis(trioxidophosphate)(4-)\", \"diphosphate\", \"[O-]P([O-])(=O)OP([O-])([O-])=O\", \"InChIKey=XPPKVPWEQAFLFU-UHFFFAOYSA-J\", \"Pyrophosphat\", \"P2O7(4-)\", \"pyrophosphate ion\", \"Pyrophosphate\", \"Diphosphat\", \"mu-oxo-hexaoxodiphosphate\", \"O7P2\", \"[O3POPO3](4-)\", \"DIPHOSPHATE\", \"InChI=1S/H4O7P2/c1-8(2,3)7-9(4,5)6/h(H2,1,2,3)(H2,4,5,6)/p-4\", \"Diphosphate\", \"PPi\")")
(node 421 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 422 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 423 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 424 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 425 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 135 "(\"ATP(4-)\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-J\", \"atp\", \"ATP\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"adenosine 5'-triphosphate(4-)\", \"C10H12N5O13P3\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/p-4/t4-,6-,7-,10-/m1/s1\")")
(node 426 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 427 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 428 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 41 "(\"tetracosanoyl-CoA\", \"Lignoceroyl-coa\", \"Lignoceroyl-CoA\", \"InChIKey=MOYMQYZWIUKGGY-JBKAVQFISA-N\", \"S-[2-[3-[[(2R)-4-[[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]ethyl] tetracosanethioate\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-{[3-({2-[(tetracosanoyl)sulfanyl]ethyl}amino)-3-oxopropyl]amino}butyl] dihydrogen diphosphate}\", \"Lignoceroyl-coenzyme A\", \"C45H82N7O17P3S\", \"tetracosanoyl-coenzyme A\", \"CCCCCCCCCCCCCCCCCCCCCCCC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"InChI=1S/C45H82N7O17P3S/c1-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-36(54)73-29-28-47-35(53)26-27-48-43(57)40(56)45(2,3)31-66-72(63,64)69-71(61,62)65-30-34-39(68-70(58,59)60)38(55)44(67-34)52-33-51-37-41(46)49-32-50-42(37)52/h32-34,38-40,44,55-56H,4-31H2,1-3H3,(H,47,53)(H,48,57)(H,61,62)(H,63,64)(H2,46,49,50)(H2,58,59,60)/t34-,38-,39-,40+,44-/m1/s1\", \"C24:0-CoA\", \"C24:0-coenzyme A\", \"Tetracosanoyl-CoA\")")
(node 430 "(\"fatty acyl-CoA\", \"C22H35N7O17P3SR\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC([*])=O\", \"fatty acyl-coenzyme As\", \"fatty acyl-coenzyme A\", \"Fatty acyl CoA\")")
(node 236 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 431 "(\"straight-chain saturated fatty acid anion\", \"straight-chain saturated fatty acid anions\")")
(node 432 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 141 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 433 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 434 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 435 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 436 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 437 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 438 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 439 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 441 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 442 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 443 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 444 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 445 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 446 "(\"NADP(+)\", \"C21H29N7O17P3\", \"InChIKey=XJLXINKUBYWONI-NNYOXOHSSA-O\", \"TPN\", \"oxidized nicotinamide-adenine dinucleotide phosphate\", \"InChI=1S/C21H28N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1-4,7-8,10-11,13-16,20-21,29-31H,5-6H2,(H7-,22,23,24,25,32,33,34,35,36,37,38,39)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"Nicotinamide adenine dinucleotide phosphate\", \"2'-O-phosphonoadenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NADP+\", \"beta-Nicotinamide adenine dinucleotide phosphate\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](OP(O)(O)=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"NADP\", \"beta-nicotinamide adenine dinucleotide phosphate\", \"Triphosphopyridine nucleotide\")")
(node 447 "(\"NADPH(4-)\", \"InChI=1S/C21H30N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1,3-4,7-8,10-11,13-16,20-21,29-31H,2,5-6H2,(H2,23,32)(H,36,37)(H,38,39)(H2,22,24,25)(H2,33,34,35)/p-4/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"NADPH\", \"NADPH tetraanion\", \"2'-O-phosphonatoadenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] diphosphate}\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OC[C@H]2O[C@H]([C@H](OP([O-])([O-])=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"C21H26N7O17P3\", \"InChIKey=ACFIXJIJDZMPPO-NNYOXOHSSA-J\")")
(node 156 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 448 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 449 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 450 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 452 "(\"AMP(2-)\", \"5'-O-phosphonatoadenosine\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"InChI=1S/C10H14N5O7P/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(22-10)1-21-23(18,19)20/h2-4,6-7,10,16-17H,1H2,(H2,11,12,13)(H2,18,19,20)/p-2/t4-,6-,7-,10-/m1/s1\", \"AMP dianion\", \"InChIKey=UDMBCSSLTHHNCD-KQYNXXCUSA-L\", \"Adenosine-5-monophosphate(2-)\", \"AMP\", \"C10H12N5O7P\", \"Adenosine-5-monophosphate dianion\")")
(node 161 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 453 "(\"ATP(4-)\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-J\", \"atp\", \"ATP\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"adenosine 5'-triphosphate(4-)\", \"C10H12N5O13P3\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/p-4/t4-,6-,7-,10-/m1/s1\")")
(node 454 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 455 "(\"diphosphate(4-)\", \"mu-oxido-bis(trioxidophosphate)(4-)\", \"diphosphate\", \"[O-]P([O-])(=O)OP([O-])([O-])=O\", \"InChIKey=XPPKVPWEQAFLFU-UHFFFAOYSA-J\", \"Pyrophosphat\", \"P2O7(4-)\", \"pyrophosphate ion\", \"Pyrophosphate\", \"Diphosphat\", \"mu-oxo-hexaoxodiphosphate\", \"O7P2\", \"[O3POPO3](4-)\", \"DIPHOSPHATE\", \"InChI=1S/H4O7P2/c1-8(2,3)7-9(4,5)6/h(H2,1,2,3)(H2,4,5,6)/p-4\", \"Diphosphate\", \"PPi\")")
(node 457 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 263 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 459 "(\"unsaturated fatty acyl-CoA\", \"dehydroacyl-CoA\", \"dehydroacyl-CoAs\", \"unsaturated fatty acyl-coenzyme A\", \"unsaturated fatty acyl-CoAs\", \"unsaturated acyl-CoA\", \"unsaturated FA-CoA\")")
(node 168 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 460 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 461 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 462 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 464 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 465 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 467 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 468 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 469 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 178 "(\"diphosphate(4-)\", \"mu-oxido-bis(trioxidophosphate)(4-)\", \"diphosphate\", \"[O-]P([O-])(=O)OP([O-])([O-])=O\", \"InChIKey=XPPKVPWEQAFLFU-UHFFFAOYSA-J\", \"Pyrophosphat\", \"P2O7(4-)\", \"pyrophosphate ion\", \"Pyrophosphate\", \"Diphosphat\", \"mu-oxo-hexaoxodiphosphate\", \"O7P2\", \"[O3POPO3](4-)\", \"DIPHOSPHATE\", \"InChI=1S/H4O7P2/c1-8(2,3)7-9(4,5)6/h(H2,1,2,3)(H2,4,5,6)/p-4\", \"Diphosphate\", \"PPi\")")
(node 471 "(\"3-oxo-fatty acyl-CoA\", \"3-oxo fatty acyl-CoAs\", \"3-Oxoacyl-CoA\", \"C24H37N7O18P3SR\", \"3-oxo fatty acyl-coenzyme A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC(=O)CC([*])=O\")")
(node 280 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 283 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
)
(property  138 layout "viewLayout"
(default "(0,0,0)" "()")
(node 415 "(44.6059,60.7382,0)")
(node 464 "(20.2123,3.5,0)")
(node 465 "(14.5052,9.20711,0)")
(node 466 "(25.4168,14.4116,0)")
(node 467 "(12.5416,54.1195,0)")
(node 468 "(17.7766,60.2626,0)")
(node 469 "(23.9197,65.4976,0)")
(node 400 "(68.9995,3.5,0)")
(node 470 "(25.4168,52.7898,0)")
(node 401 "(74.7066,9.20711,0)")
(node 402 "(63.795,14.4116,0)")
(node 471 "(17.4684,33.6007,0)")
(node 430 "(44.6059,6.46327,0)")
(node 457 "(72.0021,60.9969,0)")
(node 458 "(63.795,52.7898,0)")
(node 459 "(71.7433,33.6007,0)")
)
(property  910 vector<string> "comprises"
(default "()" "()")
(node 312 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 313 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 314 "(\"\", \"\", \"\")")
(node 315 "(\"(S)-3-hydroxydecanoyl-CoA [peroxisome]\", \"(S)-3-hydroxyhexacosanoyl-CoA [peroxisome]\", \"(S)-3-hydroxylauroyl-CoA [peroxisome]\", \"(S)-3-hydroxypalmitoyl-CoA [peroxisome]\", \"(S)-3-hydroxytetradecanoyl-CoA [peroxisome]\", \"3-hydroxyoctadecanoyl-CoA [peroxisome]\")")
(node 316 "(\"myristate [peroxisome]\", \"myristoleate [peroxisome]\", \"palmitate [peroxisome]\", \"palmitoleate [peroxisome]\", \"stearate [peroxisome]\")")
(node 317 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 318 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 319 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 320 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 321 "(\"3-oxodecanoyl-CoA [peroxisome]\", \"3-oxohexacosanoyl-CoA [peroxisome]\", \"3-oxolauroyl-CoA [peroxisome]\", \"3-oxooctadecanoyl-CoA [peroxisome]\", \"3-oxopalmitoyl-CoA [peroxisome]\", \"3-oxotetradecanoyl-CoA [peroxisome]\")")
(node 322 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 323 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 324 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 325 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 326 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 327 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 328 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 329 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 330 "(\"\", \"\", \"\")")
(node 331 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 332 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 333 "(\"\", \"\", \"\", \"\")")
(node 334 "(\"AMP [peroxisome]\", \"AMP [peroxisome]\")")
(node 335 "(\"ATP [peroxisome]\", \"ATP [peroxisome]\")")
(node 336 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 337 "(\"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\")")
(node 338 "(\"\", \"\")")
(node 339 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 340 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 341 "(\"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\", \"AMP [peroxisome]\")")
(node 342 "(\"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\", \"ATP [peroxisome]\")")
(node 343 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 344 "(\"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\")")
(node 345 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 346 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 347 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 348 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 349 "(\"\", \"\", \"\", \"\")")
(node 350 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 351 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 352 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 353 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 354 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 355 "(\"NADP(+) [peroxisome]\", \"NADP(+) [peroxisome]\", \"NADP(+) [peroxisome]\")")
(node 356 "(\"NADPH [peroxisome]\", \"NADPH [peroxisome]\", \"NADPH [peroxisome]\")")
(node 357 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 358 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 359 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 360 "(\"\", \"\", \"\")")
(node 361 "(\"AMP [peroxisome]\", \"AMP [peroxisome]\")")
(node 362 "(\"ATP [peroxisome]\", \"ATP [peroxisome]\")")
(node 363 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 364 "(\"pyrophosphate [peroxisome]\", \"pyrophosphate [peroxisome]\")")
(node 365 "(\"\", \"\")")
(node 366 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 367 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 368 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 369 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 370 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 371 "(\"NADP(+) [peroxisome]\", \"NADP(+) [peroxisome]\")")
(node 372 "(\"NADPH [peroxisome]\", \"NADPH [peroxisome]\")")
(node 373 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 374 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 375 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 376 "(\"\", \"\")")
(node 377 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 378 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 379 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 380 "(\"NAD [peroxisome]\", \"NAD [peroxisome]\", \"NAD [peroxisome]\")")
(node 381 "(\"NADH [peroxisome]\", \"NADH [peroxisome]\", \"NADH [peroxisome]\")")
(node 382 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 383 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 384 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 385 "(\"\", \"\", \"\")")
(node 386 "(\"cerotate [peroxisome]\", \"decanoate [peroxisome]\", \"laurate [peroxisome]\", \"lignoceric acid [peroxisome]\", \"octanoate [peroxisome]\", \"butyrate [peroxisome]\")")
(node 387 "(\"hexadec-2-enoyl-CoA [peroxisome]\", \"oleoyl-CoA [peroxisome]\", \"tetradecenoyl-CoA [peroxisome]\", \"trans-dec-2-enoyl-CoA [peroxisome]\", \"trans-dodec-2-enoyl-CoA [peroxisome]\", \"trans-hexacos-2-enoyl-CoA [peroxisome]\", \"trans-octadec-2-enoyl-CoA [peroxisome]\", \"trans-tetradec-2-enoyl-CoA [peroxisome]\")")
(node 388 "(\"myristoyl-CoA [peroxisome]\", \"palmitoyl-CoA [peroxisome]\", \"stearoyl-CoA [peroxisome]\")")
(node 389 "(\"decanoyl-CoA [peroxisome]\", \"hexacosanoyl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\", \"octadec-9-ynoyl-CoA [peroxisome]\", \"octanoyl-CoA [peroxisome]\", \"tetracosanoyl-CoA [peroxisome]\", \"butyryl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\", \"lauroyl-CoA [peroxisome]\")")
(node 390 "(\"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\", \"hydrogen peroxide [peroxisome]\")")
(node 391 "(\"oxygen [peroxisome]\", \"oxygen [peroxisome]\", \"oxygen [peroxisome]\")")
(node 392 "(\"\", \"\", \"\")")
(node 393 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 394 "(\"H+ [peroxisome]\", \"H+ [peroxisome]\", \"H+ [peroxisome]\")")
(node 395 "(\"H2O [peroxisome]\", \"H2O [peroxisome]\", \"H2O [peroxisome]\")")
(node 396 "(\"\", \"\", \"\")")
(node 397 "(\"acetyl-CoA [peroxisome]\", \"acetyl-CoA [peroxisome]\")")
(node 398 "(\"coenzyme A [peroxisome]\", \"coenzyme A [peroxisome]\")")
(node 399 "(\"\", \"\")")
)
(property  910 vector<string> "synonyms"
(default "()" "()")
(node 388 "(\"long-chain fatty acyl-CoA\", \"long-chain fatty acyl-coenzyme As\", \"Long-chain acyl-CoA\", \"long-chain fatty acyl-CoAs\", \"LCFA-CoA\", \"C23H38N7O17P3S(CH2)n\", \"long-chain fatty acyl-coenzyme A\", \"LCFA-coenzyme As\", \"LCFA-CoAs\", \"LCFA-coenzyme A\")")
(node 389 "(\"fatty acyl-CoA\", \"C22H35N7O17P3SR\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC([*])=O\", \"fatty acyl-coenzyme As\", \"fatty acyl-coenzyme A\", \"Fatty acyl CoA\")")
(node 390 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 391 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 393 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 199 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 394 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 395 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 397 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 398 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 304 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 312 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 313 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 315 "(\"hydroxy fatty acyl-CoA\", \"hydroxy FA-CoA\", \"hydroxy-fatty acyl-CoAs\", \"hydroxy-fatty acyl-coenzyme A\", \"hydroxy-FA-coenzyme A\")")
(node 121 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 316 "(\"long-chain fatty acid anion\", \"[O-]C([*])=O\", \"CO2R\", \"a long-chain fatty acid\")")
(node 219 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 317 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 318 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 319 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 321 "(\"3-oxo-fatty acyl-CoA(4-)\", \"3-ketoacyl-coenzyme A\", \"3-ketoacyl-CoA\", \"3-oxoacyl-coenzyme A\", \"C24H33N7O18P3SR\", \"CC(C)(COP([O-])(=O)OP([O-])(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP([O-])([O-])=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC(=O)CC([*])=O\")")
(node 322 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 323 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 324 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 325 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 326 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 327 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 328 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 329 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 331 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 332 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 236 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 334 "(\"AMP(2-)\", \"5'-O-phosphonatoadenosine\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"InChI=1S/C10H14N5O7P/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(22-10)1-21-23(18,19)20/h2-4,6-7,10,16-17H,1H2,(H2,11,12,13)(H2,18,19,20)/p-2/t4-,6-,7-,10-/m1/s1\", \"AMP dianion\", \"InChIKey=UDMBCSSLTHHNCD-KQYNXXCUSA-L\", \"Adenosine-5-monophosphate(2-)\", \"AMP\", \"C10H12N5O7P\", \"Adenosine-5-monophosphate dianion\")")
(node 335 "(\"ATP(4-)\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-J\", \"atp\", \"ATP\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"adenosine 5'-triphosphate(4-)\", \"C10H12N5O13P3\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/p-4/t4-,6-,7-,10-/m1/s1\")")
(node 336 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 337 "(\"diphosphate(4-)\", \"mu-oxido-bis(trioxidophosphate)(4-)\", \"diphosphate\", \"[O-]P([O-])(=O)OP([O-])([O-])=O\", \"InChIKey=XPPKVPWEQAFLFU-UHFFFAOYSA-J\", \"Pyrophosphat\", \"P2O7(4-)\", \"pyrophosphate ion\", \"Pyrophosphate\", \"Diphosphat\", \"mu-oxo-hexaoxodiphosphate\", \"O7P2\", \"[O3POPO3](4-)\", \"DIPHOSPHATE\", \"InChI=1S/H4O7P2/c1-8(2,3)7-9(4,5)6/h(H2,1,2,3)(H2,4,5,6)/p-4\", \"Diphosphate\", \"PPi\")")
(node 339 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 341 "(\"AMP(2-)\", \"5'-O-phosphonatoadenosine\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"InChI=1S/C10H14N5O7P/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(22-10)1-21-23(18,19)20/h2-4,6-7,10,16-17H,1H2,(H2,11,12,13)(H2,18,19,20)/p-2/t4-,6-,7-,10-/m1/s1\", \"AMP dianion\", \"InChIKey=UDMBCSSLTHHNCD-KQYNXXCUSA-L\", \"Adenosine-5-monophosphate(2-)\", \"AMP\", \"C10H12N5O7P\", \"Adenosine-5-monophosphate dianion\")")
(node 342 "(\"ATP(4-)\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-J\", \"atp\", \"ATP\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"adenosine 5'-triphosphate(4-)\", \"C10H12N5O13P3\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/p-4/t4-,6-,7-,10-/m1/s1\")")
(node 343 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 344 "(\"diphosphate(4-)\", \"mu-oxido-bis(trioxidophosphate)(4-)\", \"diphosphate\", \"[O-]P([O-])(=O)OP([O-])([O-])=O\", \"InChIKey=XPPKVPWEQAFLFU-UHFFFAOYSA-J\", \"Pyrophosphat\", \"P2O7(4-)\", \"pyrophosphate ion\", \"Pyrophosphate\", \"Diphosphat\", \"mu-oxo-hexaoxodiphosphate\", \"O7P2\", \"[O3POPO3](4-)\", \"DIPHOSPHATE\", \"InChI=1S/H4O7P2/c1-8(2,3)7-9(4,5)6/h(H2,1,2,3)(H2,4,5,6)/p-4\", \"Diphosphate\", \"PPi\")")
(node 346 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 347 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 348 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 350 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 156 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 351 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 352 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 353 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 354 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 355 "(\"NADP(+)\", \"C21H29N7O17P3\", \"InChIKey=XJLXINKUBYWONI-NNYOXOHSSA-O\", \"TPN\", \"oxidized nicotinamide-adenine dinucleotide phosphate\", \"InChI=1S/C21H28N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1-4,7-8,10-11,13-16,20-21,29-31H,5-6H2,(H7-,22,23,24,25,32,33,34,35,36,37,38,39)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"Nicotinamide adenine dinucleotide phosphate\", \"2'-O-phosphonoadenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NADP+\", \"beta-Nicotinamide adenine dinucleotide phosphate\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](OP(O)(O)=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"NADP\", \"beta-nicotinamide adenine dinucleotide phosphate\", \"Triphosphopyridine nucleotide\")")
(node 356 "(\"NADPH(4-)\", \"InChI=1S/C21H30N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1,3-4,7-8,10-11,13-16,20-21,29-31H,2,5-6H2,(H2,23,32)(H,36,37)(H,38,39)(H2,22,24,25)(H2,33,34,35)/p-4/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"NADPH\", \"NADPH tetraanion\", \"2'-O-phosphonatoadenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] diphosphate}\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OC[C@H]2O[C@H]([C@H](OP([O-])([O-])=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"C21H26N7O17P3\", \"InChIKey=ACFIXJIJDZMPPO-NNYOXOHSSA-J\")")
(node 357 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 358 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 359 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 263 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 361 "(\"AMP(2-)\", \"5'-O-phosphonatoadenosine\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"InChI=1S/C10H14N5O7P/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(22-10)1-21-23(18,19)20/h2-4,6-7,10,16-17H,1H2,(H2,11,12,13)(H2,18,19,20)/p-2/t4-,6-,7-,10-/m1/s1\", \"AMP dianion\", \"InChIKey=UDMBCSSLTHHNCD-KQYNXXCUSA-L\", \"Adenosine-5-monophosphate(2-)\", \"AMP\", \"C10H12N5O7P\", \"Adenosine-5-monophosphate dianion\")")
(node 362 "(\"ATP(4-)\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-J\", \"atp\", \"ATP\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OP([O-])([O-])=O)[C@@H](O)[C@H]1O\", \"adenosine 5'-triphosphate(4-)\", \"C10H12N5O13P3\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/p-4/t4-,6-,7-,10-/m1/s1\")")
(node 363 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 364 "(\"diphosphate(4-)\", \"mu-oxido-bis(trioxidophosphate)(4-)\", \"diphosphate\", \"[O-]P([O-])(=O)OP([O-])([O-])=O\", \"InChIKey=XPPKVPWEQAFLFU-UHFFFAOYSA-J\", \"Pyrophosphat\", \"P2O7(4-)\", \"pyrophosphate ion\", \"Pyrophosphate\", \"Diphosphat\", \"mu-oxo-hexaoxodiphosphate\", \"O7P2\", \"[O3POPO3](4-)\", \"DIPHOSPHATE\", \"InChI=1S/H4O7P2/c1-8(2,3)7-9(4,5)6/h(H2,1,2,3)(H2,4,5,6)/p-4\", \"Diphosphate\", \"PPi\")")
(node 366 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 367 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 368 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 369 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 370 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 371 "(\"NADP(+)\", \"C21H29N7O17P3\", \"InChIKey=XJLXINKUBYWONI-NNYOXOHSSA-O\", \"TPN\", \"oxidized nicotinamide-adenine dinucleotide phosphate\", \"InChI=1S/C21H28N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1-4,7-8,10-11,13-16,20-21,29-31H,5-6H2,(H7-,22,23,24,25,32,33,34,35,36,37,38,39)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"Nicotinamide adenine dinucleotide phosphate\", \"2'-O-phosphonoadenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NADP+\", \"beta-Nicotinamide adenine dinucleotide phosphate\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](OP(O)(O)=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"NADP\", \"beta-nicotinamide adenine dinucleotide phosphate\", \"Triphosphopyridine nucleotide\")")
(node 372 "(\"NADPH(4-)\", \"InChI=1S/C21H30N7O17P3/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(44-46(33,34)35)14(30)11(43-21)6-41-48(38,39)45-47(36,37)40-5-10-13(29)15(31)20(42-10)27-3-1-2-9(4-27)18(23)32/h1,3-4,7-8,10-11,13-16,20-21,29-31H,2,5-6H2,(H2,23,32)(H,36,37)(H,38,39)(H2,22,24,25)(H2,33,34,35)/p-4/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"NADPH\", \"NADPH tetraanion\", \"2'-O-phosphonatoadenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] diphosphate}\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP([O-])(=O)OP([O-])(=O)OC[C@H]2O[C@H]([C@H](OP([O-])([O-])=O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"C21H26N7O17P3\", \"InChIKey=ACFIXJIJDZMPPO-NNYOXOHSSA-J\")")
(node 373 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 374 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 375 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 280 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 377 "(\"acetyl-CoA\", \"S-acetyl-CoA\", \"Acetyl-CoA\", \"CC(=O)SCCNC(=O)CCNC(=O)[C@H](O)C(C)(C)COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12\", \"3'-phosphoadenosine 5'-(3-{(3R)-4-[(3-{[2-(acetylsulfanyl)ethyl]amino}-3-oxopropyl)amino]-3-hydroxy-2,2-dimethyl-4-oxobutyl} dihydrogen diphosphate)\", \"AcCoA\", \"S-acetyl-coenzyme A\", \"InChIKey=ZSLZBFCDCINBPY-ZSJPKINUSA-N\", \"InChI=1S/C23H38N7O17P3S/c1-12(31)51-7-6-25-14(32)4-5-26-21(35)18(34)23(2,3)9-44-50(41,42)47-49(39,40)43-8-13-17(46-48(36,37)38)16(33)22(45-13)30-11-29-15-19(24)27-10-28-20(15)30/h10-11,13,16-18,22,33-34H,4-9H2,1-3H3,(H,25,32)(H,26,35)(H,39,40)(H,41,42)(H2,24,27,28)(H2,36,37,38)/t13-,16-,17-,18+,22-/m1/s1\", \"C23H38N7O17P3S\", \"Acetyl coenzyme A\")")
(node 378 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 379 "(\"hydrogen peroxide\", \"H2O2\", \"bis(hydridooxygen)(O--O)\", \"InChIKey=MHAJPDPJQMAIIY-UHFFFAOYSA-N\", \"dihydrogen(peroxide)\", \"Oxydol\", \"Hydrogen peroxide\", \"InChI=1S/H2O2/c1-2/h1-2H\", \"dihydrogen peroxide\", \"[OH(OH)]\", \"HOOH\", \"dihydrogen dioxide\", \"HYDROGEN PEROXIDE\", \"[H]OO[H]\", \"dioxidane\", \"hydrogen peroxide\")")
(node 380 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 381 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 382 "(\"dioxygen\", \"dioxygene\", \"Oxygen\", \"[OO]\", \"O=O\", \"OXYGEN MOLECULE\", \"dioxygen\", \"InChI=1S/O2/c1-2\", \"molecular oxygen\", \"InChIKey=MYMOFIZGZYHOMD-UHFFFAOYSA-N\", \"O2\", \"Disauerstoff\")")
(node 383 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 384 "(\"diprotium oxide\", \"((1)H2)water\", \"H2O\", \"InChIKey=XLYOFNOQVPJJNP-YOGHCVPTSA-N\", \"[1H]O[1H]\", \"diprotium oxide\", \"InChI=1S/H2O/h1H2/i/hH2\")")
(node 386 "(\"straight-chain saturated fatty acid anion\", \"straight-chain saturated fatty acid anions\")")
(node 387 "(\"unsaturated fatty acyl-CoA\", \"dehydroacyl-CoA\", \"dehydroacyl-CoAs\", \"unsaturated fatty acyl-coenzyme A\", \"unsaturated fatty acyl-CoAs\", \"unsaturated acyl-CoA\", \"unsaturated FA-CoA\")")
)
(property  912 vector<string> "comprises"
(default "()" "()")
)
(property  913 vector<string> "comprises"
(default "()" "()")
)
(property  914 vector<string> "comprises"
(default "()" "()")
)
(property  915 vector<string> "comprises"
(default "()" "()")
)
(property  916 vector<string> "comprises"
(default "()" "()")
)
(property  917 vector<string> "comprises"
(default "()" "()")
)
(property  918 vector<string> "comprises"
(default "()" "()")
)
(property  919 vector<string> "comprises"
(default "()" "()")
)
(property  920 vector<string> "comprises"
(default "()" "()")
)
(property  921 vector<string> "comprises"
(default "()" "()")
)
(property  922 vector<string> "comprises"
(default "()" "()")
)
(property  923 vector<string> "comprises"
(default "()" "()")
)
(property  924 vector<string> "comprises"
(default "()" "()")
)
(property  925 vector<string> "comprises"
(default "()" "()")
)
(property  926 vector<string> "comprises"
(default "()" "()")
)
(property  927 vector<string> "comprises"
(default "()" "()")
)
(property  928 vector<string> "comprises"
(default "()" "()")
)
(property  929 vector<string> "comprises"
(default "()" "()")
)
(property  930 vector<string> "comprises"
(default "()" "()")
)
(property  931 vector<string> "comprises"
(default "()" "()")
)
(property  932 vector<string> "comprises"
(default "()" "()")
)
(property  933 vector<string> "comprises"
(default "()" "()")
)
(property  934 vector<string> "comprises"
(default "()" "()")
)
(property  935 vector<string> "comprises"
(default "()" "()")
)
(property  936 vector<string> "comprises"
(default "()" "()")
)
(property  937 vector<string> "comprises"
(default "()" "()")
)
(property  938 vector<string> "comprises"
(default "()" "()")
)
(property  939 vector<string> "comprises"
(default "()" "()")
)
(property  940 vector<string> "comprises"
(default "()" "()")
)
(property  941 vector<string> "comprises"
(default "()" "()")
)
(property  942 vector<string> "comprises"
(default "()" "()")
)
(property  943 vector<string> "comprises"
(default "()" "()")
)
(property  944 vector<string> "comprises"
(default "()" "()")
)
(property  945 vector<string> "comprises"
(default "()" "()")
)
(property  946 vector<string> "comprises"
(default "()" "()")
)
(property  947 vector<string> "comprises"
(default "()" "()")
)
(property  948 vector<string> "comprises"
(default "()" "()")
)
(property  949 vector<string> "comprises"
(default "()" "()")
)
(property  950 vector<string> "comprises"
(default "()" "()")
)
(property  951 vector<string> "comprises"
(default "()" "()")
)
(property  952 vector<string> "comprises"
(default "()" "()")
)
(property  953 vector<string> "comprises"
(default "()" "()")
)
(property  954 vector<string> "comprises"
(default "()" "()")
)
(property  955 vector<string> "comprises"
(default "()" "()")
)
(property  956 vector<string> "comprises"
(default "()" "()")
)
(property  957 vector<string> "comprises"
(default "()" "()")
)
(property  958 vector<string> "comprises"
(default "()" "()")
)
(property  959 vector<string> "comprises"
(default "()" "()")
)
(property  960 vector<string> "comprises"
(default "()" "()")
)
(property  961 vector<string> "comprises"
(default "()" "()")
)
(property  962 vector<string> "comprises"
(default "()" "()")
)
(property  963 vector<string> "comprises"
(default "()" "()")
)
(property  964 vector<string> "comprises"
(default "()" "()")
)
(property  965 vector<string> "comprises"
(default "()" "()")
)
(property  966 vector<string> "comprises"
(default "()" "()")
)
(property  967 vector<string> "comprises"
(default "()" "()")
)
(property  968 vector<string> "comprises"
(default "()" "()")
)
(property  969 vector<string> "comprises"
(default "()" "()")
)
(property  970 vector<string> "comprises"
(default "()" "()")
)
(property  971 vector<string> "comprises"
(default "()" "()")
)
(property  972 vector<string> "comprises"
(default "()" "()")
)
(property  973 vector<string> "comprises"
(default "()" "()")
)
(property  974 vector<string> "comprises"
(default "()" "()")
)
(property  975 vector<string> "comprises"
(default "()" "()")
)
(property  976 vector<string> "comprises"
(default "()" "()")
)
(property  977 vector<string> "comprises"
(default "()" "()")
)
(property  978 vector<string> "comprises"
(default "()" "()")
)
(property  979 vector<string> "comprises"
(default "()" "()")
)
(property  980 vector<string> "comprises"
(default "()" "()")
)
(property  981 vector<string> "comprises"
(default "()" "()")
)
(property  982 vector<string> "comprises"
(default "()" "()")
)
(property  983 vector<string> "comprises"
(default "()" "()")
)
(property  984 vector<string> "comprises"
(default "()" "()")
)
(property  985 vector<string> "comprises"
(default "()" "()")
)
(property  986 vector<string> "comprises"
(default "()" "()")
)
(property  987 vector<string> "comprises"
(default "()" "()")
)
(property  988 vector<string> "comprises"
(default "()" "()")
)
(property  989 vector<string> "comprises"
(default "()" "()")
)
(property  990 vector<string> "comprises"
(default "()" "()")
)
(property  991 vector<string> "comprises"
(default "()" "()")
)
(property  992 vector<string> "comprises"
(default "()" "()")
)
(property  993 vector<string> "comprises"
(default "()" "()")
)
(property  994 vector<string> "comprises"
(default "()" "()")
)
(property  995 vector<string> "comprises"
(default "()" "()")
)
(property  996 vector<string> "comprises"
(default "()" "()")
)
(property  997 vector<string> "comprises"
(default "()" "()")
)
(property  998 vector<string> "comprises"
(default "()" "()")
)
(graph_attributes 0 
(string "name" "ylipolytica_loira_2011")
(string "id" "ylipolytica_loira_2011")
(string "compartments" "cytoplasm;peroxisome")
(string "file" "/Users/anna/Desktop/models/yli_gen20130527.tlp")
(string "outside_compartments" ";cytoplasm")
)
(graph_attributes 1 
(string "name" "ylipolytica_loira_2011")
)
(graph_attributes 841 
(string "name" "similar reactions")
)
(graph_attributes 842 
(string "name" "fatty-acid--CoA ligase (decanoate)")
)
(graph_attributes 843 
(string "name" "fatty-acid--CoA ligase (decanoate)")
)
(graph_attributes 844 
(string "name" "fatty-acid--CoA ligase (dodecanoate)")
)
(graph_attributes 845 
(string "name" "fatty-acid--CoA ligase (n-C24:0)")
)
(graph_attributes 846 
(string "name" "fatty-acid--CoA ligase (n-C26:0)")
)
(graph_attributes 847 
(string "name" "fatty-acid--CoA ligase (octanoate)")
)
(graph_attributes 848 
(string "name" "fatty-acid--CoA ligase (butyrate)")
)
(graph_attributes 849 
(string "name" "fatty-acid--CoA ligase (hexadecenoate)")
)
(graph_attributes 850 
(string "name" "fatty-acid--CoA ligase (hexadecenoate)")
)
(graph_attributes 851 
(string "name" "fatty-acid--CoA ligase (tetradecenoate)")
)
(graph_attributes 852 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 853 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 854 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 855 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 856 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
)
(graph_attributes 857 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
)
(graph_attributes 858 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxydodecanoyl-CoA)")
)
(graph_attributes 859 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexacosyl-CoA)")
)
(graph_attributes 860 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexadecanoyl-CoA)")
)
(graph_attributes 861 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxyoctadecanoyl-CoA)")
)
(graph_attributes 862 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxytetradecanoyl-CoA)")
)
(graph_attributes 863 
(string "name" "acyl-CoA oxidase (decanoyl-CoA)")
)
(graph_attributes 864 
(string "name" "acyl-CoA oxidase (decanoyl-CoA)")
)
(graph_attributes 865 
(string "name" "acyl-CoA oxidase (dodecanoyl-CoA)")
)
(graph_attributes 866 
(string "name" "acyl-CoA oxidase (hexacanoyl-CoA)")
)
(graph_attributes 867 
(string "name" "fatty acid oxidation")
)
(graph_attributes 868 
(string "name" "fatty acid oxidation")
)
(graph_attributes 869 
(string "name" "fatty acid oxidation")
)
(graph_attributes 870 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
)
(graph_attributes 871 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
)
(graph_attributes 872 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
)
(graph_attributes 873 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxohexacosyl-CoA)")
)
(graph_attributes 874 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxohexadecanoyl-CoA)")
)
(graph_attributes 875 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxooctadecanoyl-CoA)")
)
(graph_attributes 876 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxotetradecanoyl-CoA)")
)
(graph_attributes 877 
(string "name" "acetyl-CoA acyltransferase (tetracosanoyl-CoA)")
)
(graph_attributes 878 
(string "name" "acetyl-CoA acyltransferase (tetracosanoyl-CoA)")
)
(graph_attributes 879 
(string "name" "acetyl-CoA C-acetyltransferase (dodecanoyl)")
)
(graph_attributes 880 
(string "name" "acetyl-CoA C-acetyltransferase (octanoyl-CoA)")
)
(graph_attributes 881 
(string "name" "acetyl-CoA C-acyltransferase (decanoyl-CoA)")
)
(graph_attributes 882 
(string "name" "fatty-acid--CoA ligase (hexadecanoate)")
)
(graph_attributes 883 
(string "name" "fatty-acid--CoA ligase (hexadecanoate)")
)
(graph_attributes 884 
(string "name" "fatty-acid--CoA ligase (tetradecanoate)")
)
(graph_attributes 885 
(string "name" "fatty acid oxidation")
)
(graph_attributes 886 
(string "name" "fatty acid oxidation")
)
(graph_attributes 887 
(string "name" "fatty acid oxidation")
)
(graph_attributes 888 
(string "name" "fatty acid oxidation")
)
(graph_attributes 889 
(string "name" "fatty acid oxidation")
)
(graph_attributes 890 
(string "name" "fatty acid oxidation")
)
(graph_attributes 891 
(string "name" "fatty acid oxidation (octanoyl-CoA)")
)
(graph_attributes 892 
(string "name" "fatty acid oxidation (butyryl-CoA)")
)
(graph_attributes 893 
(string "name" "acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
)
(graph_attributes 894 
(string "name" "acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
)
(graph_attributes 895 
(string "name" "acetyl-CoA acyltransferase (tetradecanoyl-CoA)")
)
(graph_attributes 896 
(string "name" "fatty acid oxidation")
)
(graph_attributes 897 
(string "name" "fatty acid oxidation")
)
(graph_attributes 898 
(string "name" "fatty acid oxidation")
)
(graph_attributes 899 
(string "name" "fatty acid oxidation")
)
(graph_attributes 900 
(string "name" "acyl-CoA oxidase (hexadecanoyl-CoA)")
)
(graph_attributes 901 
(string "name" "acyl-CoA oxidase (hexadecanoyl-CoA)")
)
(graph_attributes 902 
(string "name" "acyl-CoA oxidase (octadecanoyl-CoA)")
)
(graph_attributes 903 
(string "name" "acyl-CoA oxidase (tetradecanoyl-CoA)")
)
(graph_attributes 904 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 905 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 906 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 907 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 908 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 909 
(string "name" "ylipolytica_loira_2011")
)
(graph_attributes 2 
(string "name" "ylipolytica_loira_2011")
)
(graph_attributes 3 
(string "name" "similar reactions")
)
(graph_attributes 4 
(string "name" "fatty acid oxidation")
)
(graph_attributes 5 
(string "name" "fatty acid oxidation")
)
(graph_attributes 6 
(string "name" "fatty acid oxidation")
)
(graph_attributes 7 
(string "name" "fatty acid oxidation")
)
(graph_attributes 8 
(string "name" "fatty acid oxidation")
)
(graph_attributes 9 
(string "name" "fatty acid oxidation (octanoyl-CoA)")
)
(graph_attributes 10 
(string "name" "fatty acid oxidation (butyryl-CoA)")
)
(graph_attributes 11 
(string "name" "fatty-acid--CoA ligase (decanoate)")
)
(graph_attributes 12 
(string "name" "fatty-acid--CoA ligase (decanoate)")
)
(graph_attributes 13 
(string "name" "fatty-acid--CoA ligase (dodecanoate)")
)
(graph_attributes 14 
(string "name" "fatty-acid--CoA ligase (hexadecanoate)")
)
(graph_attributes 15 
(string "name" "fatty-acid--CoA ligase (n-C26:0)")
)
(graph_attributes 16 
(string "name" "fatty-acid--CoA ligase (octanoate)")
)
(graph_attributes 17 
(string "name" "fatty-acid--CoA ligase (tetradecanoate)")
)
(graph_attributes 18 
(string "name" "fatty-acid--CoA ligase (butyrate)")
)
(graph_attributes 19 
(string "name" "acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
)
(graph_attributes 20 
(string "name" "acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
)
(graph_attributes 21 
(string "name" "acetyl-CoA acyltransferase (tetradecanoyl-CoA)")
)
(graph_attributes 22 
(string "name" "acetyl-CoA C-acetyltransferase (dodecanoyl)")
)
(graph_attributes 23 
(string "name" "acetyl-CoA C-acetyltransferase (octanoyl-CoA)")
)
(graph_attributes 24 
(string "name" "acetyl-CoA C-acyltransferase (decanoyl-CoA)")
)
(graph_attributes 25 
(string "name" "acyl-CoA oxidase (decanoyl-CoA)")
)
(graph_attributes 26 
(string "name" "acyl-CoA oxidase (decanoyl-CoA)")
)
(graph_attributes 27 
(string "name" "acyl-CoA oxidase (dodecanoyl-CoA)")
)
(graph_attributes 28 
(string "name" "acyl-CoA oxidase (hexacanoyl-CoA)")
)
(graph_attributes 29 
(string "name" "acyl-CoA oxidase (hexadecanoyl-CoA)")
)
(graph_attributes 30 
(string "name" "acyl-CoA oxidase (octadecanoyl-CoA)")
)
(graph_attributes 31 
(string "name" "acyl-CoA oxidase (tetradecanoyl-CoA)")
)
(graph_attributes 32 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
)
(graph_attributes 33 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
)
(graph_attributes 34 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxydodecanoyl-CoA)")
)
(graph_attributes 35 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexacosyl-CoA)")
)
(graph_attributes 36 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexadecanoyl-CoA)")
)
(graph_attributes 37 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxyoctadecanoyl-CoA)")
)
(graph_attributes 38 
(string "name" "3-hydroxyacyl-CoA dehydratase (3-hydroxytetradecanoyl-CoA)")
)
(graph_attributes 39 
(string "name" "fatty-acid--CoA ligase (hexadecenoate)")
)
(graph_attributes 40 
(string "name" "fatty-acid--CoA ligase (hexadecenoate)")
)
(graph_attributes 41 
(string "name" "fatty-acid--CoA ligase (tetradecenoate)")
)
(graph_attributes 42 
(string "name" "fatty acid oxidation")
)
(graph_attributes 43 
(string "name" "fatty acid oxidation")
)
(graph_attributes 44 
(string "name" "fatty acid oxidation")
)
(graph_attributes 45 
(string "name" "fatty acid oxidation")
)
(graph_attributes 46 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
)
(graph_attributes 47 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
)
(graph_attributes 48 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
)
(graph_attributes 49 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxohexacosyl-CoA)")
)
(graph_attributes 50 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxohexadecanoyl-CoA)")
)
(graph_attributes 51 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxooctadecanoyl-CoA)")
)
(graph_attributes 52 
(string "name" "3-hydroxyacyl-CoA dehydrogenase (3-oxotetradecanoyl-CoA)")
)
(graph_attributes 53 
(string "name" "fatty acid oxidation")
)
(graph_attributes 54 
(string "name" "fatty acid oxidation")
)
(graph_attributes 55 
(string "name" "fatty acid oxidation")
)
(graph_attributes 56 
(string "name" "fatty acid oxidation")
)
(graph_attributes 57 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 58 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 59 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 60 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 61 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 62 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 63 
(string "name" "peroxisomal acyl-CoA thioesterase")
)
(graph_attributes 64 
(string "name" "ylipolytica_loira_2011")
)
(graph_attributes 65 
(string "name" "ylipolytica_loira_2011 quotient")
(string "file" "/Users/anna/Desktop/models/yli_gen20130527.tlp")
)
(graph_attributes 138 
(string "name" "unnamed")
)
(graph_attributes 66 
(string "name" "grp_00066")
)
(graph_attributes 67 
(string "name" "grp_00067")
)
(graph_attributes 68 
(string "name" "grp_00068")
)
(graph_attributes 69 
(string "name" "grp_00069")
)
(graph_attributes 70 
(string "name" "grp_00070")
)
(graph_attributes 71 
(string "name" "grp_00071")
)
(graph_attributes 72 
(string "name" "grp_00072")
)
(graph_attributes 73 
(string "name" "grp_00073")
)
(graph_attributes 74 
(string "name" "grp_00074")
)
(graph_attributes 75 
(string "name" "grp_00075")
)
(graph_attributes 76 
(string "name" "grp_00076")
)
(graph_attributes 77 
(string "name" "grp_00077")
)
(graph_attributes 78 
(string "name" "grp_00078")
)
(graph_attributes 79 
(string "name" "grp_00079")
)
(graph_attributes 80 
(string "name" "grp_00080")
)
(graph_attributes 81 
(string "name" "grp_00081")
)
(graph_attributes 82 
(string "name" "grp_00082")
)
(graph_attributes 83 
(string "name" "grp_00083")
)
(graph_attributes 84 
(string "name" "grp_00084")
)
(graph_attributes 85 
(string "name" "grp_00085")
)
(graph_attributes 86 
(string "name" "grp_00086")
)
(graph_attributes 87 
(string "name" "grp_00087")
)
(graph_attributes 88 
(string "name" "grp_00088")
)
(graph_attributes 89 
(string "name" "grp_00089")
)
(graph_attributes 90 
(string "name" "grp_00090")
)
(graph_attributes 91 
(string "name" "grp_00091")
)
(graph_attributes 92 
(string "name" "grp_00092")
)
(graph_attributes 93 
(string "name" "grp_00093")
)
(graph_attributes 94 
(string "name" "grp_00094")
)
(graph_attributes 95 
(string "name" "grp_00095")
)
(graph_attributes 96 
(string "name" "grp_00096")
)
(graph_attributes 97 
(string "name" "grp_00097")
)
(graph_attributes 98 
(string "name" "grp_00098")
)
(graph_attributes 99 
(string "name" "grp_00099")
)
(graph_attributes 100 
(string "name" "grp_00100")
)
(graph_attributes 101 
(string "name" "grp_00101")
)
(graph_attributes 102 
(string "name" "grp_00102")
)
(graph_attributes 103 
(string "name" "grp_00103")
)
(graph_attributes 104 
(string "name" "grp_00104")
)
(graph_attributes 105 
(string "name" "grp_00105")
)
(graph_attributes 106 
(string "name" "grp_00106")
)
(graph_attributes 107 
(string "name" "grp_00107")
)
(graph_attributes 108 
(string "name" "grp_00108")
)
(graph_attributes 109 
(string "name" "grp_00109")
)
(graph_attributes 110 
(string "name" "grp_00110")
)
(graph_attributes 111 
(string "name" "grp_00111")
)
(graph_attributes 112 
(string "name" "grp_00112")
)
(graph_attributes 113 
(string "name" "grp_00113")
)
(graph_attributes 114 
(string "name" "grp_00114")
)
(graph_attributes 115 
(string "name" "grp_00115")
)
(graph_attributes 116 
(string "name" "grp_00116")
)
(graph_attributes 117 
(string "name" "grp_00117")
)
(graph_attributes 118 
(string "name" "grp_00118")
)
(graph_attributes 119 
(string "name" "grp_00119")
)
(graph_attributes 120 
(string "name" "grp_00120")
)
(graph_attributes 121 
(string "name" "grp_00121")
)
(graph_attributes 122 
(string "name" "grp_00122")
)
(graph_attributes 123 
(string "name" "grp_00123")
)
(graph_attributes 124 
(string "name" "grp_00124")
)
(graph_attributes 125 
(string "name" "grp_00125")
)
(graph_attributes 126 
(string "name" "grp_00126")
)
(graph_attributes 127 
(string "name" "grp_00127")
)
(graph_attributes 128 
(string "name" "grp_00128")
)
(graph_attributes 129 
(string "name" "grp_00129")
)
(graph_attributes 130 
(string "name" "grp_00130")
)
(graph_attributes 131 
(string "name" "grp_00131")
)
(graph_attributes 132 
(string "name" "grp_00132")
)
(graph_attributes 133 
(string "name" "grp_00133")
)
(graph_attributes 134 
(string "name" "grp_00134")
)
(graph_attributes 135 
(string "name" "grp_00135")
)
(graph_attributes 136 
(string "name" "grp_00136")
)
(graph_attributes 137 
(string "name" "grp_00137")
)
(graph_attributes 910 
(string "name" "ylipolytica_loira_2011 quotient")
(string "file" "/Users/anna/Desktop/models/yli_gen20130527.tlp")
)
(graph_attributes 911 
(string "name" "grp_00911")
)
(graph_attributes 912 
(string "name" "grp_00912")
)
(graph_attributes 913 
(string "name" "grp_00913")
)
(graph_attributes 914 
(string "name" "grp_00914")
)
(graph_attributes 915 
(string "name" "grp_00915")
)
(graph_attributes 916 
(string "name" "grp_00916")
)
(graph_attributes 917 
(string "name" "grp_00917")
)
(graph_attributes 918 
(string "name" "grp_00918")
)
(graph_attributes 919 
(string "name" "grp_00919")
)
(graph_attributes 920 
(string "name" "grp_00920")
)
(graph_attributes 921 
(string "name" "grp_00921")
)
(graph_attributes 922 
(string "name" "grp_00922")
)
(graph_attributes 923 
(string "name" "grp_00923")
)
(graph_attributes 924 
(string "name" "grp_00924")
)
(graph_attributes 925 
(string "name" "grp_00925")
)
(graph_attributes 926 
(string "name" "grp_00926")
)
(graph_attributes 927 
(string "name" "grp_00927")
)
(graph_attributes 928 
(string "name" "grp_00928")
)
(graph_attributes 929 
(string "name" "grp_00929")
)
(graph_attributes 930 
(string "name" "grp_00930")
)
(graph_attributes 931 
(string "name" "grp_00931")
)
(graph_attributes 932 
(string "name" "grp_00932")
)
(graph_attributes 933 
(string "name" "grp_00933")
)
(graph_attributes 934 
(string "name" "grp_00934")
)
(graph_attributes 935 
(string "name" "grp_00935")
)
(graph_attributes 936 
(string "name" "grp_00936")
)
(graph_attributes 937 
(string "name" "grp_00937")
)
(graph_attributes 938 
(string "name" "grp_00938")
)
(graph_attributes 939 
(string "name" "grp_00939")
)
(graph_attributes 940 
(string "name" "grp_00940")
)
(graph_attributes 941 
(string "name" "grp_00941")
)
(graph_attributes 942 
(string "name" "grp_00942")
)
(graph_attributes 943 
(string "name" "grp_00943")
)
(graph_attributes 944 
(string "name" "grp_00944")
)
(graph_attributes 945 
(string "name" "grp_00945")
)
(graph_attributes 946 
(string "name" "grp_00946")
)
(graph_attributes 947 
(string "name" "grp_00947")
)
(graph_attributes 948 
(string "name" "grp_00948")
)
(graph_attributes 949 
(string "name" "grp_00949")
)
(graph_attributes 950 
(string "name" "grp_00950")
)
(graph_attributes 951 
(string "name" "grp_00951")
)
(graph_attributes 952 
(string "name" "grp_00952")
)
(graph_attributes 953 
(string "name" "grp_00953")
)
(graph_attributes 954 
(string "name" "grp_00954")
)
(graph_attributes 955 
(string "name" "grp_00955")
)
(graph_attributes 956 
(string "name" "grp_00956")
)
(graph_attributes 957 
(string "name" "grp_00957")
)
(graph_attributes 958 
(string "name" "grp_00958")
)
(graph_attributes 959 
(string "name" "grp_00959")
)
(graph_attributes 960 
(string "name" "grp_00960")
)
(graph_attributes 961 
(string "name" "grp_00961")
)
(graph_attributes 962 
(string "name" "grp_00962")
)
(graph_attributes 963 
(string "name" "grp_00963")
)
(graph_attributes 964 
(string "name" "grp_00964")
)
(graph_attributes 965 
(string "name" "grp_00965")
)
(graph_attributes 966 
(string "name" "grp_00966")
)
(graph_attributes 967 
(string "name" "grp_00967")
)
(graph_attributes 968 
(string "name" "grp_00968")
)
(graph_attributes 969 
(string "name" "grp_00969")
)
(graph_attributes 970 
(string "name" "grp_00970")
)
(graph_attributes 971 
(string "name" "grp_00971")
)
(graph_attributes 972 
(string "name" "grp_00972")
)
(graph_attributes 973 
(string "name" "grp_00973")
)
(graph_attributes 974 
(string "name" "grp_00974")
)
(graph_attributes 975 
(string "name" "grp_00975")
)
(graph_attributes 976 
(string "name" "grp_00976")
)
(graph_attributes 977 
(string "name" "grp_00977")
)
(graph_attributes 978 
(string "name" "grp_00978")
)
(graph_attributes 979 
(string "name" "grp_00979")
)
(graph_attributes 980 
(string "name" "grp_00980")
)
(graph_attributes 981 
(string "name" "grp_00981")
)
(graph_attributes 982 
(string "name" "grp_00982")
)
(graph_attributes 983 
(string "name" "grp_00983")
)
(graph_attributes 984 
(string "name" "grp_00984")
)
(graph_attributes 985 
(string "name" "grp_00985")
)
(graph_attributes 986 
(string "name" "grp_00986")
)
(graph_attributes 987 
(string "name" "grp_00987")
)
(graph_attributes 988 
(string "name" "grp_00988")
)
(graph_attributes 989 
(string "name" "grp_00989")
)
(graph_attributes 990 
(string "name" "grp_00990")
)
(graph_attributes 991 
(string "name" "grp_00991")
)
(graph_attributes 992 
(string "name" "grp_00992")
)
(graph_attributes 993 
(string "name" "grp_00993")
)
(graph_attributes 994 
(string "name" "grp_00994")
)
(graph_attributes 995 
(string "name" "grp_00995")
)
(graph_attributes 996 
(string "name" "grp_00996")
)
(graph_attributes 997 
(string "name" "grp_00997")
)
(graph_attributes 998 
(string "name" "grp_00998")
)
(controller 
(DataSet "Tulip Classic" 
(DataSet "views" 
(DataSet "view0" 
(DataSet "Node Link Diagram view" 
(DataSet "data" 
(DataSet "Display" 
(bool "antialiased" true)
(bool "arrow" true)
(bool "displayNodes" true)
(bool "displayEdges" true)
(bool "displayMetaNodes" true)
(bool "nodeLabel" true)
(bool "edgeLabel" false)
(bool "metaLabel" false)
(bool "outScreenLabel" false)
(bool "elementOrdered" false)
(bool "elementZOrdered" false)
(bool "edgeColorInterpolation" false)
(bool "edgeSizeInterpolation" false)
(bool "edge3D" false)
(bool "labelScaled" true)
(int "labelMinSize" 10)
(int "labelMaxSize" 30)
(int "selectedNodesStencil" 2)
(int "selectedMetaNodesStencil" 2)
(int "selectedEdgesStencil" 2)
(int "nodesStencil" 65535)
(int "metaNodesStencil" 65535)
(int "edgesStencil" 65535)
(int "nodesLabelStencil" 65535)
(int "metaNodesLabelStencil" 65535)
(int "edgesLabelStencil" 65535)
(bool "edgesMaxSizeToNodesSize" true)
(color "selectionColor" "(255,0,255,255)")
(int "labelsDensity" 100)
(bool "labelsAreBillboarded" false)
(bool "polylines3DAreBicolored" false)
)
(string "scene" "<?xml version=\"1.0\"?>
<scene>
  <data>
    <viewport>(0,0,1432,1032)</viewport>
    <background>(255,255,255,255)</background>
  </data>
  <children>
    <GlLayer name=\"Background\">
      <data>
        <camera>
          <data>
            <center>(70.2082,4.68705,0)</center>
            <eyes>(70.2082,4.68705,133.951)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>133.951</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(3.23281,-58.6235,-1.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(137.184,67.9976,1.5)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>0</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"background\" type=\"Gl2DRect\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
              <top>0</top>
              <bottom>1</bottom>
              <left>0</left>
              <right>1</right>
              <inPercent>1</inPercent>
              <textureName>TulipBitmapDir/tex_back.png</textureName>
              <xInv>0</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Main\">
      <data>
        <camera>
          <data>
            <center>(76.8265,6.60077,0)</center>
            <eyes>(76.8265,6.60077,133.951)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>0.90909</zoomFactor>
            <sceneRadius>133.951</sceneRadius>
            <d3>1</d3>
            <sceneBoundingBox0>(10.0416,-74.5224,-4.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(920.401,935.825,133.951)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"Hulls\" type=\"GlComposite\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
            </data>
            <children/>
          </GlEntity>
          <GlEntity name=\"graph\" type=\"GlGraphComposite\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Foreground\">
      <data>
        <camera>
          <data>
            <center>(70.2082,4.68705,0)</center>
            <eyes>(70.2082,4.68705,133.951)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>133.951</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(10.0416,-74.5224,-4.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(920.401,935.825,133.951)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"labrilogo\" type=\"Gl2DRect\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
              <top>55</top>
              <bottom>5</bottom>
              <left>5</left>
              <right>55</right>
              <inPercent>0</inPercent>
              <textureName>TulipBitmapDir/logolabri.jpg</textureName>
              <xInv>1</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
  </children>
</scene>
")
)
)
(uint "id" 65)
(int "x" 0)
(int "y" 0)
(int "width" 1434)
(int "height" 1059)
(bool "maximized" true)
)
(DataSet "view1" 
(DataSet "Python Script view" 
(string "script code" "# Powered by Python 2.7

# To cancel the modifications performed by the script
# on the current graph, click on the undo button.

# Some useful keyboards shortcuts : 
#   * Ctrl + D : comment selected lines.
#   * Ctrl + Shift + D  : uncomment selected lines.
#   * Ctrl + I : indent selected lines.
#   * Ctrl + Shift + I  : unindent selected lines.
#   * Ctrl + Return  : run script.
#   * Ctrl + F  : find selected text.
#   * Ctrl + R  : replace selected text.
#   * Ctrl + Space  : show auto-completion dialog.

from tulip import *

# the updateVisualization(centerViews = True) function can be called
# during script execution to update the opened views

# the pauseScript() function can be called to pause the script execution.
# To resume the script execution, you will have to click on the \"Run script \" button.

# the runGraphScript(scriptFile, graph) function can be called to launch another edited script on a tlp.Graph object.
# The scriptFile parameter defines the script name to call (in the form [a-zA-Z0-9_]+.py)

# the main(graph) function must be defined 
# to run the script on the current graph

def main(graph): 
	synonyms =  graph.getStringVectorProperty(\"synonyms\")
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	boundaryCondition =  graph.getBooleanProperty(\"boundaryCondition\")
	charge =  graph.getIntegerProperty(\"charge\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	class_ =  graph.getStringProperty(\"class\")
	clone =  graph.getBooleanProperty(\"clone\")
	compartment =  graph.getStringProperty(\"compartment\")
	comprises =  graph.getStringVectorProperty(\"comprises\")
	constant =  graph.getBooleanProperty(\"constant\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	encodes =  graph.getStringVectorProperty(\"encodes\")
	fastReaction =  graph.getBooleanProperty(\"fastReaction\")
	geneAssociation =  graph.getStringProperty(\"geneAssociation\")
	hasOnlySubstanceUnits =  graph.getBooleanProperty(\"hasOnlySubstanceUnits\")
	hasOutsideConnections =  graph.getBooleanProperty(\"hasOutsideConnections\")
	hasPart =  graph.getStringVectorProperty(\"hasPart\")
	hasProperty =  graph.getStringVectorProperty(\"hasProperty\")
	hasVersion =  graph.getStringVectorProperty(\"hasVersion\")
	id_ =  graph.getStringProperty(\"id\")
	initialAmount =  graph.getDoubleProperty(\"initialAmount\")
	initialConcentration =  graph.getDoubleProperty(\"initialConcentration\")
	is_ =  graph.getStringVectorProperty(\"is\")
	isDescribedBy =  graph.getStringVectorProperty(\"isDescribedBy\")
	isEncodedBy =  graph.getStringVectorProperty(\"isEncodedBy\")
	isHomologTo =  graph.getStringVectorProperty(\"isHomologTo\")
	isPartOf =  graph.getStringVectorProperty(\"isPartOf\")
	isPropertyOf =  graph.getStringVectorProperty(\"isPropertyOf\")
	isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
	listOfProducts =  graph.getIntegerVectorProperty(\"listOfProducts\")
	listOfReactants =  graph.getIntegerVectorProperty(\"listOfReactants\")
	membrane =  graph.getBooleanProperty(\"membrane\")
	membranePos =  graph.getIntegerProperty(\"membranePos\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	name =  graph.getStringProperty(\"name\")
	nbClones =  graph.getIntegerProperty(\"nbClones\")
	occursIn =  graph.getStringVectorProperty(\"occursIn\")
	outsideCompartment =  graph.getStringProperty(\"outsideCompartment\")
	outsideMembrane =  graph.getBooleanProperty(\"outsideMembrane\")
	proteinAssociation =  graph.getStringProperty(\"proteinAssociation\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	reversible =  graph.getBooleanProperty(\"reversible\")
	sboTerm =  graph.getStringProperty(\"sboTerm\")
	speciesType =  graph.getStringProperty(\"speciesType\")
	stoichiometry =  graph.getDoubleProperty(\"stoichiometry\")
	subSystem =  graph.getStringVectorProperty(\"subSystem\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	viewFont =  graph.getStringProperty(\"viewFont\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	viewLabel =  graph.getStringProperty(\"viewLabel\")
	viewLabelColor =  graph.getColorProperty(\"viewLabelColor\")
	viewLabelPosition =  graph.getIntegerProperty(\"viewLabelPosition\")
	viewLayout =  graph.getLayoutProperty(\"viewLayout\")
	viewMetaGraph =  graph.getGraphProperty(\"viewMetaGraph\")
	viewRotation =  graph.getDoubleProperty(\"viewRotation\")
	viewSelection =  graph.getBooleanProperty(\"viewSelection\")
	viewShape =  graph.getIntegerProperty(\"viewShape\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	viewSrcAnchorShape =  graph.getIntegerProperty(\"viewSrcAnchorShape\")
	viewSrcAnchorSize =  graph.getSizeProperty(\"viewSrcAnchorSize\")
	viewTexture =  graph.getStringProperty(\"viewTexture\")
	viewTgtAnchorShape =  graph.getIntegerProperty(\"viewTgtAnchorShape\")
	viewTgtAnchorSize =  graph.getSizeProperty(\"viewTgtAnchorSize\")

	mp = {\"dehydro-acyl-CoA\": tlp.Color(204,170,102,255),\"fattyacyl-CoA\": tlp.Color(170,102,204,255),\\
	\"3-ketoa-cyl-CoA\": tlp.Color(102,204,102,255),\"3-Oxoac-yl-CoA\": tlp.Color(102,204,102,255), \"CH3OR\": tlp.Color(102,102,204,255),\\
	\"RCHO\": tlp.Color(102,170,204,255),\"CHO2R\": tlp.Color(102,204,170,255),\\
	\"Palmita-te\": tlp.Color(170,204,102,255),\"C2H3O3R(CH2)n\": tlp.Color(204,102,170,255),\\
	\"hydroxyFA-CoA\": tlp.Color(102,170,170,255), \"straigh-t-chainFAanion\": tlp.Color(170,170,102,255), \\
	\"straight-chainsaturatedfattyacidanion\": tlp.Color(102,170,204,255)}
	for n in graph.getNodes():
		lbl = viewLabel[n].replace(\"\\n\", \"\")
		if mp.has_key(lbl):
			viewColor[n] = mp[lbl]
			multiColor[n] = [mp[lbl]]
			
	for n in graph.getNodes():
		if viewSize[n].getH() == 9:
			viewSize[n] = tlp.Size(5,5,5)
			
		if viewSize[n].getH() == 10:
			viewSize[n] = tlp.Size(9,9,9)
				
#		if viewSize[n].getH() == 3:
#			viewSize[n] = tlp.Size(4,4,4)
#			
#		if viewSize[n].getH() == 1:
#			viewSize[n] = tlp.Size(3,3,3)
")
(DataSet "main_scripts" 
(string "main_script0" "/Users/anna/Documents/PhD/tulip/src/python/modules/reaction_clusters_2_metanodes.py")
(string "main_script_src0" "from tulip import *
import ontology
import os

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	clones = [node]
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())
		
def factor(graph):
	clone = graph.addCloneSubGraph(graph.getName())
	quotient = graph.addCloneSubGraph(graph.getName() + \" quotient\")
	ancestor2nodes = {}
	for node in quotient.getNodes():
		ancestor = graph[\"ancestor\"][node]
		if ancestor:
			isReaction = graph[\"reaction\"][node]
			if not isReaction: 				
				neighbours = set()
#				for nn in getClones(quotient, node):
#					for n in quotient.getInNodes(nn):
#						neighbours.add((\"in\", graph[\"ancestor\"][n]))
#					for n in quotient.getOutNodes(nn):
#						neighbours.add((\"out\", graph[\"ancestor\"][n]))
				ancestor = ancestor, tuple(sorted(neighbours))
			ancestor = ancestor, isReaction 
			if ancestor2nodes.has_key(ancestor):
				ancestor2nodes[ancestor].append(node)
			else:
				ancestor2nodes[ancestor] = [node]
	
	ancestor2node_neighbours = {}		
	keys = list(ancestor2nodes.keys())
	for (ancestor, isReaction) in keys:
		if isReaction: continue
		nodes = ancestor2nodes[(ancestor, isReaction)]
		del ancestor2nodes[(ancestor, isReaction)]
		ancestor, neighbours = ancestor
		if ancestor2node_neighbours.has_key(ancestor):
			ancestor2node_neighbours[ancestor].append((nodes, set(neighbours)))
		else:
			ancestor2node_neighbours[ancestor] = [(nodes, set(neighbours))]
		
	for ancestor, lst in ancestor2node_neighbours.iteritems():
		changed = True
		while changed:
			changed = False
			new_lst = []
			for (nodes, neighbours) in lst:
				not_found = True
				for (new_nodes, new_neighbours) in new_lst:
					if neighbours & new_neighbours:
						new_neighbours |= neighbours
						new_nodes.extend(nodes)
						not_found = False
						changed = True
						break
				if not_found:
					new_lst.append((nodes, neighbours))
			lst = new_lst
		for (nodes, neighbours) in lst:
			new_ancestor = (ancestor, tuple(sorted(neighbours))), False
			if ancestor2nodes.has_key(new_ancestor):
				ancestor2nodes[new_ancestor].extend(nodes)
			else:
				ancestor2nodes[new_ancestor] = nodes
		
#	dir_ = os.path.dirname(ontology.__file__)
#	onto = ontology.parse(\"{0}/chebi.obo\".format(dir_))
			
	for (ancestor, isReaction), nodes in ancestor2nodes.iteritems():
		if len(nodes) <= 1: continue		
		all_nodes = list(nodes)
		id2ubN = {}
		if isReaction:
			for node in nodes:
				for n in quotient.getInOutNodes(node):
					if quotient.getRoot()[\"ubiquitous\"][n]:
						id_ = quotient.getRoot()[\"id\"][n]
						if id2ubN.has_key(id_): id2ubN[id_].append(n)
						else: id2ubN[id_] = [n]
		
			ubs = list(quotient.getInOutNodes(nodes[0]))
			isUb = quotient.getRoot()[\"ubiquitous\"]
			for n in ubs:
				if not isUb[n]: continue
				id_ = quotient.getRoot()[\"id\"][n]
				metaNode = quotient.createMetaNode(id2ubN[id_], False)
				updateProps(metaNode, n, quotient, clone)
				isUb[metaNode] = True
				quotient[\"viewSize\"][metaNode] = tlp.Size(5, 5) #bb.width(), bb.height())	
				quotient[\"viewLabel\"][metaNode] = clone[\"viewLabel\"][n]
				graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"chebi_id\"][n]
				quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]	
				quotient[\"clone\"][metaNode] = clone[\"clone\"][n]	
				updateComprises(id2ubN[id_], quotient, clone, metaNode)
					
		metaNode = quotient.createMetaNode(all_nodes, False)
		updateProps(metaNode, nodes[0], quotient, clone)
			
		if isReaction:	
			quotient[\"viewSize\"][metaNode] = tlp.Size(6, 6) #bb.width(), bb.height())
			quotient[\"viewLabel\"][metaNode] = \"generalized {0}\".format(clone[\"name\"][nodes[0]])
			for n in nodes:
				if not clone[\"reversible\"][metaNode]:
					quotient[\"reversible\"][metaNode] = False	
					break
			quotient[\"geneAssociation\"][metaNode] = \" or \".join(clone[\"geneAssociation\"][it] for it in nodes)	
			updateEcNumber(metaNode, nodes, quotient, clone)			
		else:		
			quotient[\"viewSize\"][metaNode] = tlp.Size(10, 10) #bb.width(), bb.height())	
			quotient[\"viewLabel\"][metaNode] = quotient[\"ancestor\"][metaNode]
			graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"ancestor_chebi_id\"][nodes[0]]
#			updateChebiInfo(metaNode, nodes, quotient, clone, onto)	
							
		quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]
			
		updateComprises(nodes, quotient, clone, metaNode)
		
def updateComprises(nodes, quotient, clone, metaNode):
	comprises = []
	for it in nodes:
		if not clone.isElement(it):
			print it
			continue
		if clone.getStringVectorProperty(\"comprises\")[it]:
			comprises.extend(clone[\"comprises\"][it])
		else:
			comprises.append(clone[\"speciesType\"][it])
	quotient.getStringVectorProperty(\"comprises\")[metaNode] = comprises

def updateChebiInfo(metaNode, nodes, quotient, clone, onto):
	common_parent = findCommonParent(nodes, clone, onto)
	if common_parent:
		quotient[\"viewLabel\"][metaNode] = common_parent.getName()
		par_id = list(common_parent.getAllIds())
		quotient[\"chebi_id\"][metaNode] = par_id
	
def updateEcNumber(metaNode, nodes, quotient, clone):
	ec = set()
	ecNum = clone.getStringProperty(\"ecNumber\")
	for n in nodes:
		numbers = ecNum[n]
		if numbers:
			numbers = set(numbers.split(\",\"))
			if not ec:
				ec = numbers
			else:
				intersection = ec & numbers
				if not intersection:
					print ec
					print numbers
					concensus = list(ec)[0].split(\".\")
					for num in ec | numbers:
						i = 0
						for it in num.split(\".\"):
							if concensus[i] == '-': break
							if concensus[i] != it:
								if i == 0:
									ec = set()
									break
								while i < 4:
									concensus[i] = '-'
									i += 1
								break
							i += 1
					ec = {'.'.join(concensus)}
				else:
					ec = intersection
	quotient[\"ecNumber\"][metaNode] = \",\".join(ec)
		
def findCommonParent(nodes, clone, onto):
	common_parent = None
	for n in nodes:
		chebi_ids = clone[\"chebi_id\"][n]
		if not chebi_ids: continue
		term = None
		for chebi_id in chebi_ids:
			term = onto.getTerm(chebi_id)
			if term: break
		if not term:
			common_parent = None
			break
		if not common_parent:
			common_parent = term
		else:
			common_parent = onto.commonParent(common_parent, term)
			if not common_parent:
				break
	return common_parent
	
def updateProps(metaNode, node, quotient, clone):
	for prop in [\"ancestor\", \"compartment\", \"outsideCompartment\", \\
	\"reaction\", \"reversible\", \"sboTerm\", \"speciesType\", \"ubiquitous\", \\
	\"viewBorderColor\", \"viewBorderWidth\", \"viewColor\", \"viewFont\", \"viewFontSize\", \\
	\"viewLabelColor\", \"viewLabelPosition\", \"viewLayout\", \"viewRotation\", \"viewSelection\", \\
	\"viewShape\", \"viewTexture\"]:
		quotient[prop][metaNode] = clone[prop][node]
	quotient[\"id\"][metaNode] = \"meta_\" + clone[\"id\"][node]
")
(string "main_script1" "/Users/anna/Documents/PhD/tulip/src/python/modules/vertical_merge.py")
(string "main_script_src1" "from tulip import *
from colorsys import hsv_to_rgb

def annotate(clusters, graph, ubiquitous_species):
	isVersionOf = graph.getStringVectorProperty(\"isVersionOf\")
	ancestor = graph.getStringProperty(\"ancestor\")
	cluster_num = 0
	transform = lambda f: tuple(sorted(ubiquitous_species & set(map(lambda it: graph[\"id\"][it], f))))
	for clu in clusters:
		chain_num = 0
		for r in clu:
			reaction_num = 0
			rev = not graph[\"reversible\"][r] or transform(graph.getInNodes(r)) <= transform(graph.getOutNodes(r))
			isVersionOf[r] = [\"{0}.{1}.{2}.{3}.{4}\".format(\"_\", cluster_num, chain_num, reaction_num, rev)]
			ancestor[r] = \"{0}.{1}\".format(cluster_num, reaction_num)
			chain_num += 1
		cluster_num += 1

def do_cluster(reactions, ubiquitous_species, id2parent, graph):
	vk2r = {}
	for r in reactions:
		key = getVerticalKey(r, ubiquitous_species, id2parent, graph)
		if vk2r.has_key(key):
			vk2r[key].append(r)
		else:
			vk2r[key] = [r]
	return vk2r.values()
	
def getReactions2Factor(graph, n2clu):
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubs = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	id2parent = {graph[\"id\"][n] : clu for (n, clu) in n2clu.iteritems()}
	vk2r = {}
	for r in rs:
		key = getVerticalKey(r, ubs, id2parent, graph)
		if vk2r.has_key(key):
			vk2r[key].append(r)
		else:
			vk2r[key] = [r]
	return vk2r.values()
	
def markSimilarReactions(graph, name=\"similar reactions\"):
	rClusterGraph = graph.addCloneSubGraph(name)
	ancestor = graph.getStringProperty(\"ancestor\")
	id_ = graph[\"id\"]
	print \"vertical merge on \", graph.getName()
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubiquitous_species = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	id2parent = {id_[n] : (ancestor[n] if ancestor[n] else id_[n]) for n in sp - ubiquitous_species}
	clus = do_cluster(rs, ubiquitous_species, id2parent, graph)
	clusters = filter(lambda clu: len(clu) > 1, clus)
	reverseIfNeeded(clusters, graph, ubiquitous_species, id2parent)
	drawClusters(clusters, rClusterGraph, graph)
	annotate(clus, graph, ubiquitous_species)
	# if no clusters found, remove the \"reaction clusters\" sub-graph
	if rClusterGraph.numberOfSubGraphs() == 0: graph.delSubGraph(rClusterGraph)

def reverseIfNeeded(clusters, graph, ubiquitous_species, id2parent):	
	for clu in clusters:
		for r in clu:
			if not graph[\"reversible\"][r]: continue
			ubiquitous_reactants, ubiquitous_products, \\
			specific_reactant_classes, specific_product_classes \\
			= getKeyElements(r, ubiquitous_species, id2parent, graph)
			if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
				graph[\"viewSelection\"][r] = True
				edgs = list(graph.getInOutEdges(r))
				for e in edgs:
					graph.reverse(e)	
					
def alignToVKey(graph, n2clu):	
	id2parent = {graph[\"id\"][n] : clu for (n, clu) in n2clu.iteritems()}
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubiquitous_species = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	for r in rs:
		if not graph[\"reversible\"][r]: continue
		ubiquitous_reactants, ubiquitous_products, \\
		specific_reactant_classes, specific_product_classes \\
		= getKeyElements(r, ubiquitous_species, id2parent, graph)
		if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
			graph[\"viewSelection\"][r] = True
			edgs = list(graph.getInOutEdges(r))
			for e in edgs:
				graph.reverse(e)	
					
def drawClusters(clusters, rClusterGraph, graph):
	for cluster in clusters:
		nodes = list(cluster)
		for r in cluster:
			nodes.extend(rClusterGraph.getInOutNodes(r))
		sub = rClusterGraph.inducedSubGraph(nodes)
		sub.setName(graph[\"name\"][cluster[0]])
		for r in cluster:
			nodes = [r]
			nodes.extend(sub.getInOutNodes(r))
			subsub = sub.inducedSubGraph(nodes)
			subsub.setName(graph[\"name\"][r])
	colorClu(clusters, graph)
	
def needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
	return (ubiquitous_reactants > ubiquitous_products) \\
	or (not ubiquitous_reactants and not ubiquitous_products \\
	and specific_reactant_classes > specific_product_classes)
	
def getKeyElements(r, ubiquitous_species, id2parent, graph):
	transform = lambda f: {graph[\"id\"][it] for it in f}
	reactants, products = transform(graph.getInNodes(r)), transform(graph.getOutNodes(r))
	ub_tr = lambda f: tuple(sorted(ubiquitous_species & f))
	ubiquitous_reactants, ubiquitous_products = ub_tr(reactants), ub_tr(products)
	getSpecificClasses = lambda species, id2parent: \\
	[id2parent[id] if id2parent.has_key(id) else id for id in species]
	sp_tr = lambda f: tuple(sorted(getSpecificClasses(f - ubiquitous_species, id2parent)))
	specific_reactant_classes, specific_product_classes = sp_tr(reactants), sp_tr(products)
	return ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes
	
def getVerticalKey(r, ubiquitous_species, id2parent, graph):
	ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes \\
	= getKeyElements(r, ubiquitous_species, id2parent, graph)
	if graph[\"reversible\"][r]:
		if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
			ubiquitous_reactants, ubiquitous_products = ubiquitous_products, ubiquitous_reactants
			specific_reactant_classes, specific_product_classes = specific_product_classes, specific_reactant_classes
	return (ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes, )
	
def removeUnusedSubgraphs(graph, rClusterGraph):
	# if no clusters found, remove the \"reaction clusters\" sub-graph
	if rClusterGraph.numberOfSubGraphs() == 0:
		graph.delSubGraph(rClusterGraph)
		
def colorClu(clusters, graph):
	viewColor = graph.getColorProperty(\"viewColor\")
	n = len(clusters)
	colors = [hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
	colors = [tlp.Color(int(255 * r), int(255 * g), int(255 * b)) for (r, g, b) in colors]
	for clu, color in zip(clusters, colors):
		for reaction in clu:
			for edge in graph.getInOutEdges(reaction):
				viewColor.setEdgeValue(edge, color)
	
def verticalCluster(graph):
	factor(graph, \"similar reactions\") 
")
(string "main_script2" "/Users/anna/Documents/PhD/tulip/src/python/porgy/sbml2porgy_pipeline.py")
(string "main_script_src2" "from tulip import *
from generalize import cluclu
from reaction_clusters_to_port_rules import addLabelGeneralizationRules, \\
addReactionFactoringRules, addRevertReactionRules
from graph_tools import findSubGraphByName

COMPARTMENT = \"peroxisome\"

def main(graph):
	tlp.Observable().holdObservers() 
	root = graph.getRoot()
	
	for n in graph.getNodes():
		if graph[\"reaction\"][n]:
			graph[\"viewLabel\"][n] = \"\"
			graph[\"name\"][n] = \"\"
	
#	runGraphScript(\"build_compartments_hierarchy.py\", root)
#	
#	comp = findSubGraphByName(root, COMPARTMENT)
#	
#	runGraphScript(\"draw_compartment.py\", comp)
#	
#	qd = findSubGraphByName(root, \"compartment drawings\")
#	qdc = findSubGraphByName(qd, COMPARTMENT)
#	qo = findSubGraphByName(qdc, \"quotient opened\")
#	if not qo: qo = comp
#	if not qo: qo = root
#	
#	co = root.addSubGraph()
#	co.setName(COMPARTMENT)
#	for n in qo.getNodes():
#		if list(qo.getInOutEdges(n)):
#			co.addNode(n)
#			for prop in qo.getProperties():
#				if co.existProperty(prop):
#					co[prop][n] = qo[prop][n]
#	for e in qo.getEdges():
#		co.addEdge(e)
#		for prop in qo.getProperties():
#			if co.existProperty(prop):
#				co[prop][e] = qo[prop][e]
#		
#	runGraphScript(\"filter_root.py\", co)
#	
#	to_delete = list(root.getSubGraphs()) 
#	for sub in to_delete:
#		root.delAllSubGraphs(sub)
	
#	co = root.addCloneSubGraph(COMPARTMENT)
#	
#	runGraphScript(\"cluster_reactions.py\", root)
	
	n2clu, rclu = cluclu(root)
	  
#	rc = findSubGraphByName(root, \"similar reactions\")
#	
#	runGraphScript(\"draw_reaction_clusters.py\", rc)
#	
#	root.delAllSubGraphs(rc)
	
	runGraphScript(\"convert_to_port_graph.py\", root)
	
	addLabelGeneralizationRules(root, n2clu)
	addReactionFactoringRules(root, rclu, n2clu)
	addRevertReactionRules(root, rclu, n2clu)
	
# 	runGraphScript(\"reaction_clusters_to_port_rules.py\", root)
 	
 	traceRoot = findSubGraphByName(root, \"TraceRoot\")
 	g0 = findSubGraphByName(root, \"G0\")
	g0[\"viewSelection\"].setAllNodeValue(False)
 	
 	traceMain = tlp.newSubGraph(traceRoot, \"TraceMain\")
	
	for n in g0.getNodes():
		traceMain.addNode(n)
	for e in g0.getEdges():
		traceMain.addEdge(e)
	metaNode = traceMain.createMetaNode(g0)
	fixProperties(traceMain, metaNode)
	fixProperties(traceRoot, metaNode)
	fixProperties(root, metaNode)
	
	# (uint \"TraceMain\" 39)
	root.setAttribute(\"TraceMain\", traceMain.getId())
	print traceMain.getId()
	
	tlp.Observable().unholdObservers()
	
def fixProperties(traceMain, metaNode):
	traceMain[\"viewShape\"][metaNode] = tlp.NodeShape.Square
#	traceMain.getIntegerProperty(\"NodeType\").setNodeValue(metaNode, 0)
	traceMain[\"viewLabel\"][metaNode] = \"G0\"
	traceMain.getIntegerProperty(\"Type\").setNodeValue(metaNode, 1)
	traceMain.getIntegerProperty(\"Transformation_Instance\").setNodeValue(metaNode, -1)
	traceMain.getStringProperty(\"Transformation_PPropertyName\").setNodeValue(metaNode, \"\")
	traceMain.getIntegerProperty(\"Transformation_Parallel_Information\").setNodeValue(metaNode, 0)
	traceMain.getIntegerProperty(\"Transformation_Rule\").setNodeValue(metaNode, -1)
	traceMain.getStringProperty(\"Transformation_Strategy\").setNodeValue(metaNode, \"\")
")
(string "main_script3" "/Users/anna/Documents/PhD/tulip/src/python/porgy/reaction_clusters_to_port_rules.py")
(string "main_script_src3" "from tulip import *
from convert_to_port_graph import *
import os
import ontology

LEFT = 1
RIGHT = 2
BRIDGE = 3
BRIDGE_PORT = 4

CENTER = 1
PORT = 2

def findSubGraphByName(root, name):
	def checkCollection(collection, name):
		new_collection = []
		for element in collection:
			if element:
				if name == element.getName(): return element
				subs = list(element.getSubGraphs())
				if subs: new_collection.extend(subs)
		return checkCollection(new_collection, name) if new_collection else None
	return checkCollection([root], name)
def getCenterPorts(gr, center): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")	
	return filter(lambda it: portType[it] == PORT, list(gr.getOutNodes(center)))
def getCenter(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")	
	return filter(lambda it: portType[it] == CENTER, list(gr.getInNodes(port)))[0]
def getPorts(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")	
	return filter(lambda it: portType[it] == PORT, list(gr.getInOutNodes(port)))
def getInPorts(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")		
	return filter(lambda it: portType[it] == PORT, list(gr.getInNodes(port)))
def getOutPorts(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")		
	return filter(lambda it: portType[it] == PORT, list(gr.getOutNodes(port)))
	
def isUbiquitous(n, graph):
	return len(graph[\"ancestor\"][n]) == 0
	
def getId(graph, species_port):
	species_center = getCenter(graph, species_port)
	reaction_ports = filter(lambda it: BRIDGE != graph[\"RuleSide\"][it], getPorts(graph, species_port))
	in_ = \"in\" == graph[\"viewLabel\"][species_port]	
	rs = []	
	for rp in reaction_ports:
		r = getCenter(graph, rp)
		numbers = graph[\"isVersionOf\"][r][0].split(\".\")
		reaction_num = numbers[3]
		rev = numbers[4]		
		
		species_ports = set(filter(lambda it: not graph[\"reaction\"][it], getPorts(graph, rp)))
		species_centers = map(lambda sp: getCenter(graph, sp), species_ports)
#		junk_species_centers = filter(lambda sc: isUbiquitous(sc, graph), species_centers)
		junk_neighbors = sorted(set(map(lambda sc: graph[\"viewLabel\"][sc], species_centers)))
		
		
#		in_out = \"in\" if (in_ and not rev) or (not in_ and rev) else \"out\"
		rs.append((reaction_num, tuple(junk_neighbors)))
	return graph[\"ancestor\"][species_center], tuple(sorted(set(rs)))	
	
def copy_node(graph, n, etalon):
	new_n = graph.addNode()
	for propName in etalon.getProperties():
		graph[propName][new_n] = etalon[propName][n]
	return new_n
			
def add_left(graph, n, etalon, shiftY=0):
	new_n = copy_node(graph, n, etalon)
	graph[\"RuleSide\"][new_n] = LEFT
	if shiftY:
		coord = graph[\"viewLayout\"][new_n]	
		coord.setY(coord.getY() + shiftY)
		graph[\"viewLayout\"][new_n] = coord
	return new_n
	
def add_right(graph, n, etalon, shiftY=0):
	new_n = copy_node(graph, n, etalon)
	coord = graph[\"viewLayout\"][new_n]	
	coord.setX(coord.getX() + 250)	
	graph[\"viewLayout\"][new_n] = coord
	graph[\"RuleSide\"][new_n] = RIGHT
	graph.getBooleanProperty(\"new\")[new_n] = True
	return new_n

def add_bridge(graph, rule_name=\"bridge\"):
	bridge = graph.addNode()
	graph[\"viewColor\"][bridge] = tlp.Color(200,200,200)
	graph[\"viewLabel\"][bridge] = rule_name
	graph[\"viewLayout\"][bridge] = tlp.Coord(150,0,0)
	graph[\"viewSize\"][bridge] = tlp.Size(1,10,1)
#	graph.getStringProperty(\"LayoutAlgorithm\")[bridge] = \"none\"
	graph[\"viewShape\"][bridge] = tlp.NodeShape.RoundedBox
	graph.getRoot().getIntegerProperty(\"NodeType\")[bridge] = CENTER
	graph[\"RuleSide\"][bridge] = BRIDGE	
	return bridge	
	
def add_side(graph, etalon, add_operation, side):
	edges = set()
	ports = []
	n2new_n, new_n2n = {}, {}
	for n in etalon.getNodes():
		new_n = add_operation(graph, n, etalon)	
		n2new_n[n] = new_n	
		new_n2n[new_n] = n
		if graph.getRoot().getIntegerProperty(\"NodeType\")[new_n] == PORT:
			graph[\"state\"][new_n] = \"\"
			graph[\"Arity\"][new_n] = len(list(etalon.getRoot().getInOutEdges(n))) - 1
			if not graph[\"reaction\"][new_n]: ports.append(new_n)
		for out in etalon.getOutNodes(n):
			edges.add((n, out))
		
	for (fro_n, to_n) in set(edges):
		graph[\"RuleSide\"][graph.addEdge(n2new_n[fro_n], n2new_n[to_n])] = side
	return ports, new_n2n, n2new_n
	
def add_nd(graph, etalon, n, add_operation, side, shiftY=0):
	in_p, out_p = None, None
	new_n = add_operation(graph, n, etalon, shiftY)
	for pt in getCenterPorts(etalon, n):
		new_p = add_operation(graph, pt, etalon, shiftY)
		graph[\"state\"][new_p] = \"not used\"
		graph[\"Arity\"][new_p] = len(list(etalon.getRoot().getInOutEdges(pt))) - 1
		if etalon[\"viewLabel\"][pt] == \"in\": in_p = new_p 
		else: out_p = new_p
		graph[\"RuleSide\"][graph.addEdge(new_n, new_p)] = side
	return new_n, in_p, out_p
	
def addLabelGeneralizationRules(gr, n2clu): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
		
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	clu2ruleNames = {}
	for n, clu in n2clu.iteritems():
		rule_name = \"rule_{1}_FROM_{0}\".format(root[\"viewLabel\"][n].replace(\" \", \"_\").replace(\"\\n\", \"_\"), clu.replace(\" \", \"_\"))
		if clu2ruleNames.has_key(clu): clu2ruleNames[clu].append(rule_name)
		else: clu2ruleNames[clu] = [rule_name]
		graph = tlp.newSubGraph(rules, rule_name)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		new_n, in_p, out_p = add_nd(graph, g0, n, add_left, LEFT)
		r_new_n, r_in_p, r_out_p = add_nd(graph, g0, n, add_right, RIGHT)
		graph[\"viewLabel\"][r_new_n] = clu
		gr[\"name\"][r_new_n] = clu
			
		# add bridge
		bridge = add_bridge(graph, rule_name)	
		
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		
		for (lbl, l_p, r_p, dy) in [(\"in\", in_p, r_in_p, -5), (\"out\", out_p, r_out_p, 5)]:
			bridge_port = addPort(graph, bridge, dy, lbl)
			viewShape[bridge_port] = tlp.NodeShape.Hexagon
			ruleSide[bridge_port] = BRIDGE
		
			for e in graph.getInEdges(bridge_port):
				ruleSide[e] = BRIDGE_PORT
				viewColor[e] = tlp.Color(255,0,0)
			for e in [graph.addEdge(l_p, bridge_port), graph.addEdge(bridge_port, r_p)]:
				ruleSide[e] = BRIDGE
				viewColor[e] = tlp.Color(255,0,0)
		graph.setAttribute(\"LayoutAlgorithm\", \"none\")
	for clu, rn in clu2ruleNames.iteritems():
		printStrategy(clu.replace(\" \", \"_\") + \".txt\", rn)
				
def addReactionFactoringRules(gr, rclu, n2clu): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
		
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	i = 0
	ruleNames = []
	for (r, ins, outs) in rclu:
		clus = []
		graph = tlp.newSubGraph(rules)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		# add bridge
		bridge = add_bridge(graph)	
		
		
		r_new_n, r_in_p, r_out_p = add_nd(graph, g0, r, add_right, RIGHT)
		graph[\"viewLabel\"][r_new_n] = \"\"
		gr[\"name\"][r_new_n] = \"\"
		
		(new_n0, in_p0, out_p0), (new_n1, in_p1, out_p1) = add_nd(graph, g0, r, add_left, LEFT), add_nd(graph, g0, r, add_left, LEFT, 100)
		for (sps, le, re) in [(ins, lambda in_s_p, out_s_p, in_p, out_p: graph.addEdge(out_s_p, in_p), lambda r_in_s_p, r_out_s_p, r_in_p, r_out_p: graph.addEdge(r_out_s_p, r_in_p)),\\
		(outs, lambda in_s_p, out_s_p, in_p, out_p: graph.addEdge(out_p, in_s_p), lambda r_in_s_p, r_out_s_p, r_in_p, r_out_p: graph.addEdge(r_out_p, r_in_s_p))]:
			for n in sps:
				(new_s_n0, in_s_p0, out_s_p0), (new_s_n1, in_s_p1, out_s_p1) = add_nd(graph, g0, n, add_left, LEFT), add_nd(graph, g0, n, add_left, LEFT, 100)
				r_new_s_n, r_in_s_p, r_out_s_p = add_nd(graph, g0, n, add_right, RIGHT)
				if n2clu.has_key(n):
					clu = n2clu[n]
					clus.append(clu)
					graph[\"viewLabel\"][r_new_s_n] = clu
					gr[\"name\"][r_new_s_n] = clu
					
					for new_s_n in [new_s_n0, new_s_n1]:
						graph[\"viewLabel\"][new_s_n] = clu
						gr[\"name\"][new_s_n] = clu
				for (in_s_p, out_s_p, in_p, out_p) in [(in_s_p0, out_s_p0, in_p0, out_p0), (in_s_p1, out_s_p1, in_p1, out_p1)]:
					ruleSide[le(in_s_p, out_s_p, in_p, out_p)] = LEFT
				ruleSide[re(r_in_s_p, r_out_s_p, r_in_p, r_out_p)] = RIGHT
				for (lbl, l_p0, l_p1, r_p, dy) in [(\"in\", in_s_p0, in_s_p1, r_in_s_p, -5), (\"out\", out_s_p0, out_s_p1, r_out_s_p, 5)]:
					bridge_port0, bridge_port1 = addPort(graph, bridge, dy, lbl), addPort(graph, bridge, dy, lbl)
					for bridge_port in [bridge_port0, bridge_port1]:
						viewShape[bridge_port] = tlp.NodeShape.Hexagon
						ruleSide[bridge_port] = BRIDGE
				
						for e in graph.getInEdges(bridge_port):
							ruleSide[e] = BRIDGE_PORT
							viewColor[e] = tlp.Color(255,0,0)
					for e in [graph.addEdge(l_p0, bridge_port0), graph.addEdge(l_p1, bridge_port1), graph.addEdge(bridge_port0, r_p), graph.addEdge(bridge_port1, r_p)]:
						ruleSide[e] = BRIDGE
						viewColor[e] = tlp.Color(255,0,0)
		rule_name = \"rule_r_{0}_{1}\".format(i, \"__\".join([it.replace(\" \", \" \") for it in clus]))
		graph.setName(rule_name)		
		i += 1 
		ruleNames.append(rule_name)
		graph.setAttribute(\"LayoutAlgorithm\", \"none\")
	printStrategy('factor.txt', ruleNames)

def addRevertReactionRules(gr, rclu, n2clu): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
		
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	i = 0
	ruleNames = []
	for (r, ins, outs) in rclu:
		clus = []
		graph = tlp.newSubGraph(rules)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		# add bridge
		bridge = add_bridge(graph)	
		
		new_n, in_p, out_p = add_nd(graph, g0, r, add_left, LEFT)
		r_new_n, r_in_p, r_out_p = add_nd(graph, g0, r, add_right, RIGHT)
		for (sps, le, re) in [(ins, lambda in_s_p, out_s_p: graph.addEdge(out_p, in_s_p), lambda r_in_s_p, r_out_s_p: graph.addEdge(r_out_s_p, r_in_p)),\\
		(outs, lambda in_s_p, out_s_p: graph.addEdge(out_s_p, in_p), lambda r_in_s_p, r_out_s_p: graph.addEdge(r_out_p, r_in_s_p))]:
			for n in sps:
				new_s_n, in_s_p, out_s_p = add_nd(graph, g0, n, add_left, LEFT)
				r_new_s_n, r_in_s_p, r_out_s_p = add_nd(graph, g0, n, add_right, RIGHT)
				if n2clu.has_key(n):
					clu = n2clu[n]
					clus.append(clu)
					graph[\"viewLabel\"][r_new_s_n] = clu
					gr[\"name\"][r_new_s_n] = clu
					
					graph[\"viewLabel\"][new_s_n] = clu
					gr[\"name\"][new_s_n] = clu
				ruleSide[le(in_s_p, out_s_p)] = LEFT
				ruleSide[re(r_in_s_p, r_out_s_p)] = RIGHT
				for (lbl, l_p, r_p, dy) in [(\"in\", in_s_p, r_in_s_p, -5), (\"out\", out_s_p, r_out_s_p, 5)]:
					bridge_port = addPort(graph, bridge, dy, lbl)
					viewShape[bridge_port] = tlp.NodeShape.Hexagon
					ruleSide[bridge_port] = BRIDGE
				
					for e in graph.getInEdges(bridge_port):
						ruleSide[e] = BRIDGE_PORT
						viewColor[e] = tlp.Color(255,0,0)
					for e in [graph.addEdge(l_p, bridge_port), graph.addEdge(bridge_port, r_p)]:
						ruleSide[e] = BRIDGE
						viewColor[e] = tlp.Color(255,0,0)
		rule_name = \"rule_revert_{0}_{1}\".format(i, \"__\".join([it.replace(\" \", \" \") for it in clus]))
		graph.setName(rule_name)	
		i += 1 
		ruleNames.append(rule_name)
		graph.setAttribute(\"LayoutAlgorithm\", \"none\")
	printStrategy('revert.txt', ruleNames)		

def printStrategy(f_name, ruleNames):
	with open(f_name,'w') as f:
		f.write(\";\".join([\"repeat({0})\".format(it) for it in ruleNames]))		
						
def main(gr): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
	rclusters = findSubGraphByName(root, \"reaction clusters drawing\")
	if not rclusters: return
	# we assume that this branch structure is like \"reaction clusters drawings\" > \"compartment_name\" > clusters
	rclusters = rclusters.getSubGraphs().next()
	
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	result_species_sets = []
	n2g0_n = {}
	graph2perimeter = {}
	i = 0	
	for cluster in rclusters.getSubGraphs():
		rule_name = \"rule_{0}\".format(i)
		i += 1 
		graph = tlp.newSubGraph(rules, rule_name)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		
		# add left side
		left_ports, left_n2n, n2left_n = add_side(graph, cluster, add_left, LEFT)
					
		# add right side
		right_ports, right_n2n, n2right_n = add_side(graph, cluster.getSubGraphs().next(), add_right, RIGHT)
			
		# add bridge
		bridge = add_bridge(graph, rule_name)	
			
		left_perimeter = []
		for port in left_ports:
			for neighbor in getPorts(g0, left_n2n[port]):
				if not n2left_n.has_key(neighbor):
					left_perimeter.append(port)
			
		id2species = {}
		all_ports = list(left_ports)
		all_ports.extend(right_ports)
		for species_port in all_ports:
			if not isUbiquitous(species_port, graph):
				sp_id = getId(graph, species_port)
				center = getCenter(graph, species_port)
				if id2species.has_key(sp_id):
					id2species[sp_id].add(center)
				else:
					id2species[sp_id] = {center} 
				
		species_sets = id2species.values()
		for s_set in species_sets:
			for s in s_set:
				if left_n2n.has_key(s):
					n2g0_n[s] = left_n2n[s]
			add = True
			for r_set in result_species_sets:
				if r_set & s_set:
					r_set |= s_set
					add = False
					break
			if add: 
				result_species_sets.append(s_set)		
				
		graph2perimeter[graph] = left_perimeter, right_ports, bridge
		
	all_graphs = [g0, root, rules]
	all_graphs.extend(list(rules.getSubGraphs()))
	
	for sp_set in result_species_sets:
		sp_set_f = filter(lambda ti: n2g0_n.has_key(ti), sp_set)
		if not sp_set_f: continue
		common_name = rclusters[\"ancestor\"][sp_set_f[0]]
		for n in sp_set:
			name = root[\"name\"][n] if n2g0_n.has_key(n) else common_name 
			g0_n = n2g0_n[n] if n2g0_n.has_key(n) else None	
			for gr in all_graphs:
				if gr.isElement(n): 
					gr[\"viewLabel\"][n] = common_name
					gr[\"name\"][n] = name
				if g0_n and gr.isElement(g0_n):
					gr[\"viewLabel\"][g0_n] = common_name
					gr[\"name\"][g0_n] = name
					
	# connect to the bridge
	
	for graph, (left_perimeter, right_ports, bridge) in graph2perimeter.iteritems():
		dy = -5
		id2bridge_port = {}
		
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		state = graph.getStringProperty(\"state\")
		arity = graph.getIntegerProperty(\"Arity\")
		
		i = 0
		for species_port in set(left_perimeter):
			port_id = getId(graph, species_port)
			bridge_port = addPort(graph, bridge, dy, \"{0}\".format(port_id))
			i += 1
			viewShape[bridge_port] = tlp.NodeShape.Hexagon
			ruleSide[bridge_port] = BRIDGE
			for e in graph.getInEdges(bridge_port):
				ruleSide[e] = BRIDGE_PORT
				viewColor[e] = tlp.Color(255,0,0)
			dy += 2
			if id2bridge_port.has_key(port_id):
				id2bridge_port[port_id].append(bridge_port)
			else:
				id2bridge_port[port_id] = [bridge_port]
			e = graph.addEdge(species_port, bridge_port)
			ruleSide[e] = BRIDGE
			viewColor[e] = tlp.Color(255,0,0)
				
		for species_port in set(right_ports):
			port_id = getId(graph, species_port)
			if id2bridge_port.has_key(port_id):
				for bridge_port in id2bridge_port[port_id]:
					e = graph.addEdge(bridge_port, species_port)
					ruleSide[e] = BRIDGE
					viewColor[e] = tlp.Color(255,0,0)
			
			
")
(string "main_script4" "/Users/anna/Documents/PhD/tulip/src/python/modules/generalize.py")
(string "main_script_src4" "from tulip import *
from extract_chebi import getOnto
from vertical_merge import markSimilarReactions, getReactions2Factor, alignToVKey
from reaction_clusters_2_metanodes import factor

def getN2term(graph, onto):
	n2term = {}	
	chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
	for n in graph.getNodes():		
		if graph[\"reaction\"][n] or graph[\"ubiquitous\"][n]: continue
		chebi_id_values = chebi_id[n]
		for chebi_id_value in chebi_id_values:
			term = onto.getTerm(chebi_id_value)
			if term: 
				n2term[n] = term
				break
	return n2term

def add2map(m, key, value):
	if m.has_key(key): m[key].add(value)
	else: m[key] = {value}
	
def getReaction2cluster(graph, n2clu):
	rs_clusters = getReactions2Factor(graph, n2clu)	
	r2clu, i = {}, 0
	for rs in rs_clusters:
		for r in rs: r2clu[r] = i
		i += 1
	return r2clu
	
def markAncestors(graph, n2term, term2clu):
	anc = graph.getStringProperty(\"ancestor\")
	anc_id = graph.getStringVectorProperty(\"ancestor_chebi_id\")	
	for n, term in n2term.iteritems():
		if not term2clu.has_key(term): continue
		(name, idd) = term2clu[term]
		anc[n] = name
		anc_id[n] = idd

def maximize(graph, term2clu, n2term):
	n2clu, clu2nodes = {}, {}
	for n, term in n2term.iteritems():
		if term2clu.has_key(term):
			clu = term2clu[term]
			n2clu[n] = clu
			add2map(clu2nodes, clu, n)
			
	r2clu = getReaction2cluster(graph, n2clu)
	alignToVKey(graph, n2clu)
	
	for (clu, nodes) in clu2nodes.iteritems():
		if len(nodes) <=1: continue
		neighbours2terms = {}
		for node in nodes:
			# reactions this species participated in			
			neighbours = set()
			for nn in getClones(graph, node):
				neighbours |= {(\"in\", r2clu[r]) for r in graph.getInNodes(nn)}
				neighbours |= {(\"out\", r2clu[r]) for r in graph.getOutNodes(nn)}
			key = tuple(sorted(neighbours))
			add2map(neighbours2terms, key, n2term[node])		
		cha = True
		lst = neighbours2terms.iteritems()
		new_lst = []
		for neighbours, terms in lst:
			neighbours = set(neighbours)
			to_remove = []
			for (new_neighbours, new_terms) in new_lst:
				if neighbours & new_neighbours:
					neighbours |= new_neighbours
					terms |= new_terms
					to_remove.append((new_neighbours, new_terms))
			new_lst = filter(lambda it: not it in to_remove, new_lst)
			new_lst.append((neighbours, terms))
		if len(new_lst) > 1:
			i = 0
			for neighbours, terms in new_lst:
				n_clu = clu + (i,)
				i += 1
				for t in terms: term2clu[t] = n_clu
	return term2clu

def getClu2term(term2clusters):
	clu2term = {}
	for term, clu in term2clusters.iteritems():
		add2map(clu2term, clu, term)
	return clu2term
	
def computeEq0(interesting_terms):
	return {term: (0,) for term in interesting_terms}

def getReactions(graph, node):
	rs = set()
	for nn in getClones(graph, node):
		rs |= set(graph.getInOutNodes(nn))
	return rs

def getConflicts(graph, terms, term2n, n2term):
	nodes = {term2n[t] for t in terms}
	r2ns = {}
	for n in nodes:
		for r in getReactions(graph, n):
			add2map(r2ns, r, n)
	confs = filter(lambda ns: len(ns) > 1, r2ns.values())
	return [{n2term[n] for n in ns} for ns in confs]

def fixStoich(graph, term2clu, n2term, onto):
	clu2terms = getClu2term(term2clu)
	term2n = {t:n for (n,t) in n2term.iteritems()}
	for clu, terms in clu2terms.iteritems():
		if len(terms) <= 1: continue
		conflicts = getConflicts(graph, terms, term2n, n2term)
		if not conflicts: continue
#		print [t.getName() for t in terms]
#		print \" >> \", [{n.getName() for n in ns} for ns in conflicts]
		t_sets = partition(terms, onto, conflicts)
		i = 0
		for ts in t_sets:
#			print \"---> \", [t.getName() for t in ts]
			i += 1
			n_clu = clu + (i,)
			for t in ts: term2clu[t] = n_clu
	return term2clu

def partition(terms, onto, conflicts):
	Ts = onto.commonPts(terms, includingChildren=False)
	if not Ts: Ts = onto.getRoots()
	
#	print [t.getName() for t in Ts]
	
	def good(t_set, conflicts):
		if not t_set: return False
		if len(t_set) <= 1: return True
		good = True
		for c_ts in conflicts:
			if len(t_set & c_ts) > 1:
				good = False
				break 
		return good
		
	psi = set()
	for T in Ts:
		options = {T}
		options |= onto.getAnyChildren(T, direct=False, checked=set())
		for t in options:
			t_set = (onto.getAnyChildren(t, direct=False, checked=set()) | {t}) & terms
			if len(t_set) <= 1: continue
			psi.add(tuple(sorted(t_set)))
			
			compl_set = terms - t_set
			if len(compl_set) <= 1: continue
			psi.add(tuple(sorted(compl_set)))
	
#	print len(psi)
	if len(psi) > 50:	
		psi = {tuple(t) for t in filter(lambda s: good(s, conflicts), [set(it) for it in psi])}
	
	for t in terms:
		psi.add((t,))
		
	to_add = set()
	ps = list(psi)
	i = 0
	for s in psi:
		i += 1
		for ss in ps[i:]:
			sss = tuple(sorted(set(s) - set(ss)))
			if sss and not sss in psi: 
				to_add.add(sss)
			sss = tuple(sorted(set(ss) - set(s)))
			if sss and not sss in psi: 
				to_add.add(sss)
	psi |= to_add		
			
	psi = filter(lambda s: good(s, conflicts), [set(it) for it in psi])
		
#	print \"PARTS: \"
#	for it in sorted(psi, key=lambda s: -len(s)):
#		print \"  \", [t.getName() for t in it]
	parts = list(reversed(greedy(terms, psi)))
	i = 1
	for part in parts:
		for o_part in parts[i:]: 
			if o_part & part: 
				part -= o_part
		i += 1
	return parts
	
def greedy(terms, psi):
	phi = []
	while terms and psi:
		s = max(psi, key=lambda it: len(it & terms))
		phi.append(s)
		terms -= s
		psi.remove(s)
	return phi	
	
def cluster2term(terms, onto):
	return onto.commonPts(terms, includingChildren=False).pop()
	
def computeRepresentatives(term2clu, clu2term, onto):
	clu2t, t2clu = {}, {}
	for clu, terms in clu2term.iteritems():
		T = cluster2term(terms, onto)
		clu2t[clu] = T	
		add2map(t2clu, T, clu)
	Ts = list(t2clu.keys())
	i = 0
	tr = lambda it: onto.getAnyChildren(it, False, set()) | onto.getEqualTerms(it, None, 0, set())
	t2not = {}	
	for t in Ts:
		kids = tr(t)
		i += 1
		for o_t in Ts[i:]:
			if tr(o_t) & kids:
				if o_t in kids:
					add2map(t2not, t, o_t)
				else:
					add2map(t2not, o_t, t)
	for clu, terms in clu2term.iteritems():
		T = clu2t[clu]
		name = T.getName()
		if t2not.has_key(T):
			name = name + \", but not \" + \", nor \".join([t.getName() for t in t2not[T]])
		for t in terms:
			term2clu[t] = (name, list(T.getAllIds()))
	return term2clu

def filterClu2Terms(term2clu):
	clu2term = getClu2term(term2clu)
	for clu, terms in clu2term.iteritems():
		if len(terms) <=1 : del term2clu[terms.pop()]
	
def printClus(term2clu):
	clu2term = getClu2term(term2clu)
	for clu, terms in clu2term.iteritems():
		print clu, \" \", [it.getName() for it in terms]
		print
	
def fixIncompartibilities(graph, onto, n2term, interesting_terms):	
	term2n = {t:n for (n,t) in n2term.iteritems()}
	print \"---eq-0---\"
	term2clu = computeEq0(interesting_terms)	
	print \"---maximize---\"
	term2clu = maximize(graph, term2clu, n2term)
	printClus(term2clu)
	filterClu2Terms(term2clu)
	print \"---stoich---\"
	term2clu = fixStoich(graph, term2clu, n2term, onto)
	printClus(term2clu)
	filterClu2Terms(term2clu)
	print \"---maximize---\"
	term2clu = maximize(graph, term2clu, n2term)
	filterClu2Terms(term2clu)
	term2clu = computeRepresentatives(term2clu, getClu2term(term2clu), onto)
	return term2clu

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())			
	
def generalize(graph):
	onto = getOnto(graph)
	n2term = getN2term(graph, onto)
	interesting_terms = set(n2term.values())
	term2clu = fixIncompartibilities(graph, onto, n2term, interesting_terms)
	if not term2clu: return None

	clone = graph.addCloneSubGraph(graph.getName())
	markAncestors(clone, n2term, term2clu)
	markSimilarReactions(clone)
	
	factor(clone)
	grr = None
	for sub in clone.getSubGraphs():
		if ((clone.getName() + \" quotient\") == sub.getName()):
			grr = sub
	print \"-------------------------\\n\"
	try:
		dataSet = tlp.getDefaultPluginParameters(\"ChebiColorer\", grr)
		tlp.applyAlgorithm(grr, dataSet, \"ChebiColorer\")	
	except Exception: 
  		pass
	return grr

def cluclu(graph):
	onto = getOnto(graph)
	n2term = getN2term(graph, onto)
	interesting_terms = set(n2term.values())
	term2clu = fixIncompartibilities(graph, onto, n2term, interesting_terms)
	
	n2clu = {}
	for n, term in n2term.iteritems():
		if term2clu.has_key(term):
			(name, idd) = term2clu[term]
			n2clu[n] = name
			
	rs_clusters = getReactions2Factor(graph, n2clu)
	rclu = []
	for rs in rs_clusters:
		if len(rs) <= 1: continue
		r = rs.pop()
		ins, outs = list(graph.getInNodes(r)), list(graph.getOutNodes(r))
		rclu.append((r, ins, outs))
	return n2clu, rclu
")
(string "main_script5" "/Users/anna/Documents/PhD/tulip/src/python/new_pipeline.py")
(string "main_script_src5" "from tulip import *
from filter_root import filter_graph
from metabolic_widgets import SpeciesTypeSelectionDialog
from extract_chebi import saveOnto, getOnto
from ontology import save
from shorten_names import shorten
from generalize import generalize
from graph_tools import findSubGraphByName
import sys
import os

def main(graph):
#	root = graph.getRoot()
#	mark_ubiquitous_species(root)
	gr = generalize(graph)
	if gr: runGraphScript(\"shorten_names.py\", gr)
####	saveOnto(graph, \"/Users/anna/Documents/chebi_slimo.obo\")
#	root = graph.getRoot()
#	runGraphScript(\"draw_arrows.py\", root)
#	dataSet = tlp.getDefaultPluginParameters(\"ChebiAnnotator\", root)
#	tlp.applyAlgorithm(root, dataSet, \"ChebiAnnotator\")
#	runGraphScript(\"update_chebi_id_values.py\", root)
#	mark_ubiquitous_species(root)
#	runGraphScript(\"build_compartments_hierarchy.py\", root)
#
#	cNames = set(root.getAttribute(\"compartments\").split(\";\"))
#	for comp_name in cNames:
#		if not comp_name: continue
#		if comp_name == \"cytoplasm\": continue
#		comp = findSubGraphByName(root, comp_name)
#		if not comp or not len(list(comp.getNodes())): continue
#		subs = list(comp.getSubGraphs())
#		if subs:
#			names = {sub.getName() for sub in subs}
#			if names & cNames: continue
#			else: 
#				comp = subs[0]
#				comp_name = comp.getName()
#		runGraphScript(\"draw_compartment.py\", comp)
#		cd = findSubGraphByName(root, \"compartment drawings\")
#		if not cd: continue
#		comp = findSubGraphByName(cd, comp_name)
#		if not comp: continue
#		print comp_name
#		qo = findSubGraphByName(comp, \"quotient opened\")
#		if not qo: continue
#		filter_graph(comp, qo)
####		print \"GENERALIZE\"
####		gc = generalize(comp)
####		if not gc: continue
#######		runGraphScript(\"build_compartments_hierarchy.py\", generalized_comp)
#######		gc = findSubGraphByName(generalized_comp, comp_name)
#######		if not gc: continue
#######		runGraphScript(\"shorten_names.py\", gc)
####		runGraphScript(\"draw_compartment.py\", gc)	
###	runGraphScript(\"shorten_names.py\", root)
##

def mark_ubiquitous_species(root):
	ub = root.getBooleanProperty(\"ubiquitous\")
	speciesTypeSelDialog = SpeciesTypeSelectionDialog(root, title=\"Select ubiquitous species\",\\
	condition=\"Mark ubiquitous those with degree greater than: \", left_label=\"Specific species:\",\\
	right_label=\"Ubiquitous species:\")
	speciesTypeSelDialog.exec_()
	ub_sps = speciesTypeSelDialog.getSpeciesTypesToDuplicate()
#	print ub_sps
	for n in root.getNodes():
		if root[\"speciesType\"][n] in ub_sps:
			ub[n] = True
")
(string "main_script6" "/Users/anna/Documents/PhD/tulip/src/python/modules/shorten_names.py")
(string "main_script_src6" "from tulip import *
import ontology
import os

def main(graph): 
	dir = os.path.dirname(ontology.__file__)
	onto = ontology.parse(\"{0}/chebi.obo\".format(dir))
	shorten(graph, onto)

def shorten(graph, onto):	
	chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
	name = graph.getStringProperty(\"name\")
	viewLabel = graph.getStringProperty(\"viewLabel\")
	synonyms = graph.getStringVectorProperty(\"synonyms\")
	
	for n in graph.getNodes():
		if graph[\"reaction\"][n] and graph[\"ecNumber\"][n]:
			graph[\"viewLabel\"][n] = graph[\"ecNumber\"][n]
			continue
		short_name = graph[\"name\"][n]
		if short_name.find(\"[\") != -1: short_name = short_name[:short_name.find(\"[\")]
		ch_id = chebi_id[n]
		if ch_id:
			term = onto.getTerm(ch_id[0])
			if term:
				alts = [term.getName()]
				alts.extend(term.getSynonyms())
				synonyms[n] = alts
				if not short_name: short_name = term.getName()
				for alt in alts:
					if len(alt) < len(short_name):
						short_name = alt
		start, end = short_name.find(\"(\"), short_name.find(\")\")
		if start != -1 and end != -1 and end - start > 5:
			short_name = short_name[:start] + (short_name[end + 1:] if end < len(short_name) else \"\")
		parts = short_name.replace(\"generalized \", \"\").strip().replace(\"(\", \" (\").replace(\"  \", \" \").replace(\"-\", \"- \").replace(\" )\", \")\").split(\" \")
		new_parts = []
		prefix = \"\"
		max_ = max(len(short_name) / 4, 7)
		if parts:
			for part in parts:
				prefix, ps = treat(prefix, part, max_)
				new_parts += ps
			if prefix: new_parts.append(prefix)
		graph[\"viewLabel\"][n] = \"\\n\".join(new_parts)
		
def treat(prefix, part, max_):
	if len(prefix + part) <= 4: return prefix + part, []
	border = max_ - len(prefix)
	if len(prefix + part) <= max_ or len(part[border:]) == 1 : return \"\", [prefix + part]
	if len(prefix) <= 4:
		if prefix and not prefix.endswith(\"-\"): prefix += \" \"
		return part[border:], [prefix + part[:border] + \"-\"]
	p, ps = treat(\"\", part, max_)
	return p, [prefix] + ps

")
(string "main_script7" "")
(string "main_script_src7" "# Powered by Python 2.7

# To cancel the modifications performed by the script
# on the current graph, click on the undo button.

# Some useful keyboards shortcuts : 
#   * Ctrl + D : comment selected lines.
#   * Ctrl + Shift + D  : uncomment selected lines.
#   * Ctrl + I : indent selected lines.
#   * Ctrl + Shift + I  : unindent selected lines.
#   * Ctrl + Return  : run script.
#   * Ctrl + F  : find selected text.
#   * Ctrl + R  : replace selected text.
#   * Ctrl + Space  : show auto-completion dialog.

from tulip import *

# the updateVisualization(centerViews = True) function can be called
# during script execution to update the opened views

# the pauseScript() function can be called to pause the script execution.
# To resume the script execution, you will have to click on the \"Run script \" button.

# the runGraphScript(scriptFile, graph) function can be called to launch another edited script on a tlp.Graph object.
# The scriptFile parameter defines the script name to call (in the form [a-zA-Z0-9_]+.py)

# the main(graph) function must be defined 
# to run the script on the current graph

def main(graph): 
	comprises =  graph.getStringVectorProperty(\"comprises\")
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	boundaryCondition =  graph.getBooleanProperty(\"boundaryCondition\")
	charge =  graph.getIntegerProperty(\"charge\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	class_ =  graph.getStringProperty(\"class\")
	clone =  graph.getBooleanProperty(\"clone\")
	compartment =  graph.getStringProperty(\"compartment\")
	constant =  graph.getBooleanProperty(\"constant\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	encodes =  graph.getStringVectorProperty(\"encodes\")
	fastReaction =  graph.getBooleanProperty(\"fastReaction\")
	geneAssociation =  graph.getStringProperty(\"geneAssociation\")
	hasOnlySubstanceUnits =  graph.getBooleanProperty(\"hasOnlySubstanceUnits\")
	hasOutsideConnections =  graph.getBooleanProperty(\"hasOutsideConnections\")
	hasPart =  graph.getStringVectorProperty(\"hasPart\")
	hasProperty =  graph.getStringVectorProperty(\"hasProperty\")
	hasVersion =  graph.getStringVectorProperty(\"hasVersion\")
	id_ =  graph.getStringProperty(\"id\")
	initialAmount =  graph.getDoubleProperty(\"initialAmount\")
	initialConcentration =  graph.getDoubleProperty(\"initialConcentration\")
	is_ =  graph.getStringVectorProperty(\"is\")
	isDescribedBy =  graph.getStringVectorProperty(\"isDescribedBy\")
	isEncodedBy =  graph.getStringVectorProperty(\"isEncodedBy\")
	isHomologTo =  graph.getStringVectorProperty(\"isHomologTo\")
	isPartOf =  graph.getStringVectorProperty(\"isPartOf\")
	isPropertyOf =  graph.getStringVectorProperty(\"isPropertyOf\")
	isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
	listOfProducts =  graph.getIntegerVectorProperty(\"listOfProducts\")
	listOfReactants =  graph.getIntegerVectorProperty(\"listOfReactants\")
	membrane =  graph.getBooleanProperty(\"membrane\")
	membranePos =  graph.getIntegerProperty(\"membranePos\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	name =  graph.getStringProperty(\"name\")
	nbClones =  graph.getIntegerProperty(\"nbClones\")
	occursIn =  graph.getStringVectorProperty(\"occursIn\")
	outsideCompartment =  graph.getStringProperty(\"outsideCompartment\")
	outsideMembrane =  graph.getBooleanProperty(\"outsideMembrane\")
	proteinAssociation =  graph.getStringProperty(\"proteinAssociation\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	reversible =  graph.getBooleanProperty(\"reversible\")
	sboTerm =  graph.getStringProperty(\"sboTerm\")
	speciesType =  graph.getStringProperty(\"speciesType\")
	stoichiometry =  graph.getDoubleProperty(\"stoichiometry\")
	subSystem =  graph.getStringVectorProperty(\"subSystem\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	viewFont =  graph.getStringProperty(\"viewFont\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	viewLabel =  graph.getStringProperty(\"viewLabel\")
	viewLabelColor =  graph.getColorProperty(\"viewLabelColor\")
	viewLabelPosition =  graph.getIntegerProperty(\"viewLabelPosition\")
	viewLayout =  graph.getLayoutProperty(\"viewLayout\")
	viewMetaGraph =  graph.getGraphProperty(\"viewMetaGraph\")
	viewRotation =  graph.getDoubleProperty(\"viewRotation\")
	viewSelection =  graph.getBooleanProperty(\"viewSelection\")
	viewShape =  graph.getIntegerProperty(\"viewShape\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	viewSrcAnchorShape =  graph.getIntegerProperty(\"viewSrcAnchorShape\")
	viewSrcAnchorSize =  graph.getSizeProperty(\"viewSrcAnchorSize\")
	viewTexture =  graph.getStringProperty(\"viewTexture\")
	viewTgtAnchorShape =  graph.getIntegerProperty(\"viewTgtAnchorShape\")
	viewTgtAnchorSize =  graph.getSizeProperty(\"viewTgtAnchorSize\")

#	ns = filter(lambda n: viewSelection[n],  graph.getNodes())
#	graph.inducedSubGraph(ns)

	sup = graph.getSuperGraph()
	for n in graph.getNodes():
		sup[\"viewLayout\"][n] = viewLayout[n]
		
")
(string "main_script8" "")
(string "main_script_src8" "# Powered by Python 2.7

# To cancel the modifications performed by the script
# on the current graph, click on the undo button.

# Some useful keyboards shortcuts : 
#   * Ctrl + D : comment selected lines.
#   * Ctrl + Shift + D  : uncomment selected lines.
#   * Ctrl + I : indent selected lines.
#   * Ctrl + Shift + I  : unindent selected lines.
#   * Ctrl + Return  : run script.
#   * Ctrl + F  : find selected text.
#   * Ctrl + R  : replace selected text.
#   * Ctrl + Space  : show auto-completion dialog.

from tulip import *

# the updateVisualization(centerViews = True) function can be called
# during script execution to update the opened views

# the pauseScript() function can be called to pause the script execution.
# To resume the script execution, you will have to click on the \"Run script \" button.

# the runGraphScript(scriptFile, graph) function can be called to launch another edited script on a tlp.Graph object.
# The scriptFile parameter defines the script name to call (in the form [a-zA-Z0-9_]+.py)

# the main(graph) function must be defined 
# to run the script on the current graph

def main(graph): 
	synonyms =  graph.getStringVectorProperty(\"synonyms\")
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	boundaryCondition =  graph.getBooleanProperty(\"boundaryCondition\")
	charge =  graph.getIntegerProperty(\"charge\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	class_ =  graph.getStringProperty(\"class\")
	clone =  graph.getBooleanProperty(\"clone\")
	compartment =  graph.getStringProperty(\"compartment\")
	comprises =  graph.getStringVectorProperty(\"comprises\")
	constant =  graph.getBooleanProperty(\"constant\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	encodes =  graph.getStringVectorProperty(\"encodes\")
	fastReaction =  graph.getBooleanProperty(\"fastReaction\")
	geneAssociation =  graph.getStringProperty(\"geneAssociation\")
	hasOnlySubstanceUnits =  graph.getBooleanProperty(\"hasOnlySubstanceUnits\")
	hasOutsideConnections =  graph.getBooleanProperty(\"hasOutsideConnections\")
	hasPart =  graph.getStringVectorProperty(\"hasPart\")
	hasProperty =  graph.getStringVectorProperty(\"hasProperty\")
	hasVersion =  graph.getStringVectorProperty(\"hasVersion\")
	id_ =  graph.getStringProperty(\"id\")
	initialAmount =  graph.getDoubleProperty(\"initialAmount\")
	initialConcentration =  graph.getDoubleProperty(\"initialConcentration\")
	is_ =  graph.getStringVectorProperty(\"is\")
	isDescribedBy =  graph.getStringVectorProperty(\"isDescribedBy\")
	isEncodedBy =  graph.getStringVectorProperty(\"isEncodedBy\")
	isHomologTo =  graph.getStringVectorProperty(\"isHomologTo\")
	isPartOf =  graph.getStringVectorProperty(\"isPartOf\")
	isPropertyOf =  graph.getStringVectorProperty(\"isPropertyOf\")
	isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
	listOfProducts =  graph.getIntegerVectorProperty(\"listOfProducts\")
	listOfReactants =  graph.getIntegerVectorProperty(\"listOfReactants\")
	membrane =  graph.getBooleanProperty(\"membrane\")
	membranePos =  graph.getIntegerProperty(\"membranePos\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	name =  graph.getStringProperty(\"name\")
	nbClones =  graph.getIntegerProperty(\"nbClones\")
	occursIn =  graph.getStringVectorProperty(\"occursIn\")
	outsideCompartment =  graph.getStringProperty(\"outsideCompartment\")
	outsideMembrane =  graph.getBooleanProperty(\"outsideMembrane\")
	proteinAssociation =  graph.getStringProperty(\"proteinAssociation\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	reversible =  graph.getBooleanProperty(\"reversible\")
	sboTerm =  graph.getStringProperty(\"sboTerm\")
	speciesType =  graph.getStringProperty(\"speciesType\")
	stoichiometry =  graph.getDoubleProperty(\"stoichiometry\")
	subSystem =  graph.getStringVectorProperty(\"subSystem\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	viewFont =  graph.getStringProperty(\"viewFont\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	viewLabel =  graph.getStringProperty(\"viewLabel\")
	viewLabelColor =  graph.getColorProperty(\"viewLabelColor\")
	viewLabelPosition =  graph.getIntegerProperty(\"viewLabelPosition\")
	viewLayout =  graph.getLayoutProperty(\"viewLayout\")
	viewMetaGraph =  graph.getGraphProperty(\"viewMetaGraph\")
	viewRotation =  graph.getDoubleProperty(\"viewRotation\")
	viewSelection =  graph.getBooleanProperty(\"viewSelection\")
	viewShape =  graph.getIntegerProperty(\"viewShape\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	viewSrcAnchorShape =  graph.getIntegerProperty(\"viewSrcAnchorShape\")
	viewSrcAnchorSize =  graph.getSizeProperty(\"viewSrcAnchorSize\")
	viewTexture =  graph.getStringProperty(\"viewTexture\")
	viewTgtAnchorShape =  graph.getIntegerProperty(\"viewTgtAnchorShape\")
	viewTgtAnchorSize =  graph.getSizeProperty(\"viewTgtAnchorSize\")

	mp = {\"dehydro-acyl-CoA\": tlp.Color(204,170,102,255),\"fattyacyl-CoA\": tlp.Color(170,102,204,255),\\
	\"3-ketoa-cyl-CoA\": tlp.Color(102,204,102,255),\"3-Oxoac-yl-CoA\": tlp.Color(102,204,102,255), \"CH3OR\": tlp.Color(102,102,204,255),\\
	\"RCHO\": tlp.Color(102,170,204,255),\"CHO2R\": tlp.Color(102,204,170,255),\\
	\"Palmita-te\": tlp.Color(170,204,102,255),\"C2H3O3R(CH2)n\": tlp.Color(204,102,170,255),\\
	\"hydroxyFA-CoA\": tlp.Color(102,170,170,255), \"straigh-t-chainFAanion\": tlp.Color(170,170,102,255), \\
	\"straight-chainsaturatedfattyacidanion\": tlp.Color(102,170,204,255)}
	for n in graph.getNodes():
		lbl = viewLabel[n].replace(\"\\n\", \"\")
		if mp.has_key(lbl):
			viewColor[n] = mp[lbl]
			multiColor[n] = [mp[lbl]]
			
	for n in graph.getNodes():
		if viewSize[n].getH() == 9:
			viewSize[n] = tlp.Size(5,5,5)
			
		if viewSize[n].getH() == 10:
			viewSize[n] = tlp.Size(9,9,9)
				
#		if viewSize[n].getH() == 3:
#			viewSize[n] = tlp.Size(4,4,4)
#			
#		if viewSize[n].getH() == 1:
#			viewSize[n] = tlp.Size(3,3,3)
")
(int "main_script_id" 8)
)
(DataSet "modules" 
(string "module0" "/Users/anna/Documents/PhD/tulip/src/python/modules/edge_length_optimizer.py")
(string "module_src0" "from tulip import *
import itertools
import metabolic_utils

def findBestLayoutConfiguration(sg, layoutConfigurations):
	spacing = 30
	minAvgEdgeLength = 1000000
	bestConf = None
	wholeConfs = list(itertools.product(*layoutConfigurations))
	
	trSg = sg.addSubGraph()
	contentSg = sg.addSubGraph()
	membranePos = -1
	for n in sg.getNodes():
		if sg[\"membrane\"][n] and sg[\"reaction\"][n]:
			membranePos = sg[\"membranePos\"][n]
			trSg.addNode(n)
			for ne in sg.getInOutNodes(n):
				if sg[\"clone\"][ne] or sg[\"outsideMembrane\"][ne]:
					trSg.addNode(ne)
					trSg.addEdge(sg.existEdge(n, ne, False))
		elif not trSg.isElement(n):
			canAdd = True
			if sg[\"clone\"][n] or sg[\"outsideMembrane\"][n]:
				if sg[\"membrane\"][sg.getInOutNodes(n).next()]:
					canAdd = False
			if not canAdd:
				continue
				
			contentSg.addNode(n)				
			for ne in sg.getInOutNodes(n):
				if not sg[\"membrane\"][ne]:
					contentSg.addNode(ne)
					contentSg.addEdge(sg.existEdge(n, ne, False))	
	
	for conf in wholeConfs:
		for g in conf:
			for n in g.getNodes():
				sg[\"viewLayout\"][n] = g[\"viewLayout\"][n]
			for e in g.getEdges():
				sg[\"viewLayout\"][e] = g[\"viewLayout\"][e]
				
		if membranePos != -1:
			bbTr = tlp.computeBoundingBox(trSg, trSg[\"viewLayout\"], trSg[\"viewSize\"], trSg[\"viewRotation\"])
			bbContent = tlp.computeBoundingBox(contentSg, contentSg[\"viewLayout\"], contentSg[\"viewSize\"], contentSg[\"viewRotation\"])
			if membranePos == 0:
				newCenter = tlp.Vec3f(bbTr[1][0] + spacing + bbContent.width() / 2, bbTr.center()[1], 0)
			elif membranePos == 1:
				newCenter = tlp.Vec3f(bbTr.center()[0], bbTr[0][1] - spacing - bbContent.height() / 2, 0)
			elif membranePos == 2:
				newCenter = tlp.Vec3f(bbTr[0][0] - spacing - bbContent.width() / 2, bbTr.center()[1], 0)
			elif membranePos == 3:
				newCenter = tlp.Vec3f(bbTr.center()[0], bbTr[1][1] + spacing + bbContent.height() / 2, 0)	
			sg[\"viewLayout\"].center(newCenter, contentSg)
			for n in sg.getNodes():
				for g in conf:
					if g.isElement(n):
						g[\"viewLayout\"][n] = sg[\"viewLayout\"][n]
			for e in sg.getEdges():
				for g in conf:
					if g.isElement(e):
						g[\"viewLayout\"][e] = sg[\"viewLayout\"][e]
		avgEdgeLength = sg[\"viewLayout\"].averageEdgeLength()
		if (avgEdgeLength <= minAvgEdgeLength):
			minAvgEdgeLength = avgEdgeLength
			bestConf = conf
	sg.delSubGraph(trSg)
	sg.delSubGraph(contentSg)
				
	for g in bestConf:
		for n in g.getNodes():
			sg[\"viewLayout\"][n] = g[\"viewLayout\"][n]
			sg[\"viewSize\"][n] = g[\"viewSize\"][n]
			sg[\"viewMetaGraph\"][n] = g[\"viewMetaGraph\"][n]
		for e in g.getEdges():
			sg[\"viewLayout\"][e] = g[\"viewLayout\"][e]

def findBestLayoutConfiguration2(sg, selectedNodes):
		ccfp = tlp.ConnectedTest.computeConnectedComponents(selectedNodes)
		for cc in ccfp:
			layoutConfigurations = []
			for n in cc:
				metaSg = sg[\"viewMetaGraph\"][n]
				metaSgConfs = []
				for conf in metaSg.getSubGraphs():
					metaSgConfs.append(conf)
				if len(metaSgConfs) > 0:
					layoutConfigurations.append(metaSgConfs)
			nbConfs = 1
			for confs in layoutConfigurations:
				print nbConfs
				nbConfs *= len(confs)
			print nbConfs
			if nbConfs < 50000:
				findBestLayoutConfiguration(sg, layoutConfigurations)
			else:
				sgCC = selectedNodes.inducedSubGraph(cc)
				betweeness = tlp.DoubleProperty(sgCC)
				dataSet = tlp.getDefaultPluginParameters(\"Betweenness Centrality\")
				dataSet[\"norm\"] = True
				sgCC.computeDoubleProperty(\"Betweenness Centrality\", betweeness, dataSet)
				firstPass = []
				secondPass = []
				for n in sgCC.getNodes():
					if betweeness[n] > betweeness.getNodeMax()/2:
						firstPass.append(n)
					else:
						secondPass.append(n)
						
				fpSg = sgCC.inducedSubGraph(firstPass)
				spSg = sgCC.inducedSubGraph(secondPass)
												
				findBestLayoutConfiguration2(sg, fpSg)
				findBestLayoutConfiguration2(sg, spSg)
				
				selectedNodes.delAllSubGraphs(sgCC)	

def optimizeEdgeLengthOnQuotient(quotient):
	origLayoutSg = quotient.getSuperGraph().addSubGraph(quotient.getName() + \" original\")
	origLayoutSgLayout = origLayoutSg.getLocalLayoutProperty(\"viewLayout\")
	finalLayoutSg = quotient.getSuperGraph().addSubGraph(quotient.getName() + \" final\")
	finalLayoutSgLayout = finalLayoutSg.getLocalLayoutProperty(\"viewLayout\")
	layoutConfigurations = []
	metaNodes = []
	nodesToRemove = []
	for n in quotient.getNodes():
		if quotient.isMetaNode(n):
			metaNodes.append(n)
			metaGraph = quotient[\"viewMetaGraph\"][n]
			metaGraph[\"viewLayout\"].center(quotient[\"viewLayout\"][n])
			
			metaSgConfs = []
			for conf in metaGraph.getSubGraphs():
				metaSgConfs.append(conf)
				conf[\"viewLayout\"].center(quotient[\"viewLayout\"][n])
			if len(metaSgConfs) > 0:	
				layoutConfigurations.append(metaSgConfs)	
			
			for ne in metaGraph.getNodes():
				nodesToRemove.append(ne)
				origLayoutSg.addNode(ne)
				finalLayoutSg.addNode(ne)
				origLayoutSgLayout[ne] = metaGraph[\"viewLayout\"][ne] 
				finalLayoutSgLayout[ne] = metaGraph[\"viewLayout\"][ne]
			for e in metaGraph.getEdges():
				origLayoutSg.addEdge(e)
				finalLayoutSg.addEdge(e)
				origLayoutSgLayout[e] = metaGraph[\"viewLayout\"][e] 
				finalLayoutSgLayout[e] = metaGraph[\"viewLayout\"][e]	
		else:
			origLayoutSg.addNode(n)
			finalLayoutSg.addNode(n)
			origLayoutSgLayout[n] = quotient[\"viewLayout\"][n] 
			finalLayoutSgLayout[n] = quotient[\"viewLayout\"][n]
			
	for e in quotient.getEdges():
		if quotient.isMetaEdge(e):
			for ee in metabolic_utils.getOriginalEdgesInMetaEdge(quotient, e):
				if origLayoutSg.isElement(quotient.getRoot().source(ee)) and origLayoutSg.isElement(quotient.getRoot().target(ee)):
					origLayoutSg.addEdge(ee)
					finalLayoutSg.addEdge(ee)
		else:
			origLayoutSg.addEdge(e)
			finalLayoutSg.addEdge(e)
			
	if len(layoutConfigurations) > 0:
			nbConfs = 1
			for confs in layoutConfigurations:
				nbConfs *= len(confs)
			print nbConfs
			if nbConfs < 50000:	
				findBestLayoutConfiguration(finalLayoutSg, layoutConfigurations)
			else:
				firstPass = []
				secondPass = []
				quotient.push(False)
				tlp.SimpleTest.makeSimple(quotient)
				for n in metaNodes:
					if quotient.deg(n) > 2 and not quotient[\"membrane\"][n]:
						firstPass.append(n)
					elif not quotient[\"membrane\"][n]:
						secondPass.append(n)	
				quotient.pop()
				fpSg = quotient.inducedSubGraph(firstPass)
				spSg = quotient.inducedSubGraph(secondPass)
				
				fpSg.setName(\"first pass\")
				spSg.setName(\"second pass\")
					
				findBestLayoutConfiguration2(finalLayoutSg, fpSg)
				findBestLayoutConfiguration2(finalLayoutSg, spSg)
				
				quotient.delSubGraph(fpSg)
				quotient.delSubGraph(spSg)	
	
	for n in quotient.getNodes():
		if quotient.isMetaNode(n):
			sel = tlp.BooleanProperty(quotient.getSuperGraph())
			metaNodeSg = quotient[\"viewMetaGraph\"][n]
			for nm in metaNodeSg.getNodes():
				metaNodeSg[\"viewLayout\"][nm] = finalLayoutSgLayout[nm]
				sel[nm] = True
			for e in metaNodeSg.getEdges():
				metaNodeSg[\"viewLayout\"][e] = finalLayoutSg[\"viewLayout\"][e]	
				sel[e] = True
				
			bbOld = tlp.computeBoundingBox(origLayoutSg, origLayoutSg[\"viewLayout\"], origLayoutSg[\"viewSize\"], origLayoutSg[\"viewRotation\"], sel)	
			bbNew = tlp.computeBoundingBox(finalLayoutSg, finalLayoutSg[\"viewLayout\"], finalLayoutSg[\"viewSize\"], finalLayoutSg[\"viewRotation\"], sel)
			
			quotient[\"viewLayout\"][n] = tlp.Coord(bbNew.center())	
			quotient[\"viewSize\"][n] = tlp.Size(bbNew.width(), bbNew.height())	
			            
		else:
			quotient[\"viewLayout\"][n] = finalLayoutSgLayout[n]
	
	forDataSet = tlp.getDefaultPluginParameters(\"Fast Overlap Removal\", quotient)
	forDataSet[\"x border\"] = 10
	forDataSet[\"y border\"] = 10
	quotient.computeLayoutProperty(\"Fast Overlap Removal\", quotient[\"viewLayout\"], forDataSet)
		
	quotient.getSuperGraph().delSubGraph(origLayoutSg)
	quotient.getSuperGraph().delSubGraph(finalLayoutSg)
")
)
(DataSet "plugins" 
(string "plugin0" "/Users/anna/Documents/PhD/tulip/src/python/plugins/ChebiColorer.py")
(string "plugin_src0" "from tulip import *
import tulipplugins
import colorsys
from model_utils import *

class ChebiColorer(tlp.Algorithm):
	def __init__(self, context):
		tlp.Algorithm.__init__(self, context)

	def check(self):
		return (True, \"Ok\")

	def run(self):
		graph = self.graph
		isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		name =  graph.getStringProperty(\"name\")
		reaction =  graph.getBooleanProperty(\"reaction\")
		multiColor =  graph.getColorVectorProperty(\"multiColor\")
		ubiquitous = graph.getBooleanProperty(\"ubiquitous\")
		
		ns = set(graph.getNodes())
		rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
		sp = ns - rs
		grey = tlp.Color(211, 211, 211)
		vo2node = {}		
		ancestor = graph.getStringProperty(\"ancestor\")
		for n in sp:
			multiColor[n] = [grey]
			viewColor[n] = grey
			if ubiquitous[n]:	continue
			key = ancestor[n]
			if key:
				if not vo2node.has_key(key): vo2node[key] = [n]
				else: vo2node[key].append(n)
						
		n = len(vo2node.keys())
		colors = [colorsys.hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
		colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
		
		for ((vo, nodes), color) in zip(vo2node.iteritems(), colors):
			for node in nodes:
				mc = multiColor[node]
				if mc == [grey]: mc = [color]
				else: mc.append(color)
				multiColor[node] = mc
				viewColor[node] = color
						
		ecNum =  graph.getStringProperty(\"ecNumber\")
		ec2node = {}
		for n in rs:
			viewColor[n] = grey
			multiColor[n] = [grey]
			ec = ecNum[n]
			if ec:
				ecs = ec.split(\",\")
				for ec in ecs:			
					if not ec2node.has_key(ec): ec2node[ec] = [n]
					else: ec2node[ec].append(n)
		
		n = len(ec2node.keys())
		colors = [colorsys.hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
		colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
		
		for ((ec, nodes), color) in zip(ec2node.iteritems(), colors):
			for node in nodes:
				mc = multiColor[node]
				if mc == [grey]: mc = [color]
				else: mc.append(color)
				multiColor[node] = mc
				viewColor[node] = color
				for e in graph.getInOutEdges(node):
					mc = multiColor[e]
					if mc == [grey]: mc = [color]
					else: mc.append(color)
					multiColor[e] = mc
					viewColor[e] = color
		return True

# The line below does the magic to register the plugin to the plugin database
# and updates the GUI to make it accessible through the menus.
tulipplugins.registerAlgorithmPluginOfGroup(\"ChebiColorer\", \"ChebiColorer\", \"anna\", \"21/02/2012\", \"\", \"1.0\", \"Metabolic\")
")
(string "plugin1" "/Users/anna/Documents/PhD/tulip/src/python/plugins/ChebiAnnotator.py")
(string "plugin_src1" "from tulip import *
import tulipplugins
from metabolic_widgets import *
import ontology
import os

class ChebiAnnotator(tlp.Algorithm):
	def __init__(self, context):
		tlp.Algorithm.__init__(self, context)
#		self.addStringParameter(\"file::Ontology file\", \"Ontology file in obo format.\", \"\")		
		self.chebi = None

	def check(self):
		dir = os.path.dirname(ontology.__file__)
		self.chebi = ontology.parse(\"{0}/chebi.obo\".format(dir))
#		self.chebi = parse(self.dataSet[\"file::Ontology file\"])		
		return (self.chebi != None, \"Could not parse an ontology file. Make sure that the path you provided exists and the format is obo.\")

	def run(self):
		chebi = self.chebi
		graph = self.graph
		name =  graph.getStringProperty(\"name\")
		id_ = graph.getStringProperty(\"id\")
		is_ =  graph.getStringVectorProperty(\"is\")
		chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
		isReaction = graph.getBooleanProperty(\"reaction\")
		no_annotation = \"DO NOT ANNOTATE\"
		name2annotation = {}
		byDefault, doNothing = False, False
		for n in graph.getNodes():
			if isReaction[n]: continue
			is_annotation = is_[n]
			found = False
			for ii in is_annotation:
				if ii and chebi.getTerm(ontology.removeMiriamPrefix(ii)):
					found = True
					break
			if not found:
				name_ = name[n]
				end = name_.find(\"[\")
				if end != -1: name_ = name_[0:end].strip()
				if name2annotation.has_key(name_): 
					is_annotation = name2annotation[name_]
				else:
					possibilities = chebi.getIdsByName(name_)
					if not possibilities: 
						end = name_.find(\"(\")
						if end != -1: name_ = name_[0:end].strip()
						possibilities = chebi.getIdsByName(name_)
						if not possibilities: continue
					if len(possibilities) > 1 and not byDefault: 
						if doNothing: continue
						# ask user what to choose
						dialog = OptionSelectionDialog(\"Choose an ontology term for {1} ({0})\".format(id_[n], name_))
						dialog.addOptions(sorted(map(lambda id: \"{0} {1}\".format(id, chebi.getTerm(id).getName()), possibilities)))
						dialog.addOption(no_annotation)
						if not dialog.exec_(): continue
						byDefault = dialog.isByDefault()
						doNothing = dialog.isDoNothing()
						result = dialog.getSelectedOption()
						if no_annotation == result: continue					
						is_annotation = result[0:result.find(\" \")]
					else: is_annotation = possibilities.pop()
					name2annotation[name_] = is_annotation
				value = list(is_[n])
				value.append(ontology.addMiriamPrefix(is_annotation))
				is_[n] = value
				vv = list(chebi_id[n])
				vv.append(is_annotation.lower())
				chebi_id[n] = vv
		return True   


tulipplugins.registerAlgorithmPluginOfGroup(\"ChebiAnnotator\", \"ChebiAnnotator\", \"anna\", \"22/02/2012\", \"\", \"1.0\", \"Metabolic\")
")
)
)
(uint "id" 65)
(int "x" 717)
(int "y" 0)
(int "width" 717)
(int "height" 1059)
(bool "maximized" false)
)
)
)
)
)
