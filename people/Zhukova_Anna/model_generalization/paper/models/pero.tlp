(tlp "2.3"
(date "04-19-2013")
(comments "This file was generated by Tulip.")
(nb_nodes 312)
;(nodes <node_id> <node_id> ...)
(nodes 0..311)
(nb_edges 310)
;(edge <edge_id> <source_id> <target_id>)
(edge 0 0 52)
(edge 1 52 43)
(edge 2 2 53)
(edge 3 53 44)
(edge 4 54 45)
(edge 5 1 54)
(edge 6 3 55)
(edge 7 55 21)
(edge 8 5 56)
(edge 9 56 46)
(edge 10 4 57)
(edge 11 57 47)
(edge 12 6 58)
(edge 13 58 0)
(edge 14 8 59)
(edge 15 59 2)
(edge 16 60 1)
(edge 17 7 60)
(edge 18 10 61)
(edge 19 61 3)
(edge 20 9 62)
(edge 21 62 5)
(edge 22 11 63)
(edge 23 63 4)
(edge 24 9 64)
(edge 25 64 38)
(edge 26 7 65)
(edge 27 65 41)
(edge 28 10 66)
(edge 29 66 28)
(edge 30 11 67)
(edge 31 6 68)
(edge 32 68 33)
(edge 33 8 69)
(edge 34 69 18)
(edge 35 18 70)
(edge 36 70 43)
(edge 37 71 44)
(edge 38 20 72)
(edge 39 72 45)
(edge 40 38 73)
(edge 41 73 21)
(edge 42 40 74)
(edge 43 74 46)
(edge 44 28 75)
(edge 45 75 47)
(edge 46 76 42)
(edge 47 77 21)
(edge 48 78 21)
(edge 49 79 34)
(edge 50 80 34)
(edge 51 31 81)
(edge 52 31 82)
(edge 53 31 83)
(edge 54 84 42)
(edge 55 33 85)
(edge 56 41 86)
(edge 57 86 40)
(edge 58 17 87)
(edge 59 87 18)
(edge 60 23 88)
(edge 61 36 89)
(edge 62 89 38)
(edge 63 37 90)
(edge 64 90 21)
(edge 65 25 91)
(edge 66 91 41)
(edge 67 15 92)
(edge 68 92 20)
(edge 69 32 93)
(edge 70 93 33)
(edge 71 26 94)
(edge 72 94 28)
(edge 73 27 95)
(edge 74 95 42)
(edge 75 96 18)
(edge 76 17 96)
(edge 77 97 24)
(edge 78 23 97)
(edge 79 98 41)
(edge 80 25 98)
(edge 81 99 38)
(edge 82 36 99)
(edge 83 100 28)
(edge 84 26 100)
(edge 85 40 101)
(edge 86 101 39)
(edge 87 102 33)
(edge 88 32 102)
(edge 89 50 103)
(edge 90 14 103)
(edge 91 103 51)
(edge 92 103 13)
(edge 93 103 19)
(edge 94 16 104)
(edge 95 29 104)
(edge 96 51 104)
(edge 97 35 104)
(edge 98 49 104)
(edge 99 104 12)
(edge 100 104 48)
(edge 101 104 22)
(edge 102 104 30)
(edge 103 64 105)
(edge 104 65 106)
(edge 105 66 107)
(edge 106 67 108)
(edge 107 68 109)
(edge 108 69 110)
(edge 109 111 76)
(edge 110 112 77)
(edge 111 113 78)
(edge 112 114 79)
(edge 113 115 80)
(edge 114 81 116)
(edge 115 82 117)
(edge 116 83 118)
(edge 117 119 84)
(edge 118 85 120)
(edge 119 86 121)
(edge 120 87 122)
(edge 121 88 123)
(edge 122 89 124)
(edge 123 90 125)
(edge 124 91 126)
(edge 125 92 127)
(edge 126 93 128)
(edge 127 94 129)
(edge 128 95 130)
(edge 129 131 87)
(edge 130 132 88)
(edge 131 133 89)
(edge 132 134 90)
(edge 133 135 91)
(edge 134 136 92)
(edge 135 137 93)
(edge 136 138 94)
(edge 137 139 95)
(edge 138 140 64)
(edge 139 141 65)
(edge 140 142 66)
(edge 141 143 67)
(edge 142 144 68)
(edge 143 145 69)
(edge 144 76 146)
(edge 145 77 147)
(edge 146 78 148)
(edge 147 79 149)
(edge 148 80 150)
(edge 149 151 81)
(edge 150 152 82)
(edge 151 153 83)
(edge 152 84 154)
(edge 153 155 85)
(edge 154 156 86)
(edge 155 157 87)
(edge 156 158 88)
(edge 157 159 89)
(edge 158 160 90)
(edge 159 161 91)
(edge 160 162 92)
(edge 161 163 93)
(edge 162 164 94)
(edge 163 165 95)
(edge 164 166 96)
(edge 165 167 97)
(edge 166 168 98)
(edge 167 169 99)
(edge 168 170 100)
(edge 169 101 171)
(edge 170 172 102)
(edge 171 173 103)
(edge 172 87 174)
(edge 173 88 175)
(edge 174 89 176)
(edge 175 90 177)
(edge 176 91 178)
(edge 177 92 179)
(edge 178 93 180)
(edge 179 94 181)
(edge 180 95 182)
(edge 181 70 183)
(edge 182 71 184)
(edge 183 72 185)
(edge 184 73 186)
(edge 185 74 187)
(edge 186 75 188)
(edge 187 189 76)
(edge 188 190 77)
(edge 189 191 78)
(edge 190 192 79)
(edge 191 193 80)
(edge 192 81 194)
(edge 193 82 195)
(edge 194 83 196)
(edge 195 197 84)
(edge 196 85 198)
(edge 197 86 199)
(edge 198 67 200)
(edge 199 201 71)
(edge 200 88 202)
(edge 201 58 203)
(edge 202 59 204)
(edge 203 60 205)
(edge 204 61 206)
(edge 205 62 207)
(edge 206 63 208)
(edge 207 76 209)
(edge 208 77 210)
(edge 209 78 211)
(edge 210 79 212)
(edge 211 80 213)
(edge 212 214 81)
(edge 213 215 82)
(edge 214 216 83)
(edge 215 84 217)
(edge 216 218 85)
(edge 217 219 86)
(edge 218 220 58)
(edge 219 221 59)
(edge 220 222 60)
(edge 221 223 61)
(edge 222 224 62)
(edge 223 225 63)
(edge 224 226 76)
(edge 225 227 77)
(edge 226 228 78)
(edge 227 229 79)
(edge 228 230 80)
(edge 229 81 231)
(edge 230 82 232)
(edge 231 83 233)
(edge 232 234 84)
(edge 233 85 235)
(edge 234 86 236)
(edge 235 237 77)
(edge 236 238 79)
(edge 237 81 239)
(edge 238 82 240)
(edge 239 241 84)
(edge 240 77 242)
(edge 241 79 243)
(edge 242 244 81)
(edge 243 245 82)
(edge 244 84 246)
(edge 245 247 70)
(edge 246 248 71)
(edge 247 249 72)
(edge 248 250 73)
(edge 249 251 74)
(edge 250 252 75)
(edge 251 76 253)
(edge 252 77 254)
(edge 253 78 255)
(edge 254 79 256)
(edge 255 80 257)
(edge 256 258 81)
(edge 257 259 82)
(edge 258 260 83)
(edge 259 84 261)
(edge 260 262 85)
(edge 261 263 86)
(edge 262 264 58)
(edge 263 265 59)
(edge 264 266 60)
(edge 265 267 61)
(edge 266 268 62)
(edge 267 269 63)
(edge 268 270 76)
(edge 269 271 77)
(edge 270 272 78)
(edge 271 273 79)
(edge 272 274 80)
(edge 273 81 275)
(edge 274 82 276)
(edge 275 83 277)
(edge 276 278 84)
(edge 277 85 279)
(edge 278 86 280)
(edge 279 281 96)
(edge 280 282 97)
(edge 281 283 98)
(edge 282 284 99)
(edge 283 285 100)
(edge 284 101 286)
(edge 285 287 102)
(edge 286 52 288)
(edge 287 53 289)
(edge 288 54 290)
(edge 289 55 291)
(edge 290 56 292)
(edge 291 57 293)
(edge 292 76 294)
(edge 293 77 295)
(edge 294 78 296)
(edge 295 79 297)
(edge 296 80 298)
(edge 297 299 81)
(edge 298 300 82)
(edge 299 301 83)
(edge 300 84 302)
(edge 301 303 85)
(edge 302 304 86)
(edge 303 96 305)
(edge 304 97 306)
(edge 305 98 307)
(edge 306 99 308)
(edge 307 100 309)
(edge 308 310 101)
(edge 309 102 311)
(property  0 bool "boundaryCondition"
(default "false" "false")
(node 48 "true")
(node 49 "true")
(node 264 "true")
(node 265 "true")
(node 266 "true")
(node 267 "true")
(node 268 "true")
(node 269 "true")
(node 270 "true")
(node 271 "true")
(node 272 "true")
(node 273 "true")
(node 274 "true")
(node 275 "true")
(node 276 "true")
(node 277 "true")
(node 278 "true")
(node 279 "true")
(node 280 "true")
(node 281 "true")
(node 282 "true")
(node 283 "true")
(node 284 "true")
(node 285 "true")
(node 286 "true")
(node 287 "true")
(node 288 "true")
(node 289 "true")
(node 290 "true")
(node 291 "true")
(node 292 "true")
(node 293 "true")
(node 294 "true")
(node 295 "true")
(node 296 "true")
(node 297 "true")
(node 298 "true")
(node 299 "true")
(node 300 "true")
(node 301 "true")
(node 302 "true")
(node 303 "true")
(node 304 "true")
(node 305 "true")
(node 306 "true")
(node 307 "true")
(node 308 "true")
(node 309 "true")
(node 310 "true")
(node 311 "true")
)
(property  0 int "charge"
(default "0" "0")
)
(property  0 vector<string> "chebi_id"
(default "()" "()")
(node 0 "(\"chebi:28325\")")
(node 1 "(\"chebi:52976\")")
(node 2 "(\"chebi:62558\")")
(node 3 "(\"chebi:27402\")")
(node 4 "(\"chebi:62614\")")
(node 5 "(\"chebi:50583\")")
(node 6 "(\"chebi:28528\")")
(node 7 "(\"chebi:52977\")")
(node 8 "(\"chebi:62615\")")
(node 9 "(\"chebi:50571\")")
(node 10 "(\"chebi:15491\")")
(node 11 "(\"chebi:28726\")")
(node 12 "(\"chebi:15351\")")
(node 13 "(\"chebi:456215\")")
(node 14 "(\"chebi:30616\")")
(node 15 "(\"chebi:31013\")")
(node 16 "(\"chebi:15346\")")
(node 17 "(\"chebi:27689\")")
(node 18 "(\"chebi:61430\")")
(node 19 "(\"chebi:18361\")")
(node 20 "(\"chebi:52966\")")
(node 21 "(\"chebi:52381\")")
(node 22 "(\"chebi:16240\")")
(node 23 "(\"chebi:18262\")")
(node 24 "(\"chebi:15521\")")
(node 25 "(\"chebi:28866\")")
(node 26 "(\"chebi:30807\")")
(node 27 "(\"chebi:32370\")")
(node 28 "(\"chebi:15532\")")
(node 29 "(\"chebi:15846\")")
(node 30 "(\"chebi:16908\")")
(node 31 "(\"chebi:53151\")")
(node 32 "(\"chebi:25646\")")
(node 33 "(\"chebi:15533\")")
(node 34 "(\"chebi:15534\")")
(node 35 "(\"chebi:15379\")")
(node 36 "(\"chebi:7896\")")
(node 37 "(\"chebi:32372\")")
(node 38 "(\"chebi:57379\")")
(node 39 "(\"chebi:25629\")")
(node 40 "(\"chebi:15541\")")
(node 41 "(\"chebi:52974\")")
(node 42 "(\"chebi:26900\")")
(node 43 "(\"chebi:61406\")")
(node 44 "(\"chebi:15471\")")
(node 45 "(\"chebi:52975\")")
(node 46 "(\"chebi:50570\")")
(node 47 "(\"chebi:61405\")")
(node 48 "(\"chebi:15378\")")
(node 49 "(\"chebi:29375\")")
(node 50 "(\"chebi:17968\")")
(node 51 "(\"chebi:15517\")")
(node 105 "(\"chebi:15351\")")
(node 106 "(\"chebi:15351\")")
(node 107 "(\"chebi:15351\")")
(node 108 "(\"chebi:15351\")")
(node 109 "(\"chebi:15351\")")
(node 110 "(\"chebi:15351\")")
(node 111 "(\"chebi:15351\")")
(node 112 "(\"chebi:15351\")")
(node 113 "(\"chebi:15351\")")
(node 114 "(\"chebi:15351\")")
(node 115 "(\"chebi:15351\")")
(node 116 "(\"chebi:15351\")")
(node 117 "(\"chebi:15351\")")
(node 118 "(\"chebi:15351\")")
(node 119 "(\"chebi:15351\")")
(node 120 "(\"chebi:15351\")")
(node 121 "(\"chebi:15351\")")
(node 122 "(\"chebi:456215\")")
(node 123 "(\"chebi:456215\")")
(node 124 "(\"chebi:456215\")")
(node 125 "(\"chebi:456215\")")
(node 126 "(\"chebi:456215\")")
(node 127 "(\"chebi:456215\")")
(node 128 "(\"chebi:456215\")")
(node 129 "(\"chebi:456215\")")
(node 130 "(\"chebi:456215\")")
(node 131 "(\"chebi:30616\")")
(node 132 "(\"chebi:30616\")")
(node 133 "(\"chebi:30616\")")
(node 134 "(\"chebi:30616\")")
(node 135 "(\"chebi:30616\")")
(node 136 "(\"chebi:30616\")")
(node 137 "(\"chebi:30616\")")
(node 138 "(\"chebi:30616\")")
(node 139 "(\"chebi:30616\")")
(node 140 "(\"chebi:15346\")")
(node 141 "(\"chebi:15346\")")
(node 142 "(\"chebi:15346\")")
(node 143 "(\"chebi:15346\")")
(node 144 "(\"chebi:15346\")")
(node 145 "(\"chebi:15346\")")
(node 146 "(\"chebi:15346\")")
(node 147 "(\"chebi:15346\")")
(node 148 "(\"chebi:15346\")")
(node 149 "(\"chebi:15346\")")
(node 150 "(\"chebi:15346\")")
(node 151 "(\"chebi:15346\")")
(node 152 "(\"chebi:15346\")")
(node 153 "(\"chebi:15346\")")
(node 154 "(\"chebi:15346\")")
(node 155 "(\"chebi:15346\")")
(node 156 "(\"chebi:15346\")")
(node 157 "(\"chebi:15346\")")
(node 158 "(\"chebi:15346\")")
(node 159 "(\"chebi:15346\")")
(node 160 "(\"chebi:15346\")")
(node 161 "(\"chebi:15346\")")
(node 162 "(\"chebi:15346\")")
(node 163 "(\"chebi:15346\")")
(node 164 "(\"chebi:15346\")")
(node 165 "(\"chebi:15346\")")
(node 166 "(\"chebi:15346\")")
(node 167 "(\"chebi:15346\")")
(node 168 "(\"chebi:15346\")")
(node 169 "(\"chebi:15346\")")
(node 170 "(\"chebi:15346\")")
(node 171 "(\"chebi:15346\")")
(node 172 "(\"chebi:15346\")")
(node 173 "(\"chebi:15346\")")
(node 174 "(\"chebi:18361\")")
(node 175 "(\"chebi:18361\")")
(node 176 "(\"chebi:18361\")")
(node 177 "(\"chebi:18361\")")
(node 178 "(\"chebi:18361\")")
(node 179 "(\"chebi:18361\")")
(node 180 "(\"chebi:18361\")")
(node 181 "(\"chebi:18361\")")
(node 182 "(\"chebi:18361\")")
(node 183 "(\"chebi:16240\")")
(node 184 "(\"chebi:16240\")")
(node 185 "(\"chebi:16240\")")
(node 186 "(\"chebi:16240\")")
(node 187 "(\"chebi:16240\")")
(node 188 "(\"chebi:16240\")")
(node 189 "(\"chebi:16240\")")
(node 190 "(\"chebi:16240\")")
(node 191 "(\"chebi:16240\")")
(node 192 "(\"chebi:16240\")")
(node 193 "(\"chebi:16240\")")
(node 194 "(\"chebi:16240\")")
(node 195 "(\"chebi:16240\")")
(node 196 "(\"chebi:16240\")")
(node 197 "(\"chebi:16240\")")
(node 198 "(\"chebi:16240\")")
(node 199 "(\"chebi:16240\")")
(node 200 "(\"chebi:15521\")")
(node 201 "(\"chebi:15521\")")
(node 202 "(\"chebi:15521\")")
(node 203 "(\"chebi:15846\")")
(node 204 "(\"chebi:15846\")")
(node 205 "(\"chebi:15846\")")
(node 206 "(\"chebi:15846\")")
(node 207 "(\"chebi:15846\")")
(node 208 "(\"chebi:15846\")")
(node 209 "(\"chebi:15846\")")
(node 210 "(\"chebi:15846\")")
(node 211 "(\"chebi:15846\")")
(node 212 "(\"chebi:15846\")")
(node 213 "(\"chebi:15846\")")
(node 214 "(\"chebi:15846\")")
(node 215 "(\"chebi:15846\")")
(node 216 "(\"chebi:15846\")")
(node 217 "(\"chebi:15846\")")
(node 218 "(\"chebi:15846\")")
(node 219 "(\"chebi:15846\")")
(node 220 "(\"chebi:16908\")")
(node 221 "(\"chebi:16908\")")
(node 222 "(\"chebi:16908\")")
(node 223 "(\"chebi:16908\")")
(node 224 "(\"chebi:16908\")")
(node 225 "(\"chebi:16908\")")
(node 226 "(\"chebi:16908\")")
(node 227 "(\"chebi:16908\")")
(node 228 "(\"chebi:16908\")")
(node 229 "(\"chebi:16908\")")
(node 230 "(\"chebi:16908\")")
(node 231 "(\"chebi:16908\")")
(node 232 "(\"chebi:16908\")")
(node 233 "(\"chebi:16908\")")
(node 234 "(\"chebi:16908\")")
(node 235 "(\"chebi:16908\")")
(node 236 "(\"chebi:16908\")")
(node 237 "(\"chebi:18009\")")
(node 238 "(\"chebi:18009\")")
(node 239 "(\"chebi:18009\")")
(node 240 "(\"chebi:18009\")")
(node 241 "(\"chebi:18009\")")
(node 242 "(\"chebi:57783\")")
(node 243 "(\"chebi:57783\")")
(node 244 "(\"chebi:57783\")")
(node 245 "(\"chebi:57783\")")
(node 246 "(\"chebi:57783\")")
(node 247 "(\"chebi:15379\")")
(node 248 "(\"chebi:15379\")")
(node 249 "(\"chebi:15379\")")
(node 250 "(\"chebi:15379\")")
(node 251 "(\"chebi:15379\")")
(node 252 "(\"chebi:15379\")")
(node 253 "(\"chebi:15379\")")
(node 254 "(\"chebi:15379\")")
(node 255 "(\"chebi:15379\")")
(node 256 "(\"chebi:15379\")")
(node 257 "(\"chebi:15379\")")
(node 258 "(\"chebi:15379\")")
(node 259 "(\"chebi:15379\")")
(node 260 "(\"chebi:15379\")")
(node 261 "(\"chebi:15379\")")
(node 262 "(\"chebi:15379\")")
(node 263 "(\"chebi:15379\")")
(node 264 "(\"chebi:15378\")")
(node 265 "(\"chebi:15378\")")
(node 266 "(\"chebi:15378\")")
(node 267 "(\"chebi:15378\")")
(node 268 "(\"chebi:15378\")")
(node 269 "(\"chebi:15378\")")
(node 270 "(\"chebi:15378\")")
(node 271 "(\"chebi:15378\")")
(node 272 "(\"chebi:15378\")")
(node 273 "(\"chebi:15378\")")
(node 274 "(\"chebi:15378\")")
(node 275 "(\"chebi:15378\")")
(node 276 "(\"chebi:15378\")")
(node 277 "(\"chebi:15378\")")
(node 278 "(\"chebi:15378\")")
(node 279 "(\"chebi:15378\")")
(node 280 "(\"chebi:15378\")")
(node 281 "(\"chebi:15378\")")
(node 282 "(\"chebi:15378\")")
(node 283 "(\"chebi:15378\")")
(node 284 "(\"chebi:15378\")")
(node 285 "(\"chebi:15378\")")
(node 286 "(\"chebi:15378\")")
(node 287 "(\"chebi:15378\")")
(node 288 "(\"chebi:29375\")")
(node 289 "(\"chebi:29375\")")
(node 290 "(\"chebi:29375\")")
(node 291 "(\"chebi:29375\")")
(node 292 "(\"chebi:29375\")")
(node 293 "(\"chebi:29375\")")
(node 294 "(\"chebi:29375\")")
(node 295 "(\"chebi:29375\")")
(node 296 "(\"chebi:29375\")")
(node 297 "(\"chebi:29375\")")
(node 298 "(\"chebi:29375\")")
(node 299 "(\"chebi:29375\")")
(node 300 "(\"chebi:29375\")")
(node 301 "(\"chebi:29375\")")
(node 302 "(\"chebi:29375\")")
(node 303 "(\"chebi:29375\")")
(node 304 "(\"chebi:29375\")")
(node 305 "(\"chebi:29375\")")
(node 306 "(\"chebi:29375\")")
(node 307 "(\"chebi:29375\")")
(node 308 "(\"chebi:29375\")")
(node 309 "(\"chebi:29375\")")
(node 310 "(\"chebi:29375\")")
(node 311 "(\"chebi:29375\")")
)
(property  0 string "class"
(default "" "")
(node 0 "simple chemical")
(node 1 "simple chemical")
(node 2 "simple chemical")
(node 3 "simple chemical")
(node 4 "simple chemical")
(node 5 "simple chemical")
(node 6 "simple chemical")
(node 7 "simple chemical")
(node 8 "simple chemical")
(node 9 "simple chemical")
(node 10 "simple chemical")
(node 11 "simple chemical")
(node 12 "simple chemical")
(node 13 "simple chemical")
(node 14 "simple chemical")
(node 15 "simple chemical")
(node 16 "simple chemical")
(node 17 "simple chemical")
(node 18 "simple chemical")
(node 19 "simple chemical")
(node 20 "simple chemical")
(node 21 "simple chemical")
(node 22 "simple chemical")
(node 23 "simple chemical")
(node 24 "simple chemical")
(node 25 "simple chemical")
(node 26 "simple chemical")
(node 27 "simple chemical")
(node 28 "simple chemical")
(node 29 "simple chemical")
(node 30 "simple chemical")
(node 31 "simple chemical")
(node 32 "simple chemical")
(node 33 "simple chemical")
(node 34 "simple chemical")
(node 35 "simple chemical")
(node 36 "simple chemical")
(node 37 "simple chemical")
(node 38 "simple chemical")
(node 39 "simple chemical")
(node 40 "simple chemical")
(node 41 "simple chemical")
(node 42 "simple chemical")
(node 43 "simple chemical")
(node 44 "simple chemical")
(node 45 "simple chemical")
(node 46 "simple chemical")
(node 47 "simple chemical")
(node 48 "simple chemical")
(node 49 "simple chemical")
(node 50 "simple chemical")
(node 51 "simple chemical")
(node 52 "process")
(node 53 "process")
(node 54 "process")
(node 55 "process")
(node 56 "process")
(node 57 "process")
(node 58 "process")
(node 59 "process")
(node 60 "process")
(node 61 "process")
(node 62 "process")
(node 63 "process")
(node 64 "process")
(node 65 "process")
(node 66 "process")
(node 67 "process")
(node 68 "process")
(node 69 "process")
(node 70 "process")
(node 71 "process")
(node 72 "process")
(node 73 "process")
(node 74 "process")
(node 75 "process")
(node 76 "process")
(node 77 "process")
(node 78 "process")
(node 79 "process")
(node 80 "process")
(node 81 "process")
(node 82 "process")
(node 83 "process")
(node 84 "process")
(node 85 "process")
(node 86 "process")
(node 87 "process")
(node 88 "process")
(node 89 "process")
(node 90 "process")
(node 91 "process")
(node 92 "process")
(node 93 "process")
(node 94 "process")
(node 95 "process")
(node 96 "process")
(node 97 "process")
(node 98 "process")
(node 99 "process")
(node 100 "process")
(node 101 "process")
(node 102 "process")
(node 103 "process")
(node 104 "process")
(node 105 "simple chemical")
(node 106 "simple chemical")
(node 107 "simple chemical")
(node 108 "simple chemical")
(node 109 "simple chemical")
(node 110 "simple chemical")
(node 111 "simple chemical")
(node 112 "simple chemical")
(node 113 "simple chemical")
(node 114 "simple chemical")
(node 115 "simple chemical")
(node 116 "simple chemical")
(node 117 "simple chemical")
(node 118 "simple chemical")
(node 119 "simple chemical")
(node 120 "simple chemical")
(node 121 "simple chemical")
(node 122 "simple chemical")
(node 123 "simple chemical")
(node 124 "simple chemical")
(node 125 "simple chemical")
(node 126 "simple chemical")
(node 127 "simple chemical")
(node 128 "simple chemical")
(node 129 "simple chemical")
(node 130 "simple chemical")
(node 131 "simple chemical")
(node 132 "simple chemical")
(node 133 "simple chemical")
(node 134 "simple chemical")
(node 135 "simple chemical")
(node 136 "simple chemical")
(node 137 "simple chemical")
(node 138 "simple chemical")
(node 139 "simple chemical")
(node 140 "simple chemical")
(node 141 "simple chemical")
(node 142 "simple chemical")
(node 143 "simple chemical")
(node 144 "simple chemical")
(node 145 "simple chemical")
(node 146 "simple chemical")
(node 147 "simple chemical")
(node 148 "simple chemical")
(node 149 "simple chemical")
(node 150 "simple chemical")
(node 151 "simple chemical")
(node 152 "simple chemical")
(node 153 "simple chemical")
(node 154 "simple chemical")
(node 155 "simple chemical")
(node 156 "simple chemical")
(node 157 "simple chemical")
(node 158 "simple chemical")
(node 159 "simple chemical")
(node 160 "simple chemical")
(node 161 "simple chemical")
(node 162 "simple chemical")
(node 163 "simple chemical")
(node 164 "simple chemical")
(node 165 "simple chemical")
(node 166 "simple chemical")
(node 167 "simple chemical")
(node 168 "simple chemical")
(node 169 "simple chemical")
(node 170 "simple chemical")
(node 171 "simple chemical")
(node 172 "simple chemical")
(node 173 "simple chemical")
(node 174 "simple chemical")
(node 175 "simple chemical")
(node 176 "simple chemical")
(node 177 "simple chemical")
(node 178 "simple chemical")
(node 179 "simple chemical")
(node 180 "simple chemical")
(node 181 "simple chemical")
(node 182 "simple chemical")
(node 183 "simple chemical")
(node 184 "simple chemical")
(node 185 "simple chemical")
(node 186 "simple chemical")
(node 187 "simple chemical")
(node 188 "simple chemical")
(node 189 "simple chemical")
(node 190 "simple chemical")
(node 191 "simple chemical")
(node 192 "simple chemical")
(node 193 "simple chemical")
(node 194 "simple chemical")
(node 195 "simple chemical")
(node 196 "simple chemical")
(node 197 "simple chemical")
(node 198 "simple chemical")
(node 199 "simple chemical")
(node 200 "simple chemical")
(node 201 "simple chemical")
(node 202 "simple chemical")
(node 203 "simple chemical")
(node 204 "simple chemical")
(node 205 "simple chemical")
(node 206 "simple chemical")
(node 207 "simple chemical")
(node 208 "simple chemical")
(node 209 "simple chemical")
(node 210 "simple chemical")
(node 211 "simple chemical")
(node 212 "simple chemical")
(node 213 "simple chemical")
(node 214 "simple chemical")
(node 215 "simple chemical")
(node 216 "simple chemical")
(node 217 "simple chemical")
(node 218 "simple chemical")
(node 219 "simple chemical")
(node 220 "simple chemical")
(node 221 "simple chemical")
(node 222 "simple chemical")
(node 223 "simple chemical")
(node 224 "simple chemical")
(node 225 "simple chemical")
(node 226 "simple chemical")
(node 227 "simple chemical")
(node 228 "simple chemical")
(node 229 "simple chemical")
(node 230 "simple chemical")
(node 231 "simple chemical")
(node 232 "simple chemical")
(node 233 "simple chemical")
(node 234 "simple chemical")
(node 235 "simple chemical")
(node 236 "simple chemical")
(node 237 "simple chemical")
(node 238 "simple chemical")
(node 239 "simple chemical")
(node 240 "simple chemical")
(node 241 "simple chemical")
(node 242 "simple chemical")
(node 243 "simple chemical")
(node 244 "simple chemical")
(node 245 "simple chemical")
(node 246 "simple chemical")
(node 247 "simple chemical")
(node 248 "simple chemical")
(node 249 "simple chemical")
(node 250 "simple chemical")
(node 251 "simple chemical")
(node 252 "simple chemical")
(node 253 "simple chemical")
(node 254 "simple chemical")
(node 255 "simple chemical")
(node 256 "simple chemical")
(node 257 "simple chemical")
(node 258 "simple chemical")
(node 259 "simple chemical")
(node 260 "simple chemical")
(node 261 "simple chemical")
(node 262 "simple chemical")
(node 263 "simple chemical")
(node 264 "simple chemical")
(node 265 "simple chemical")
(node 266 "simple chemical")
(node 267 "simple chemical")
(node 268 "simple chemical")
(node 269 "simple chemical")
(node 270 "simple chemical")
(node 271 "simple chemical")
(node 272 "simple chemical")
(node 273 "simple chemical")
(node 274 "simple chemical")
(node 275 "simple chemical")
(node 276 "simple chemical")
(node 277 "simple chemical")
(node 278 "simple chemical")
(node 279 "simple chemical")
(node 280 "simple chemical")
(node 281 "simple chemical")
(node 282 "simple chemical")
(node 283 "simple chemical")
(node 284 "simple chemical")
(node 285 "simple chemical")
(node 286 "simple chemical")
(node 287 "simple chemical")
(node 288 "simple chemical")
(node 289 "simple chemical")
(node 290 "simple chemical")
(node 291 "simple chemical")
(node 292 "simple chemical")
(node 293 "simple chemical")
(node 294 "simple chemical")
(node 295 "simple chemical")
(node 296 "simple chemical")
(node 297 "simple chemical")
(node 298 "simple chemical")
(node 299 "simple chemical")
(node 300 "simple chemical")
(node 301 "simple chemical")
(node 302 "simple chemical")
(node 303 "simple chemical")
(node 304 "simple chemical")
(node 305 "simple chemical")
(node 306 "simple chemical")
(node 307 "simple chemical")
(node 308 "simple chemical")
(node 309 "simple chemical")
(node 310 "simple chemical")
(node 311 "simple chemical")
)
(property  0 bool "clone"
(default "false" "false")
(node 12 "true")
(node 13 "true")
(node 14 "true")
(node 16 "true")
(node 19 "true")
(node 22 "true")
(node 24 "true")
(node 29 "true")
(node 30 "true")
(node 35 "true")
(node 48 "true")
(node 49 "true")
(node 105 "true")
(node 106 "true")
(node 107 "true")
(node 108 "true")
(node 109 "true")
(node 110 "true")
(node 111 "true")
(node 112 "true")
(node 113 "true")
(node 114 "true")
(node 115 "true")
(node 116 "true")
(node 117 "true")
(node 118 "true")
(node 119 "true")
(node 120 "true")
(node 121 "true")
(node 122 "true")
(node 123 "true")
(node 124 "true")
(node 125 "true")
(node 126 "true")
(node 127 "true")
(node 128 "true")
(node 129 "true")
(node 130 "true")
(node 131 "true")
(node 132 "true")
(node 133 "true")
(node 134 "true")
(node 135 "true")
(node 136 "true")
(node 137 "true")
(node 138 "true")
(node 139 "true")
(node 140 "true")
(node 141 "true")
(node 142 "true")
(node 143 "true")
(node 144 "true")
(node 145 "true")
(node 146 "true")
(node 147 "true")
(node 148 "true")
(node 149 "true")
(node 150 "true")
(node 151 "true")
(node 152 "true")
(node 153 "true")
(node 154 "true")
(node 155 "true")
(node 156 "true")
(node 157 "true")
(node 158 "true")
(node 159 "true")
(node 160 "true")
(node 161 "true")
(node 162 "true")
(node 163 "true")
(node 164 "true")
(node 165 "true")
(node 166 "true")
(node 167 "true")
(node 168 "true")
(node 169 "true")
(node 170 "true")
(node 171 "true")
(node 172 "true")
(node 173 "true")
(node 174 "true")
(node 175 "true")
(node 176 "true")
(node 177 "true")
(node 178 "true")
(node 179 "true")
(node 180 "true")
(node 181 "true")
(node 182 "true")
(node 183 "true")
(node 184 "true")
(node 185 "true")
(node 186 "true")
(node 187 "true")
(node 188 "true")
(node 189 "true")
(node 190 "true")
(node 191 "true")
(node 192 "true")
(node 193 "true")
(node 194 "true")
(node 195 "true")
(node 196 "true")
(node 197 "true")
(node 198 "true")
(node 199 "true")
(node 200 "true")
(node 201 "true")
(node 202 "true")
(node 203 "true")
(node 204 "true")
(node 205 "true")
(node 206 "true")
(node 207 "true")
(node 208 "true")
(node 209 "true")
(node 210 "true")
(node 211 "true")
(node 212 "true")
(node 213 "true")
(node 214 "true")
(node 215 "true")
(node 216 "true")
(node 217 "true")
(node 218 "true")
(node 219 "true")
(node 220 "true")
(node 221 "true")
(node 222 "true")
(node 223 "true")
(node 224 "true")
(node 225 "true")
(node 226 "true")
(node 227 "true")
(node 228 "true")
(node 229 "true")
(node 230 "true")
(node 231 "true")
(node 232 "true")
(node 233 "true")
(node 234 "true")
(node 235 "true")
(node 236 "true")
(node 237 "true")
(node 238 "true")
(node 239 "true")
(node 240 "true")
(node 241 "true")
(node 242 "true")
(node 243 "true")
(node 244 "true")
(node 245 "true")
(node 246 "true")
(node 247 "true")
(node 248 "true")
(node 249 "true")
(node 250 "true")
(node 251 "true")
(node 252 "true")
(node 253 "true")
(node 254 "true")
(node 255 "true")
(node 256 "true")
(node 257 "true")
(node 258 "true")
(node 259 "true")
(node 260 "true")
(node 261 "true")
(node 262 "true")
(node 263 "true")
(node 264 "true")
(node 265 "true")
(node 266 "true")
(node 267 "true")
(node 268 "true")
(node 269 "true")
(node 270 "true")
(node 271 "true")
(node 272 "true")
(node 273 "true")
(node 274 "true")
(node 275 "true")
(node 276 "true")
(node 277 "true")
(node 278 "true")
(node 279 "true")
(node 280 "true")
(node 281 "true")
(node 282 "true")
(node 283 "true")
(node 284 "true")
(node 285 "true")
(node 286 "true")
(node 287 "true")
(node 288 "true")
(node 289 "true")
(node 290 "true")
(node 291 "true")
(node 292 "true")
(node 293 "true")
(node 294 "true")
(node 295 "true")
(node 296 "true")
(node 297 "true")
(node 298 "true")
(node 299 "true")
(node 300 "true")
(node 301 "true")
(node 302 "true")
(node 303 "true")
(node 304 "true")
(node 305 "true")
(node 306 "true")
(node 307 "true")
(node 308 "true")
(node 309 "true")
(node 310 "true")
(node 311 "true")
)
(property  0 string "compartment"
(default "" "")
(node 0 "peroxisome")
(node 1 "peroxisome")
(node 2 "peroxisome")
(node 3 "peroxisome")
(node 4 "peroxisome")
(node 5 "peroxisome")
(node 6 "peroxisome")
(node 7 "peroxisome")
(node 8 "peroxisome")
(node 9 "peroxisome")
(node 10 "peroxisome")
(node 11 "peroxisome")
(node 12 "peroxisome")
(node 13 "peroxisome")
(node 14 "peroxisome")
(node 15 "peroxisome")
(node 16 "peroxisome")
(node 17 "peroxisome")
(node 18 "peroxisome")
(node 19 "peroxisome")
(node 20 "peroxisome")
(node 21 "peroxisome")
(node 22 "peroxisome")
(node 23 "peroxisome")
(node 24 "peroxisome")
(node 25 "peroxisome")
(node 26 "peroxisome")
(node 27 "peroxisome")
(node 28 "peroxisome")
(node 29 "peroxisome")
(node 30 "peroxisome")
(node 31 "peroxisome")
(node 32 "peroxisome")
(node 33 "peroxisome")
(node 34 "peroxisome")
(node 35 "peroxisome")
(node 36 "peroxisome")
(node 37 "peroxisome")
(node 38 "peroxisome")
(node 39 "peroxisome")
(node 40 "peroxisome")
(node 41 "peroxisome")
(node 42 "peroxisome")
(node 43 "peroxisome")
(node 44 "peroxisome")
(node 45 "peroxisome")
(node 46 "peroxisome")
(node 47 "peroxisome")
(node 48 "peroxisome")
(node 49 "peroxisome")
(node 50 "peroxisome")
(node 51 "peroxisome")
(node 105 "peroxisome")
(node 106 "peroxisome")
(node 107 "peroxisome")
(node 108 "peroxisome")
(node 109 "peroxisome")
(node 110 "peroxisome")
(node 111 "peroxisome")
(node 112 "peroxisome")
(node 113 "peroxisome")
(node 114 "peroxisome")
(node 115 "peroxisome")
(node 116 "peroxisome")
(node 117 "peroxisome")
(node 118 "peroxisome")
(node 119 "peroxisome")
(node 120 "peroxisome")
(node 121 "peroxisome")
(node 122 "peroxisome")
(node 123 "peroxisome")
(node 124 "peroxisome")
(node 125 "peroxisome")
(node 126 "peroxisome")
(node 127 "peroxisome")
(node 128 "peroxisome")
(node 129 "peroxisome")
(node 130 "peroxisome")
(node 131 "peroxisome")
(node 132 "peroxisome")
(node 133 "peroxisome")
(node 134 "peroxisome")
(node 135 "peroxisome")
(node 136 "peroxisome")
(node 137 "peroxisome")
(node 138 "peroxisome")
(node 139 "peroxisome")
(node 140 "peroxisome")
(node 141 "peroxisome")
(node 142 "peroxisome")
(node 143 "peroxisome")
(node 144 "peroxisome")
(node 145 "peroxisome")
(node 146 "peroxisome")
(node 147 "peroxisome")
(node 148 "peroxisome")
(node 149 "peroxisome")
(node 150 "peroxisome")
(node 151 "peroxisome")
(node 152 "peroxisome")
(node 153 "peroxisome")
(node 154 "peroxisome")
(node 155 "peroxisome")
(node 156 "peroxisome")
(node 157 "peroxisome")
(node 158 "peroxisome")
(node 159 "peroxisome")
(node 160 "peroxisome")
(node 161 "peroxisome")
(node 162 "peroxisome")
(node 163 "peroxisome")
(node 164 "peroxisome")
(node 165 "peroxisome")
(node 166 "peroxisome")
(node 167 "peroxisome")
(node 168 "peroxisome")
(node 169 "peroxisome")
(node 170 "peroxisome")
(node 171 "peroxisome")
(node 172 "peroxisome")
(node 173 "peroxisome")
(node 174 "peroxisome")
(node 175 "peroxisome")
(node 176 "peroxisome")
(node 177 "peroxisome")
(node 178 "peroxisome")
(node 179 "peroxisome")
(node 180 "peroxisome")
(node 181 "peroxisome")
(node 182 "peroxisome")
(node 183 "peroxisome")
(node 184 "peroxisome")
(node 185 "peroxisome")
(node 186 "peroxisome")
(node 187 "peroxisome")
(node 188 "peroxisome")
(node 189 "peroxisome")
(node 190 "peroxisome")
(node 191 "peroxisome")
(node 192 "peroxisome")
(node 193 "peroxisome")
(node 194 "peroxisome")
(node 195 "peroxisome")
(node 196 "peroxisome")
(node 197 "peroxisome")
(node 198 "peroxisome")
(node 199 "peroxisome")
(node 200 "peroxisome")
(node 201 "peroxisome")
(node 202 "peroxisome")
(node 203 "peroxisome")
(node 204 "peroxisome")
(node 205 "peroxisome")
(node 206 "peroxisome")
(node 207 "peroxisome")
(node 208 "peroxisome")
(node 209 "peroxisome")
(node 210 "peroxisome")
(node 211 "peroxisome")
(node 212 "peroxisome")
(node 213 "peroxisome")
(node 214 "peroxisome")
(node 215 "peroxisome")
(node 216 "peroxisome")
(node 217 "peroxisome")
(node 218 "peroxisome")
(node 219 "peroxisome")
(node 220 "peroxisome")
(node 221 "peroxisome")
(node 222 "peroxisome")
(node 223 "peroxisome")
(node 224 "peroxisome")
(node 225 "peroxisome")
(node 226 "peroxisome")
(node 227 "peroxisome")
(node 228 "peroxisome")
(node 229 "peroxisome")
(node 230 "peroxisome")
(node 231 "peroxisome")
(node 232 "peroxisome")
(node 233 "peroxisome")
(node 234 "peroxisome")
(node 235 "peroxisome")
(node 236 "peroxisome")
(node 237 "peroxisome")
(node 238 "peroxisome")
(node 239 "peroxisome")
(node 240 "peroxisome")
(node 241 "peroxisome")
(node 242 "peroxisome")
(node 243 "peroxisome")
(node 244 "peroxisome")
(node 245 "peroxisome")
(node 246 "peroxisome")
(node 247 "peroxisome")
(node 248 "peroxisome")
(node 249 "peroxisome")
(node 250 "peroxisome")
(node 251 "peroxisome")
(node 252 "peroxisome")
(node 253 "peroxisome")
(node 254 "peroxisome")
(node 255 "peroxisome")
(node 256 "peroxisome")
(node 257 "peroxisome")
(node 258 "peroxisome")
(node 259 "peroxisome")
(node 260 "peroxisome")
(node 261 "peroxisome")
(node 262 "peroxisome")
(node 263 "peroxisome")
(node 264 "peroxisome")
(node 265 "peroxisome")
(node 266 "peroxisome")
(node 267 "peroxisome")
(node 268 "peroxisome")
(node 269 "peroxisome")
(node 270 "peroxisome")
(node 271 "peroxisome")
(node 272 "peroxisome")
(node 273 "peroxisome")
(node 274 "peroxisome")
(node 275 "peroxisome")
(node 276 "peroxisome")
(node 277 "peroxisome")
(node 278 "peroxisome")
(node 279 "peroxisome")
(node 280 "peroxisome")
(node 281 "peroxisome")
(node 282 "peroxisome")
(node 283 "peroxisome")
(node 284 "peroxisome")
(node 285 "peroxisome")
(node 286 "peroxisome")
(node 287 "peroxisome")
(node 288 "peroxisome")
(node 289 "peroxisome")
(node 290 "peroxisome")
(node 291 "peroxisome")
(node 292 "peroxisome")
(node 293 "peroxisome")
(node 294 "peroxisome")
(node 295 "peroxisome")
(node 296 "peroxisome")
(node 297 "peroxisome")
(node 298 "peroxisome")
(node 299 "peroxisome")
(node 300 "peroxisome")
(node 301 "peroxisome")
(node 302 "peroxisome")
(node 303 "peroxisome")
(node 304 "peroxisome")
(node 305 "peroxisome")
(node 306 "peroxisome")
(node 307 "peroxisome")
(node 308 "peroxisome")
(node 309 "peroxisome")
(node 310 "peroxisome")
(node 311 "peroxisome")
)
(property  0 bool "constant"
(default "false" "false")
)
(property  0 string "ecNumber"
(default "" "")
)
(property  0 vector<string> "encodes"
(default "()" "()")
)
(property  0 bool "fastReaction"
(default "false" "false")
)
(property  0 string "geneAssociation"
(default "" "")
(node 52 "YALI0E15378g")
(node 53 "YALI0E15378g")
(node 54 "YALI0E15378g")
(node 55 "YALI0E15378g")
(node 56 "YALI0E15378g")
(node 57 "YALI0E15378g")
(node 58 "YALI0E15378g")
(node 59 "YALI0E15378g")
(node 60 "YALI0E15378g")
(node 61 "YALI0E15378g")
(node 62 "YALI0E15378g")
(node 63 "YALI0E15378g")
(node 64 "YALI0E18568g")
(node 65 "YALI0E18568g")
(node 66 "YALI0E18568g")
(node 67 "YALI0E18568g")
(node 68 "YALI0E18568g")
(node 69 "YALI0E18568g")
(node 70 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 71 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 72 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 73 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 74 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 75 "(YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g)")
(node 76 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 77 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 78 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 79 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 80 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 81 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 82 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 83 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g")
(node 84 "(YALI0C23859g or YALI0D24750g or YALI0E06567g or YALI0E27654g or YALI0E32835g or YALI0F10857g) and YALI0E18568g and YALI0E15378g and YALI0F22121g and YALI0C03003g")
(node 85 "(YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 86 "(YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
(node 87 "YALI0D17864g")
(node 88 "YALI0D17864g")
(node 89 "YALI0D17864g")
(node 90 "YALI0D17864g")
(node 91 "YALI0E16016g")
(node 92 "YALI0E16016g")
(node 93 "YALI0D17864g")
(node 94 "YALI0D17864g")
(node 95 "YALI0D17864g")
(node 96 "YALI0F14729g")
(node 97 "YALI0F14729g")
(node 98 "YALI0F14729g")
(node 99 "YALI0F14729g")
(node 100 "YALI0F14729g")
(node 101 "YALI0F14729g")
(node 102 "YALI0F14729g")
(node 103 "YALI0D17864g")
(node 104 "(YALI0E15378g and YALI0E18568g and (YALI0E32835g or YALI0E06567g or YALI0D24750g or YALI0C23859g or YALI0E27654g or YALI0F10857g))")
)
(property  0 bool "hasOnlySubstanceUnits"
(default "false" "false")
)
(property  0 bool "hasOutsideConnections"
(default "false" "false")
(node 85 "true")
(node 86 "true")
(node 18 "true")
(node 28 "true")
(node 33 "true")
(node 38 "true")
(node 41 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 73 "true")
(node 75 "true")
)
(property  0 vector<string> "hasPart"
(default "()" "()")
)
(property  0 vector<string> "hasProperty"
(default "()" "()")
)
(property  0 vector<string> "hasVersion"
(default "()" "()")
)
(property  0 string "id"
(default "" "")
(node 0 "s_0045")
(node 1 "s_0048")
(node 2 "s_0051")
(node 3 "s_0054")
(node 4 "s_0057")
(node 5 "s_0236")
(node 6 "s_0245")
(node 7 "s_0249")
(node 8 "s_0253")
(node 9 "s_0256")
(node 10 "s_0259")
(node 11 "s_0263")
(node 12 "s_0385")
(node 13 "s_0437")
(node 14 "s_0451")
(node 15 "s_0492")
(node 16 "s_0519")
(node 17 "s_0580")
(node 18 "s_0585")
(node 19 "s_0610")
(node 20 "s_0781")
(node 21 "s_0785")
(node 22 "s_0804")
(node 23 "s_0974")
(node 24 "s_0980")
(node 25 "s_0993")
(node 26 "s_1034")
(node 27 "s_1041")
(node 28 "s_1047")
(node 29 "s_1086")
(node 30 "s_1090")
(node 31 "s_1130")
(node 32 "s_1138")
(node 33 "s_1143")
(node 34 "s_1150")
(node 35 "s_1164")
(node 36 "s_1176")
(node 37 "s_1183")
(node 38 "s_1190")
(node 39 "s_1331")
(node 40 "s_1337")
(node 41 "s_1358")
(node 42 "s_1361")
(node 43 "s_1385")
(node 44 "s_1388")
(node 45 "s_1391")
(node 46 "s_1394")
(node 47 "s_1397")
(node 48 "s_0771_b")
(node 49 "s_1441_b")
(node 50 "s_5013")
(node 51 "s_5014")
(node 52 "r_0049")
(node 53 "r_0050")
(node 54 "r_0051")
(node 55 "r_0052")
(node 56 "r_0053")
(node 57 "r_0054")
(node 58 "r_0055")
(node 59 "r_0056")
(node 60 "r_0057")
(node 61 "r_0058")
(node 62 "r_0059")
(node 63 "r_0060")
(node 64 "r_0115")
(node 65 "r_0116")
(node 66 "r_0117")
(node 67 "r_0120")
(node 68 "r_0121")
(node 69 "r_0122")
(node 70 "r_0135")
(node 71 "r_0136")
(node 72 "r_0137")
(node 73 "r_0138")
(node 74 "r_0139")
(node 75 "r_0140")
(node 76 "r_0406")
(node 77 "r_0407")
(node 78 "r_0408")
(node 79 "r_0409")
(node 80 "r_0410")
(node 81 "r_0411")
(node 82 "r_0412")
(node 83 "r_0413")
(node 84 "r_0414")
(node 85 "r_0415")
(node 86 "r_0416")
(node 87 "r_0431")
(node 88 "r_0432")
(node 89 "r_0434")
(node 90 "r_0436")
(node 91 "r_0437")
(node 92 "r_0438")
(node 93 "r_0442")
(node 94 "r_0444")
(node 95 "r_0446")
(node 96 "r_0818")
(node 97 "r_0819")
(node 98 "r_0820")
(node 99 "r_0821")
(node 100 "r_0822")
(node 101 "r_0823")
(node 102 "r_0824")
(node 103 "r_2015")
(node 104 "r_2016")
(node 105 "s_0385")
(node 106 "s_0385")
(node 107 "s_0385")
(node 108 "s_0385")
(node 109 "s_0385")
(node 110 "s_0385")
(node 111 "s_0385")
(node 112 "s_0385")
(node 113 "s_0385")
(node 114 "s_0385")
(node 115 "s_0385")
(node 116 "s_0385")
(node 117 "s_0385")
(node 118 "s_0385")
(node 119 "s_0385")
(node 120 "s_0385")
(node 121 "s_0385")
(node 122 "s_0437")
(node 123 "s_0437")
(node 124 "s_0437")
(node 125 "s_0437")
(node 126 "s_0437")
(node 127 "s_0437")
(node 128 "s_0437")
(node 129 "s_0437")
(node 130 "s_0437")
(node 131 "s_0451")
(node 132 "s_0451")
(node 133 "s_0451")
(node 134 "s_0451")
(node 135 "s_0451")
(node 136 "s_0451")
(node 137 "s_0451")
(node 138 "s_0451")
(node 139 "s_0451")
(node 140 "s_0519")
(node 141 "s_0519")
(node 142 "s_0519")
(node 143 "s_0519")
(node 144 "s_0519")
(node 145 "s_0519")
(node 146 "s_0519")
(node 147 "s_0519")
(node 148 "s_0519")
(node 149 "s_0519")
(node 150 "s_0519")
(node 151 "s_0519")
(node 152 "s_0519")
(node 153 "s_0519")
(node 154 "s_0519")
(node 155 "s_0519")
(node 156 "s_0519")
(node 157 "s_0519")
(node 158 "s_0519")
(node 159 "s_0519")
(node 160 "s_0519")
(node 161 "s_0519")
(node 162 "s_0519")
(node 163 "s_0519")
(node 164 "s_0519")
(node 165 "s_0519")
(node 166 "s_0519")
(node 167 "s_0519")
(node 168 "s_0519")
(node 169 "s_0519")
(node 170 "s_0519")
(node 171 "s_0519")
(node 172 "s_0519")
(node 173 "s_0519")
(node 174 "s_0610")
(node 175 "s_0610")
(node 176 "s_0610")
(node 177 "s_0610")
(node 178 "s_0610")
(node 179 "s_0610")
(node 180 "s_0610")
(node 181 "s_0610")
(node 182 "s_0610")
(node 183 "s_0804")
(node 184 "s_0804")
(node 185 "s_0804")
(node 186 "s_0804")
(node 187 "s_0804")
(node 188 "s_0804")
(node 189 "s_0804")
(node 190 "s_0804")
(node 191 "s_0804")
(node 192 "s_0804")
(node 193 "s_0804")
(node 194 "s_0804")
(node 195 "s_0804")
(node 196 "s_0804")
(node 197 "s_0804")
(node 198 "s_0804")
(node 199 "s_0804")
(node 200 "s_0980")
(node 201 "s_0980")
(node 202 "s_0980")
(node 203 "s_1086")
(node 204 "s_1086")
(node 205 "s_1086")
(node 206 "s_1086")
(node 207 "s_1086")
(node 208 "s_1086")
(node 209 "s_1086")
(node 210 "s_1086")
(node 211 "s_1086")
(node 212 "s_1086")
(node 213 "s_1086")
(node 214 "s_1086")
(node 215 "s_1086")
(node 216 "s_1086")
(node 217 "s_1086")
(node 218 "s_1086")
(node 219 "s_1086")
(node 220 "s_1090")
(node 221 "s_1090")
(node 222 "s_1090")
(node 223 "s_1090")
(node 224 "s_1090")
(node 225 "s_1090")
(node 226 "s_1090")
(node 227 "s_1090")
(node 228 "s_1090")
(node 229 "s_1090")
(node 230 "s_1090")
(node 231 "s_1090")
(node 232 "s_1090")
(node 233 "s_1090")
(node 234 "s_1090")
(node 235 "s_1090")
(node 236 "s_1090")
(node 237 "s_1095")
(node 238 "s_1095")
(node 239 "s_1095")
(node 240 "s_1095")
(node 241 "s_1095")
(node 242 "s_1099")
(node 243 "s_1099")
(node 244 "s_1099")
(node 245 "s_1099")
(node 246 "s_1099")
(node 247 "s_1164")
(node 248 "s_1164")
(node 249 "s_1164")
(node 250 "s_1164")
(node 251 "s_1164")
(node 252 "s_1164")
(node 253 "s_1164")
(node 254 "s_1164")
(node 255 "s_1164")
(node 256 "s_1164")
(node 257 "s_1164")
(node 258 "s_1164")
(node 259 "s_1164")
(node 260 "s_1164")
(node 261 "s_1164")
(node 262 "s_1164")
(node 263 "s_1164")
(node 264 "s_0771_b")
(node 265 "s_0771_b")
(node 266 "s_0771_b")
(node 267 "s_0771_b")
(node 268 "s_0771_b")
(node 269 "s_0771_b")
(node 270 "s_0771_b")
(node 271 "s_0771_b")
(node 272 "s_0771_b")
(node 273 "s_0771_b")
(node 274 "s_0771_b")
(node 275 "s_0771_b")
(node 276 "s_0771_b")
(node 277 "s_0771_b")
(node 278 "s_0771_b")
(node 279 "s_0771_b")
(node 280 "s_0771_b")
(node 281 "s_0771_b")
(node 282 "s_0771_b")
(node 283 "s_0771_b")
(node 284 "s_0771_b")
(node 285 "s_0771_b")
(node 286 "s_0771_b")
(node 287 "s_0771_b")
(node 288 "s_1441_b")
(node 289 "s_1441_b")
(node 290 "s_1441_b")
(node 291 "s_1441_b")
(node 292 "s_1441_b")
(node 293 "s_1441_b")
(node 294 "s_1441_b")
(node 295 "s_1441_b")
(node 296 "s_1441_b")
(node 297 "s_1441_b")
(node 298 "s_1441_b")
(node 299 "s_1441_b")
(node 300 "s_1441_b")
(node 301 "s_1441_b")
(node 302 "s_1441_b")
(node 303 "s_1441_b")
(node 304 "s_1441_b")
(node 305 "s_1441_b")
(node 306 "s_1441_b")
(node 307 "s_1441_b")
(node 308 "s_1441_b")
(node 309 "s_1441_b")
(node 310 "s_1441_b")
(node 311 "s_1441_b")
)
(property  0 double "initialAmount"
(default "0" "0")
)
(property  0 double "initialConcentration"
(default "0" "0")
)
(property  0 vector<string> "is"
(default "()" "()")
(node 0 "(\"http://identifiers.org/obo.chebi/chebi:28325\")")
(node 1 "(\"http://identifiers.org/obo.chebi/chebi:52976\")")
(node 2 "(\"http://identifiers.org/obo.chebi/chebi:62558\")")
(node 3 "(\"http://identifiers.org/obo.chebi/chebi:27402\")")
(node 4 "(\"http://identifiers.org/obo.chebi/chebi:62614\")")
(node 5 "(\"http://identifiers.org/obo.chebi/chebi:50583\")")
(node 6 "(\"http://identifiers.org/obo.chebi/chebi:28528\")")
(node 7 "(\"http://identifiers.org/obo.chebi/chebi:52977\")")
(node 8 "(\"http://identifiers.org/obo.chebi/chebi:62615\")")
(node 9 "(\"http://identifiers.org/obo.chebi/chebi:50571\")")
(node 10 "(\"http://identifiers.org/obo.chebi/chebi:15491\")")
(node 11 "(\"http://identifiers.org/obo.chebi/chebi:28726\")")
(node 12 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 13 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 14 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 15 "(\"http://identifiers.org/obo.chebi/chebi:31013\")")
(node 16 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 17 "(\"http://identifiers.org/obo.chebi/chebi:27689\")")
(node 18 "(\"http://identifiers.org/obo.chebi/chebi:61430\")")
(node 19 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 20 "(\"http://identifiers.org/obo.chebi/chebi:52966\")")
(node 21 "(\"http://identifiers.org/obo.chebi/chebi:52381\")")
(node 22 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 23 "(\"http://identifiers.org/obo.chebi/chebi:18262\")")
(node 24 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 25 "(\"http://identifiers.org/obo.chebi/chebi:28866\")")
(node 26 "(\"http://identifiers.org/obo.chebi/chebi:30807\")")
(node 27 "(\"http://identifiers.org/obo.chebi/chebi:32370\")")
(node 28 "(\"http://identifiers.org/obo.chebi/chebi:15532\")")
(node 29 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 30 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 31 "(\"http://identifiers.org/obo.chebi/chebi:53151\")")
(node 32 "(\"http://identifiers.org/obo.chebi/chebi:25646\")")
(node 33 "(\"http://identifiers.org/obo.chebi/chebi:15533\")")
(node 34 "(\"http://identifiers.org/obo.chebi/chebi:15534\")")
(node 35 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 36 "(\"http://identifiers.org/obo.chebi/chebi:7896\")")
(node 37 "(\"http://identifiers.org/obo.chebi/chebi:32372\")")
(node 38 "(\"http://identifiers.org/obo.chebi/chebi:57379\")")
(node 39 "(\"http://identifiers.org/obo.chebi/chebi:25629\")")
(node 40 "(\"http://identifiers.org/obo.chebi/chebi:15541\")")
(node 41 "(\"http://identifiers.org/obo.chebi/chebi:52974\")")
(node 42 "(\"http://identifiers.org/obo.chebi/chebi:26900\")")
(node 43 "(\"http://identifiers.org/obo.chebi/chebi:61406\")")
(node 44 "(\"http://identifiers.org/obo.chebi/chebi:15471\")")
(node 45 "(\"http://identifiers.org/obo.chebi/chebi:52975\")")
(node 46 "(\"http://identifiers.org/obo.chebi/chebi:50570\")")
(node 47 "(\"http://identifiers.org/obo.chebi/chebi:61405\")")
(node 48 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 49 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 50 "(\"http://identifiers.org/obo.chebi/chebi:17968\")")
(node 51 "(\"http://identifiers.org/obo.chebi/chebi:15517\")")
(node 105 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 106 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 107 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 108 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 109 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 110 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 111 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 112 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 113 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 114 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 115 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 116 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 117 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 118 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 119 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 120 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 121 "(\"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 122 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 123 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 124 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 125 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 126 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 127 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 128 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 129 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 130 "(\"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 131 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 132 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 133 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 134 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 135 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 136 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 137 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 138 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 139 "(\"http://identifiers.org/obo.chebi/chebi:30616\")")
(node 140 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 141 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 142 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 143 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 144 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 145 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 146 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 147 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 148 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 149 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 150 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 151 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 152 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 153 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 154 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 155 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 156 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 157 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 158 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 159 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 160 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 161 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 162 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 163 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 164 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 165 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 166 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 167 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 168 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 169 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 170 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 171 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 172 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 173 "(\"http://identifiers.org/obo.chebi/chebi:15346\")")
(node 174 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 175 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 176 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 177 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 178 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 179 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 180 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 181 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 182 "(\"http://identifiers.org/obo.chebi/chebi:18361\")")
(node 183 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 184 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 185 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 186 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 187 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 188 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 189 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 190 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 191 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 192 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 193 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 194 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 195 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 196 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 197 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 198 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 199 "(\"http://identifiers.org/obo.chebi/chebi:16240\")")
(node 200 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 201 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 202 "(\"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 203 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 204 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 205 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 206 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 207 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 208 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 209 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 210 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 211 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 212 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 213 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 214 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 215 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 216 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 217 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 218 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 219 "(\"http://identifiers.org/obo.chebi/chebi:15846\")")
(node 220 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 221 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 222 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 223 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 224 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 225 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 226 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 227 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 228 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 229 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 230 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 231 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 232 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 233 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 234 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 235 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 236 "(\"http://identifiers.org/obo.chebi/chebi:16908\")")
(node 237 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 238 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 239 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 240 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 241 "(\"http://identifiers.org/obo.chebi/chebi:18009\")")
(node 242 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 243 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 244 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 245 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 246 "(\"http://identifiers.org/obo.chebi/chebi:57783\")")
(node 247 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 248 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 249 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 250 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 251 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 252 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 253 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 254 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 255 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 256 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 257 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 258 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 259 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 260 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 261 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 262 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 263 "(\"http://identifiers.org/obo.chebi/chebi:15379\")")
(node 264 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 265 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 266 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 267 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 268 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 269 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 270 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 271 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 272 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 273 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 274 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 275 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 276 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 277 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 278 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 279 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 280 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 281 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 282 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 283 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 284 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 285 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 286 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 287 "(\"http://identifiers.org/obo.chebi/chebi:15378\")")
(node 288 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 289 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 290 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 291 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 292 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 293 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 294 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 295 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 296 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 297 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 298 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 299 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 300 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 301 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 302 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 303 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 304 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 305 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 306 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 307 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 308 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 309 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 310 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 311 "(\"http://identifiers.org/obo.chebi/chebi:29375\")")
)
(property  0 vector<string> "isDescribedBy"
(default "()" "()")
)
(property  0 vector<string> "isEncodedBy"
(default "()" "()")
)
(property  0 vector<string> "isHomologTo"
(default "()" "()")
)
(property  0 vector<string> "isPartOf"
(default "()" "()")
)
(property  0 vector<string> "isPropertyOf"
(default "()" "()")
)
(property  0 vector<string> "isVersionOf"
(default "()" "()")
(node 52 "(\"_.8.0.0.True\")")
(node 53 "(\"_.8.1.0.True\")")
(node 54 "(\"_.8.2.0.True\")")
(node 55 "(\"_.8.3.0.True\")")
(node 56 "(\"_.8.4.0.True\")")
(node 57 "(\"_.8.5.0.True\")")
(node 58 "(\"_.14.0.0.True\")")
(node 59 "(\"_.14.1.0.True\")")
(node 60 "(\"_.14.2.0.True\")")
(node 61 "(\"_.14.3.0.True\")")
(node 62 "(\"_.14.4.0.True\")")
(node 63 "(\"_.14.5.0.True\")")
(node 64 "(\"_.25.0.0.True\")")
(node 65 "(\"_.25.1.0.True\")")
(node 66 "(\"_.25.2.0.True\")")
(node 67 "(\"_.25.3.0.True\")")
(node 68 "(\"_.25.4.0.True\")")
(node 69 "(\"_.25.5.0.True\")")
(node 70 "(\"_.3.0.0.True\")")
(node 71 "(\"_.3.1.0.True\")")
(node 72 "(\"_.3.2.0.True\")")
(node 73 "(\"_.3.3.0.True\")")
(node 74 "(\"_.22.0.0.True\")")
(node 75 "(\"_.3.4.0.True\")")
(node 76 "(\"_.4.0.0.True\")")
(node 77 "(\"_.5.0.0.True\")")
(node 78 "(\"_.4.1.0.True\")")
(node 79 "(\"_.5.1.0.True\")")
(node 80 "(\"_.4.2.0.True\")")
(node 81 "(\"_.24.0.0.True\")")
(node 82 "(\"_.24.1.0.True\")")
(node 83 "(\"_.2.1.0.True\")")
(node 84 "(\"_.5.2.0.True\")")
(node 85 "(\"_.2.2.0.True\")")
(node 86 "(\"_.20.0.0.True\")")
(node 87 "(\"_.6.1.0.True\")")
(node 88 "(\"_.6.2.0.True\")")
(node 89 "(\"_.6.3.0.True\")")
(node 90 "(\"_.18.0.0.True\")")
(node 91 "(\"_.6.4.0.True\")")
(node 92 "(\"_.6.5.0.True\")")
(node 93 "(\"_.6.6.0.True\")")
(node 94 "(\"_.6.7.0.True\")")
(node 95 "(\"_.18.1.0.True\")")
(node 96 "(\"_.19.0.0.True\")")
(node 97 "(\"_.19.1.0.True\")")
(node 98 "(\"_.19.2.0.True\")")
(node 99 "(\"_.19.3.0.True\")")
(node 100 "(\"_.19.4.0.True\")")
(node 101 "(\"_.7.0.0.True\")")
(node 102 "(\"_.19.5.0.True\")")
(node 103 "(\"_.6.0.0.True\")")
(node 104 "(\"_.2.0.0.True\")")
)
(property  0 vector<int> "listOfProducts"
(default "()" "()")
(node 52 "(109, 121)")
(node 53 "(110, 121)")
(node 54 "(3)")
(node 55 "(49, 121)")
(node 56 "(112, 121)")
(node 57 "(113, 121)")
(node 58 "(2, 72)")
(node 59 "(4, 72)")
(node 60 "(15, 119, 73)")
(node 61 "(5, 72)")
(node 62 "(13, 72)")
(node 63 "(6, 72)")
(node 64 "(22, 96)")
(node 65 "(22, 106)")
(node 66 "(22, 71)")
(node 67 "(22, 63)")
(node 68 "(22, 84)")
(node 69 "(22, 39)")
(node 70 "(50, 109)")
(node 71 "(50, 110)")
(node 72 "(50, 111)")
(node 73 "(49, 50)")
(node 74 "(50, 112)")
(node 75 "(50, 113)")
(node 76 "(22, 119, 50, 73)")
(node 77 "(22, 119, 50, 73, 74)")
(node 78 "(22, 119, 50, 73)")
(node 79 "(22, 119, 50, 73, 74)")
(node 80 "(22, 119, 50, 73)")
(node 81 "(22, 119, 50, 73, 74)")
(node 82 "(22, 119, 50, 73, 74)")
(node 83 "(22, 119, 50, 73)")
(node 84 "(22, 119, 50, 73, 74)")
(node 85 "(22, 119, 50, 73)")
(node 86 "(22, 119, 50, 73, 104)")
(node 87 "(26, 39, 41)")
(node 88 "(26, 41, 63)")
(node 89 "(26, 41, 96)")
(node 90 "(26, 41, 49)")
(node 91 "(26, 41, 106)")
(node 92 "(26, 41, 47)")
(node 93 "(26, 41, 84)")
(node 94 "(26, 41, 71)")
(node 95 "(26, 41, 108)")
(node 96 "(36, 38, 119)")
(node 97 "(36, 119, 62)")
(node 98 "(36, 119, 65)")
(node 99 "(36, 119, 92)")
(node 100 "(36, 119, 67)")
(node 101 "(36, 119, 102)")
(node 102 "(36, 119, 83)")
(node 103 "(124, 26, 41)")
(node 104 "(22, 119, 50, 73)")
)
(property  0 vector<int> "listOfReactants"
(default "()" "()")
(node 52 "(2)")
(node 53 "(4)")
(node 54 "(111, 121)")
(node 55 "(5)")
(node 56 "(13)")
(node 57 "(6)")
(node 58 "(14, 119, 73)")
(node 59 "(16, 119, 73)")
(node 60 "(3, 72)")
(node 61 "(18, 119, 73)")
(node 62 "(17, 119, 73)")
(node 63 "(19, 119, 73)")
(node 64 "(17, 36)")
(node 65 "(15, 36)")
(node 66 "(18, 36)")
(node 67 "(19, 36)")
(node 68 "(14, 36)")
(node 69 "(16, 36)")
(node 70 "(39, 90)")
(node 71 "(63, 90)")
(node 72 "(47, 90)")
(node 73 "(90, 96)")
(node 74 "(90, 104)")
(node 75 "(71, 90)")
(node 76 "(36, 72, 90, 108, 121)")
(node 77 "(36, 49, 72, 75, 90, 121)")
(node 78 "(36, 49, 72, 90, 121)")
(node 79 "(36, 72, 75, 86, 90, 121)")
(node 80 "(36, 72, 86, 90, 121)")
(node 81 "(36, 72, 75, 81, 90, 121)")
(node 82 "(36, 72, 75, 81, 90, 121)")
(node 83 "(36, 72, 81, 90, 121)")
(node 84 "(36, 72, 75, 90, 108, 121)")
(node 85 "(36, 72, 84, 90, 121)")
(node 86 "(36, 72, 90, 106, 121)")
(node 87 "(28, 36, 38)")
(node 88 "(28, 36, 62)")
(node 89 "(28, 36, 92)")
(node 90 "(28, 36, 94)")
(node 91 "(28, 36, 65)")
(node 92 "(28, 33, 36)")
(node 93 "(28, 36, 83)")
(node 94 "(28, 36, 67)")
(node 95 "(28, 36, 69)")
(node 96 "(39, 121)")
(node 97 "(63, 121)")
(node 98 "(106, 121)")
(node 99 "(96, 121)")
(node 100 "(71, 121)")
(node 101 "(104, 121)")
(node 102 "(84, 121)")
(node 103 "(123, 28, 36)")
(node 104 "(36, 72, 124, 90, 121)")
)
(property  0 bool "membrane"
(default "false" "false")
)
(property  0 int "membranePos"
(default "-1" "0")
)
(property  0 vector<color> "multiColor"
(default "()" "()")
(node 1 "((102,102,204,255))")
(node 6 "((102,204,102,255))")
(node 11 "((153,102,204,255))")
(node 12 "((211,211,211,255))")
(node 13 "((211,211,211,255))")
(node 14 "((211,211,211,255))")
(node 16 "((211,211,211,255))")
(node 19 "((211,211,211,255))")
(node 22 "((211,211,211,255))")
(node 29 "((211,211,211,255))")
(node 30 "((211,211,211,255))")
(node 31 "((153,204,102,255))")
(node 35 "((211,211,211,255))")
(node 40 "((102,204,150,255))")
(node 48 "((211,211,211,255))")
(node 49 "((211,211,211,255))")
(node 51 "((102,204,127,255))")
(node 54 "((211,211,211,255))")
(node 58 "((211,211,211,255))")
(node 60 "((211,211,211,255))")
(node 63 "((211,211,211,255))")
(node 67 "((211,211,211,255))")
(node 68 "((211,211,211,255))")
(node 74 "((211,211,211,255))")
(node 83 "((211,211,211,255))")
(node 85 "((211,211,211,255))")
(node 86 "((211,211,211,255))")
(node 89 "((211,211,211,255))")
(node 99 "((211,211,211,255))")
(node 101 "((211,211,211,255))")
(node 103 "((211,211,211,255))")
(node 104 "((211,211,211,255))")
(node 108 "((211,211,211,255))")
(node 109 "((211,211,211,255))")
(node 118 "((211,211,211,255))")
(node 120 "((211,211,211,255))")
(node 121 "((211,211,211,255))")
(node 124 "((211,211,211,255))")
(node 133 "((211,211,211,255))")
(node 143 "((211,211,211,255))")
(node 144 "((211,211,211,255))")
(node 153 "((211,211,211,255))")
(node 155 "((211,211,211,255))")
(node 156 "((211,211,211,255))")
(node 159 "((211,211,211,255))")
(node 169 "((211,211,211,255))")
(node 171 "((211,211,211,255))")
(node 173 "((211,211,211,255))")
(node 176 "((211,211,211,255))")
(node 187 "((211,211,211,255))")
(node 196 "((211,211,211,255))")
(node 198 "((211,211,211,255))")
(node 199 "((211,211,211,255))")
(node 203 "((211,211,211,255))")
(node 205 "((211,211,211,255))")
(node 208 "((211,211,211,255))")
(node 216 "((211,211,211,255))")
(node 218 "((211,211,211,255))")
(node 219 "((211,211,211,255))")
(node 220 "((211,211,211,255))")
(node 222 "((211,211,211,255))")
(node 225 "((211,211,211,255))")
(node 233 "((211,211,211,255))")
(node 235 "((211,211,211,255))")
(node 236 "((211,211,211,255))")
(node 251 "((211,211,211,255))")
(node 260 "((211,211,211,255))")
(node 262 "((211,211,211,255))")
(node 263 "((211,211,211,255))")
(node 264 "((211,211,211,255))")
(node 266 "((211,211,211,255))")
(node 269 "((211,211,211,255))")
(node 277 "((211,211,211,255))")
(node 279 "((211,211,211,255))")
(node 280 "((211,211,211,255))")
(node 284 "((211,211,211,255))")
(node 286 "((211,211,211,255))")
(node 290 "((211,211,211,255))")
(node 301 "((211,211,211,255))")
(node 303 "((211,211,211,255))")
(node 304 "((211,211,211,255))")
(node 308 "((211,211,211,255))")
(node 310 "((211,211,211,255))")
)
(property  0 string "name"
(default "" "")
(node 0 "(S)-3-hydroxydecanoyl-CoA [peroxisome]")
(node 1 "(S)-3-hydroxyhexacosanoyl-CoA [peroxisome]")
(node 2 "(S)-3-hydroxylauroyl-CoA [peroxisome]")
(node 3 "(S)-3-hydroxypalmitoyl-CoA [peroxisome]")
(node 4 "(S)-3-hydroxytetradecanoyl-CoA [peroxisome]")
(node 5 "3-hydroxyoctadecanoyl-CoA [peroxisome]")
(node 6 "3-oxodecanoyl-CoA [peroxisome]")
(node 7 "3-oxohexacosanoyl-CoA [peroxisome]")
(node 8 "3-oxolauroyl-CoA [peroxisome]")
(node 9 "3-oxooctadecanoyl-CoA [peroxisome]")
(node 10 "3-oxopalmitoyl-CoA [peroxisome]")
(node 11 "3-oxotetradecanoyl-CoA [peroxisome]")
(node 12 "acetyl-CoA [peroxisome]")
(node 13 "AMP [peroxisome]")
(node 14 "ATP [peroxisome]")
(node 15 "cerotate [peroxisome]")
(node 16 "coenzyme A [peroxisome]")
(node 17 "decanoate [peroxisome]")
(node 18 "decanoyl-CoA [peroxisome]")
(node 19 "pyrophosphate [peroxisome]")
(node 20 "hexacosanoyl-CoA [peroxisome]")
(node 21 "hexadec-2-enoyl-CoA [peroxisome]")
(node 22 "hydrogen peroxide [peroxisome]")
(node 23 "laurate [peroxisome]")
(node 24 "lauroyl-CoA [peroxisome]")
(node 25 "lignoceric acid [peroxisome]")
(node 26 "myristate [peroxisome]")
(node 27 "myristoleate [peroxisome]")
(node 28 "myristoyl-CoA [peroxisome]")
(node 29 "NAD [peroxisome]")
(node 30 "NADH [peroxisome]")
(node 31 "octadec-9-ynoyl-CoA [peroxisome]")
(node 32 "octanoate [peroxisome]")
(node 33 "octanoyl-CoA [peroxisome]")
(node 34 "oleoyl-CoA [peroxisome]")
(node 35 "oxygen [peroxisome]")
(node 36 "palmitate [peroxisome]")
(node 37 "palmitoleate [peroxisome]")
(node 38 "palmitoyl-CoA [peroxisome]")
(node 39 "stearate [peroxisome]")
(node 40 "stearoyl-CoA [peroxisome]")
(node 41 "tetracosanoyl-CoA [peroxisome]")
(node 42 "tetradecenoyl-CoA [peroxisome]")
(node 43 "trans-dec-2-enoyl-CoA [peroxisome]")
(node 44 "trans-dodec-2-enoyl-CoA [peroxisome]")
(node 45 "trans-hexacos-2-enoyl-CoA [peroxisome]")
(node 46 "trans-octadec-2-enoyl-CoA [peroxisome]")
(node 47 "trans-tetradec-2-enoyl-CoA [peroxisome]")
(node 48 "H+ [peroxisome]")
(node 49 "H2O [peroxisome]")
(node 50 "butyrate [peroxisome]")
(node 51 "butyryl-CoA [peroxisome]")
(node 52 "3-hydroxyacyl-CoA dehydratase (3-hydroxydecanoyl-CoA)")
(node 53 "3-hydroxyacyl-CoA dehydratase (3-hydroxydodecanoyl-CoA)")
(node 54 "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexacosyl-CoA)")
(node 55 "3-hydroxyacyl-CoA dehydratase (3-hydroxyhexadecanoyl-CoA)")
(node 56 "3-hydroxyacyl-CoA dehydratase (3-hydroxyoctadecanoyl-CoA)")
(node 57 "3-hydroxyacyl-CoA dehydratase (3-hydroxytetradecanoyl-CoA)")
(node 58 "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
(node 59 "3-hydroxyacyl-CoA dehydrogenase (3-oxodecanoyl-CoA)")
(node 60 "3-hydroxyacyl-CoA dehydrogenase (3-oxohexacosyl-CoA)")
(node 61 "3-hydroxyacyl-CoA dehydrogenase (3-oxohexadecanoyl-CoA)")
(node 62 "3-hydroxyacyl-CoA dehydrogenase (3-oxooctadecanoyl-CoA)")
(node 63 "3-hydroxyacyl-CoA dehydrogenase (3-oxotetradecanoyl-CoA)")
(node 64 "acetyl-CoA acyltransferase (hexadecanoyl-CoA)")
(node 65 "acetyl-CoA acyltransferase (tetracosanoyl-CoA)")
(node 66 "acetyl-CoA acyltransferase (tetradecanoyl-CoA)")
(node 67 "acetyl-CoA C-acetyltransferase (dodecanoyl)")
(node 68 "acetyl-CoA C-acetyltransferase (octanoyl-CoA)")
(node 69 "acetyl-CoA C-acyltransferase (decanoyl-CoA)")
(node 70 "acyl-CoA oxidase (decanoyl-CoA)")
(node 71 "acyl-CoA oxidase (dodecanoyl-CoA)")
(node 72 "acyl-CoA oxidase (hexacanoyl-CoA)")
(node 73 "acyl-CoA oxidase (hexadecanoyl-CoA)")
(node 74 "acyl-CoA oxidase (octadecanoyl-CoA)")
(node 75 "acyl-CoA oxidase (tetradecanoyl-CoA)")
(node 76 "fatty acid oxidation")
(node 77 "fatty acid oxidation")
(node 78 "fatty acid oxidation")
(node 79 "fatty acid oxidation")
(node 80 "fatty acid oxidation")
(node 81 "fatty acid oxidation")
(node 82 "fatty acid oxidation")
(node 83 "fatty acid oxidation")
(node 84 "fatty acid oxidation")
(node 85 "fatty acid oxidation (octanoyl-CoA)")
(node 86 "fatty acid oxidation (tetradecansoyl-CoA)")
(node 87 "fatty-acid--CoA ligase (decanoate)")
(node 88 "fatty-acid--CoA ligase (dodecanoate)")
(node 89 "fatty-acid--CoA ligase (hexadecanoate)")
(node 90 "fatty-acid--CoA ligase (hexadecenoate)")
(node 91 "fatty-acid--CoA ligase (n-C24:0)")
(node 92 "fatty-acid--CoA ligase (n-C26:0)")
(node 93 "fatty-acid--CoA ligase (octanoate)")
(node 94 "fatty-acid--CoA ligase (tetradecanoate)")
(node 95 "fatty-acid--CoA ligase (tetradecenoate)")
(node 96 "peroxisomal acyl-CoA thioesterase")
(node 97 "peroxisomal acyl-CoA thioesterase")
(node 98 "peroxisomal acyl-CoA thioesterase")
(node 99 "peroxisomal acyl-CoA thioesterase")
(node 100 "peroxisomal acyl-CoA thioesterase")
(node 101 "peroxisomal acyl-CoA thioesterase")
(node 102 "peroxisomal acyl-CoA thioesterase")
(node 103 "fatty-acid--CoA ligase (butyrate)")
(node 104 "fatty acid oxidation (butyryl-CoA)")
(node 105 "acetyl-CoA [peroxisome]")
(node 106 "acetyl-CoA [peroxisome]")
(node 107 "acetyl-CoA [peroxisome]")
(node 108 "acetyl-CoA [peroxisome]")
(node 109 "acetyl-CoA [peroxisome]")
(node 110 "acetyl-CoA [peroxisome]")
(node 111 "acetyl-CoA [peroxisome]")
(node 112 "acetyl-CoA [peroxisome]")
(node 113 "acetyl-CoA [peroxisome]")
(node 114 "acetyl-CoA [peroxisome]")
(node 115 "acetyl-CoA [peroxisome]")
(node 116 "acetyl-CoA [peroxisome]")
(node 117 "acetyl-CoA [peroxisome]")
(node 118 "acetyl-CoA [peroxisome]")
(node 119 "acetyl-CoA [peroxisome]")
(node 120 "acetyl-CoA [peroxisome]")
(node 121 "acetyl-CoA [peroxisome]")
(node 122 "AMP [peroxisome]")
(node 123 "AMP [peroxisome]")
(node 124 "AMP [peroxisome]")
(node 125 "AMP [peroxisome]")
(node 126 "AMP [peroxisome]")
(node 127 "AMP [peroxisome]")
(node 128 "AMP [peroxisome]")
(node 129 "AMP [peroxisome]")
(node 130 "AMP [peroxisome]")
(node 131 "ATP [peroxisome]")
(node 132 "ATP [peroxisome]")
(node 133 "ATP [peroxisome]")
(node 134 "ATP [peroxisome]")
(node 135 "ATP [peroxisome]")
(node 136 "ATP [peroxisome]")
(node 137 "ATP [peroxisome]")
(node 138 "ATP [peroxisome]")
(node 139 "ATP [peroxisome]")
(node 140 "coenzyme A [peroxisome]")
(node 141 "coenzyme A [peroxisome]")
(node 142 "coenzyme A [peroxisome]")
(node 143 "coenzyme A [peroxisome]")
(node 144 "coenzyme A [peroxisome]")
(node 145 "coenzyme A [peroxisome]")
(node 146 "coenzyme A [peroxisome]")
(node 147 "coenzyme A [peroxisome]")
(node 148 "coenzyme A [peroxisome]")
(node 149 "coenzyme A [peroxisome]")
(node 150 "coenzyme A [peroxisome]")
(node 151 "coenzyme A [peroxisome]")
(node 152 "coenzyme A [peroxisome]")
(node 153 "coenzyme A [peroxisome]")
(node 154 "coenzyme A [peroxisome]")
(node 155 "coenzyme A [peroxisome]")
(node 156 "coenzyme A [peroxisome]")
(node 157 "coenzyme A [peroxisome]")
(node 158 "coenzyme A [peroxisome]")
(node 159 "coenzyme A [peroxisome]")
(node 160 "coenzyme A [peroxisome]")
(node 161 "coenzyme A [peroxisome]")
(node 162 "coenzyme A [peroxisome]")
(node 163 "coenzyme A [peroxisome]")
(node 164 "coenzyme A [peroxisome]")
(node 165 "coenzyme A [peroxisome]")
(node 166 "coenzyme A [peroxisome]")
(node 167 "coenzyme A [peroxisome]")
(node 168 "coenzyme A [peroxisome]")
(node 169 "coenzyme A [peroxisome]")
(node 170 "coenzyme A [peroxisome]")
(node 171 "coenzyme A [peroxisome]")
(node 172 "coenzyme A [peroxisome]")
(node 173 "coenzyme A [peroxisome]")
(node 174 "pyrophosphate [peroxisome]")
(node 175 "pyrophosphate [peroxisome]")
(node 176 "pyrophosphate [peroxisome]")
(node 177 "pyrophosphate [peroxisome]")
(node 178 "pyrophosphate [peroxisome]")
(node 179 "pyrophosphate [peroxisome]")
(node 180 "pyrophosphate [peroxisome]")
(node 181 "pyrophosphate [peroxisome]")
(node 182 "pyrophosphate [peroxisome]")
(node 183 "hydrogen peroxide [peroxisome]")
(node 184 "hydrogen peroxide [peroxisome]")
(node 185 "hydrogen peroxide [peroxisome]")
(node 186 "hydrogen peroxide [peroxisome]")
(node 187 "hydrogen peroxide [peroxisome]")
(node 188 "hydrogen peroxide [peroxisome]")
(node 189 "hydrogen peroxide [peroxisome]")
(node 190 "hydrogen peroxide [peroxisome]")
(node 191 "hydrogen peroxide [peroxisome]")
(node 192 "hydrogen peroxide [peroxisome]")
(node 193 "hydrogen peroxide [peroxisome]")
(node 194 "hydrogen peroxide [peroxisome]")
(node 195 "hydrogen peroxide [peroxisome]")
(node 196 "hydrogen peroxide [peroxisome]")
(node 197 "hydrogen peroxide [peroxisome]")
(node 198 "hydrogen peroxide [peroxisome]")
(node 199 "hydrogen peroxide [peroxisome]")
(node 200 "lauroyl-CoA [peroxisome]")
(node 201 "lauroyl-CoA [peroxisome]")
(node 202 "lauroyl-CoA [peroxisome]")
(node 203 "NAD [peroxisome]")
(node 204 "NAD [peroxisome]")
(node 205 "NAD [peroxisome]")
(node 206 "NAD [peroxisome]")
(node 207 "NAD [peroxisome]")
(node 208 "NAD [peroxisome]")
(node 209 "NAD [peroxisome]")
(node 210 "NAD [peroxisome]")
(node 211 "NAD [peroxisome]")
(node 212 "NAD [peroxisome]")
(node 213 "NAD [peroxisome]")
(node 214 "NAD [peroxisome]")
(node 215 "NAD [peroxisome]")
(node 216 "NAD [peroxisome]")
(node 217 "NAD [peroxisome]")
(node 218 "NAD [peroxisome]")
(node 219 "NAD [peroxisome]")
(node 220 "NADH [peroxisome]")
(node 221 "NADH [peroxisome]")
(node 222 "NADH [peroxisome]")
(node 223 "NADH [peroxisome]")
(node 224 "NADH [peroxisome]")
(node 225 "NADH [peroxisome]")
(node 226 "NADH [peroxisome]")
(node 227 "NADH [peroxisome]")
(node 228 "NADH [peroxisome]")
(node 229 "NADH [peroxisome]")
(node 230 "NADH [peroxisome]")
(node 231 "NADH [peroxisome]")
(node 232 "NADH [peroxisome]")
(node 233 "NADH [peroxisome]")
(node 234 "NADH [peroxisome]")
(node 235 "NADH [peroxisome]")
(node 236 "NADH [peroxisome]")
(node 237 "NADP(+) [peroxisome]")
(node 238 "NADP(+) [peroxisome]")
(node 239 "NADP(+) [peroxisome]")
(node 240 "NADP(+) [peroxisome]")
(node 241 "NADP(+) [peroxisome]")
(node 242 "NADPH [peroxisome]")
(node 243 "NADPH [peroxisome]")
(node 244 "NADPH [peroxisome]")
(node 245 "NADPH [peroxisome]")
(node 246 "NADPH [peroxisome]")
(node 247 "oxygen [peroxisome]")
(node 248 "oxygen [peroxisome]")
(node 249 "oxygen [peroxisome]")
(node 250 "oxygen [peroxisome]")
(node 251 "oxygen [peroxisome]")
(node 252 "oxygen [peroxisome]")
(node 253 "oxygen [peroxisome]")
(node 254 "oxygen [peroxisome]")
(node 255 "oxygen [peroxisome]")
(node 256 "oxygen [peroxisome]")
(node 257 "oxygen [peroxisome]")
(node 258 "oxygen [peroxisome]")
(node 259 "oxygen [peroxisome]")
(node 260 "oxygen [peroxisome]")
(node 261 "oxygen [peroxisome]")
(node 262 "oxygen [peroxisome]")
(node 263 "oxygen [peroxisome]")
(node 264 "H+ [peroxisome]")
(node 265 "H+ [peroxisome]")
(node 266 "H+ [peroxisome]")
(node 267 "H+ [peroxisome]")
(node 268 "H+ [peroxisome]")
(node 269 "H+ [peroxisome]")
(node 270 "H+ [peroxisome]")
(node 271 "H+ [peroxisome]")
(node 272 "H+ [peroxisome]")
(node 273 "H+ [peroxisome]")
(node 274 "H+ [peroxisome]")
(node 275 "H+ [peroxisome]")
(node 276 "H+ [peroxisome]")
(node 277 "H+ [peroxisome]")
(node 278 "H+ [peroxisome]")
(node 279 "H+ [peroxisome]")
(node 280 "H+ [peroxisome]")
(node 281 "H+ [peroxisome]")
(node 282 "H+ [peroxisome]")
(node 283 "H+ [peroxisome]")
(node 284 "H+ [peroxisome]")
(node 285 "H+ [peroxisome]")
(node 286 "H+ [peroxisome]")
(node 287 "H+ [peroxisome]")
(node 288 "H2O [peroxisome]")
(node 289 "H2O [peroxisome]")
(node 290 "H2O [peroxisome]")
(node 291 "H2O [peroxisome]")
(node 292 "H2O [peroxisome]")
(node 293 "H2O [peroxisome]")
(node 294 "H2O [peroxisome]")
(node 295 "H2O [peroxisome]")
(node 296 "H2O [peroxisome]")
(node 297 "H2O [peroxisome]")
(node 298 "H2O [peroxisome]")
(node 299 "H2O [peroxisome]")
(node 300 "H2O [peroxisome]")
(node 301 "H2O [peroxisome]")
(node 302 "H2O [peroxisome]")
(node 303 "H2O [peroxisome]")
(node 304 "H2O [peroxisome]")
(node 305 "H2O [peroxisome]")
(node 306 "H2O [peroxisome]")
(node 307 "H2O [peroxisome]")
(node 308 "H2O [peroxisome]")
(node 309 "H2O [peroxisome]")
(node 310 "H2O [peroxisome]")
(node 311 "H2O [peroxisome]")
)
(property  0 int "nbClones"
(default "0" "0")
(node 12 "21")
(node 13 "13")
(node 14 "20")
(node 16 "38")
(node 19 "11")
(node 22 "20")
(node 24 "4")
(node 29 "20")
(node 30 "19")
(node 35 "20")
(node 48 "45")
(node 49 "39")
(node 105 "21")
(node 106 "21")
(node 107 "21")
(node 108 "21")
(node 109 "21")
(node 110 "21")
(node 111 "21")
(node 112 "21")
(node 113 "21")
(node 114 "21")
(node 115 "21")
(node 116 "21")
(node 117 "21")
(node 118 "21")
(node 119 "21")
(node 120 "21")
(node 121 "21")
(node 122 "13")
(node 123 "13")
(node 124 "13")
(node 125 "13")
(node 126 "13")
(node 127 "13")
(node 128 "13")
(node 129 "13")
(node 130 "13")
(node 131 "20")
(node 132 "20")
(node 133 "20")
(node 134 "20")
(node 135 "20")
(node 136 "20")
(node 137 "20")
(node 138 "20")
(node 139 "20")
(node 140 "38")
(node 141 "38")
(node 142 "38")
(node 143 "38")
(node 144 "38")
(node 145 "38")
(node 146 "38")
(node 147 "38")
(node 148 "38")
(node 149 "38")
(node 150 "38")
(node 151 "38")
(node 152 "38")
(node 153 "38")
(node 154 "38")
(node 155 "38")
(node 156 "38")
(node 157 "38")
(node 158 "38")
(node 159 "38")
(node 160 "38")
(node 161 "38")
(node 162 "38")
(node 163 "38")
(node 164 "38")
(node 165 "38")
(node 166 "38")
(node 167 "38")
(node 168 "38")
(node 169 "38")
(node 170 "38")
(node 171 "38")
(node 172 "38")
(node 173 "38")
(node 174 "11")
(node 175 "11")
(node 176 "11")
(node 177 "11")
(node 178 "11")
(node 179 "11")
(node 180 "11")
(node 181 "11")
(node 182 "11")
(node 183 "20")
(node 184 "20")
(node 185 "20")
(node 186 "20")
(node 187 "20")
(node 188 "20")
(node 189 "20")
(node 190 "20")
(node 191 "20")
(node 192 "20")
(node 193 "20")
(node 194 "20")
(node 195 "20")
(node 196 "20")
(node 197 "20")
(node 198 "20")
(node 199 "20")
(node 200 "4")
(node 201 "4")
(node 202 "4")
(node 203 "20")
(node 204 "20")
(node 205 "20")
(node 206 "20")
(node 207 "20")
(node 208 "20")
(node 209 "20")
(node 210 "20")
(node 211 "20")
(node 212 "20")
(node 213 "20")
(node 214 "20")
(node 215 "20")
(node 216 "20")
(node 217 "20")
(node 218 "20")
(node 219 "20")
(node 220 "19")
(node 221 "19")
(node 222 "19")
(node 223 "19")
(node 224 "19")
(node 225 "19")
(node 226 "19")
(node 227 "19")
(node 228 "19")
(node 229 "19")
(node 230 "19")
(node 231 "19")
(node 232 "19")
(node 233 "19")
(node 234 "19")
(node 235 "19")
(node 236 "19")
(node 237 "6")
(node 238 "6")
(node 239 "6")
(node 240 "6")
(node 241 "6")
(node 242 "6")
(node 243 "6")
(node 244 "6")
(node 245 "6")
(node 246 "6")
(node 247 "20")
(node 248 "20")
(node 249 "20")
(node 250 "20")
(node 251 "20")
(node 252 "20")
(node 253 "20")
(node 254 "20")
(node 255 "20")
(node 256 "20")
(node 257 "20")
(node 258 "20")
(node 259 "20")
(node 260 "20")
(node 261 "20")
(node 262 "20")
(node 263 "20")
(node 264 "45")
(node 265 "45")
(node 266 "45")
(node 267 "45")
(node 268 "45")
(node 269 "45")
(node 270 "45")
(node 271 "45")
(node 272 "45")
(node 273 "45")
(node 274 "45")
(node 275 "45")
(node 276 "45")
(node 277 "45")
(node 278 "45")
(node 279 "45")
(node 280 "45")
(node 281 "45")
(node 282 "45")
(node 283 "45")
(node 284 "45")
(node 285 "45")
(node 286 "45")
(node 287 "45")
(node 288 "39")
(node 289 "39")
(node 290 "39")
(node 291 "39")
(node 292 "39")
(node 293 "39")
(node 294 "39")
(node 295 "39")
(node 296 "39")
(node 297 "39")
(node 298 "39")
(node 299 "39")
(node 300 "39")
(node 301 "39")
(node 302 "39")
(node 303 "39")
(node 304 "39")
(node 305 "39")
(node 306 "39")
(node 307 "39")
(node 308 "39")
(node 309 "39")
(node 310 "39")
(node 311 "39")
)
(property  0 vector<string> "occursIn"
(default "()" "()")
)
(property  0 string "outsideCompartment"
(default "" "")
)
(property  0 bool "outsideMembrane"
(default "false" "false")
)
(property  0 string "proteinAssociation"
(default "" "")
)
(property  0 bool "reaction"
(default "false" "false")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 56 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 60 "true")
(node 61 "true")
(node 62 "true")
(node 63 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
(node 96 "true")
(node 97 "true")
(node 98 "true")
(node 99 "true")
(node 100 "true")
(node 101 "true")
(node 102 "true")
(node 103 "true")
(node 104 "true")
)
(property  0 bool "reversible"
(default "false" "false")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 56 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 60 "true")
(node 61 "true")
(node 62 "true")
(node 63 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
(node 96 "true")
(node 97 "true")
(node 98 "true")
(node 99 "true")
(node 100 "true")
(node 101 "true")
(node 102 "true")
(node 103 "true")
(node 104 "true")
(edge 0 "true")
(edge 1 "true")
(edge 2 "true")
(edge 3 "true")
(edge 4 "true")
(edge 5 "true")
(edge 6 "true")
(edge 7 "true")
(edge 8 "true")
(edge 9 "true")
(edge 10 "true")
(edge 11 "true")
(edge 12 "true")
(edge 13 "true")
(edge 14 "true")
(edge 15 "true")
(edge 16 "true")
(edge 17 "true")
(edge 18 "true")
(edge 19 "true")
(edge 20 "true")
(edge 21 "true")
(edge 22 "true")
(edge 23 "true")
(edge 24 "true")
(edge 25 "true")
(edge 26 "true")
(edge 27 "true")
(edge 28 "true")
(edge 29 "true")
(edge 30 "true")
(edge 31 "true")
(edge 32 "true")
(edge 33 "true")
(edge 34 "true")
(edge 35 "true")
(edge 36 "true")
(edge 37 "true")
(edge 38 "true")
(edge 39 "true")
(edge 40 "true")
(edge 41 "true")
(edge 42 "true")
(edge 43 "true")
(edge 44 "true")
(edge 45 "true")
(edge 46 "true")
(edge 47 "true")
(edge 48 "true")
(edge 49 "true")
(edge 50 "true")
(edge 51 "true")
(edge 52 "true")
(edge 53 "true")
(edge 54 "true")
(edge 55 "true")
(edge 56 "true")
(edge 57 "true")
(edge 58 "true")
(edge 59 "true")
(edge 60 "true")
(edge 61 "true")
(edge 62 "true")
(edge 63 "true")
(edge 64 "true")
(edge 65 "true")
(edge 66 "true")
(edge 67 "true")
(edge 68 "true")
(edge 69 "true")
(edge 70 "true")
(edge 71 "true")
(edge 72 "true")
(edge 73 "true")
(edge 74 "true")
(edge 75 "true")
(edge 76 "true")
(edge 77 "true")
(edge 78 "true")
(edge 79 "true")
(edge 80 "true")
(edge 81 "true")
(edge 82 "true")
(edge 83 "true")
(edge 84 "true")
(edge 85 "true")
(edge 86 "true")
(edge 87 "true")
(edge 88 "true")
(edge 89 "true")
(edge 90 "true")
(edge 91 "true")
(edge 92 "true")
(edge 93 "true")
(edge 94 "true")
(edge 95 "true")
(edge 96 "true")
(edge 97 "true")
(edge 98 "true")
(edge 99 "true")
(edge 100 "true")
(edge 101 "true")
(edge 102 "true")
(edge 103 "true")
(edge 104 "true")
(edge 105 "true")
(edge 106 "true")
(edge 107 "true")
(edge 108 "true")
(edge 109 "true")
(edge 110 "true")
(edge 111 "true")
(edge 112 "true")
(edge 113 "true")
(edge 114 "true")
(edge 115 "true")
(edge 116 "true")
(edge 117 "true")
(edge 118 "true")
(edge 119 "true")
(edge 120 "true")
(edge 121 "true")
(edge 122 "true")
(edge 123 "true")
(edge 124 "true")
(edge 125 "true")
(edge 126 "true")
(edge 127 "true")
(edge 128 "true")
(edge 129 "true")
(edge 130 "true")
(edge 131 "true")
(edge 132 "true")
(edge 133 "true")
(edge 134 "true")
(edge 135 "true")
(edge 136 "true")
(edge 137 "true")
(edge 138 "true")
(edge 139 "true")
(edge 140 "true")
(edge 141 "true")
(edge 142 "true")
(edge 143 "true")
(edge 144 "true")
(edge 145 "true")
(edge 146 "true")
(edge 147 "true")
(edge 148 "true")
(edge 149 "true")
(edge 150 "true")
(edge 151 "true")
(edge 152 "true")
(edge 153 "true")
(edge 154 "true")
(edge 155 "true")
(edge 156 "true")
(edge 157 "true")
(edge 158 "true")
(edge 159 "true")
(edge 160 "true")
(edge 161 "true")
(edge 162 "true")
(edge 163 "true")
(edge 164 "true")
(edge 165 "true")
(edge 166 "true")
(edge 167 "true")
(edge 168 "true")
(edge 169 "true")
(edge 170 "true")
(edge 171 "true")
(edge 172 "true")
(edge 173 "true")
(edge 174 "true")
(edge 175 "true")
(edge 176 "true")
(edge 177 "true")
(edge 178 "true")
(edge 179 "true")
(edge 180 "true")
(edge 181 "true")
(edge 182 "true")
(edge 183 "true")
(edge 184 "true")
(edge 185 "true")
(edge 186 "true")
(edge 187 "true")
(edge 188 "true")
(edge 189 "true")
(edge 190 "true")
(edge 191 "true")
(edge 192 "true")
(edge 193 "true")
(edge 194 "true")
(edge 195 "true")
(edge 196 "true")
(edge 197 "true")
(edge 198 "true")
(edge 199 "true")
(edge 200 "true")
(edge 201 "true")
(edge 202 "true")
(edge 203 "true")
(edge 204 "true")
(edge 205 "true")
(edge 206 "true")
(edge 207 "true")
(edge 208 "true")
(edge 209 "true")
(edge 210 "true")
(edge 211 "true")
(edge 212 "true")
(edge 213 "true")
(edge 214 "true")
(edge 215 "true")
(edge 216 "true")
(edge 217 "true")
(edge 218 "true")
(edge 219 "true")
(edge 220 "true")
(edge 221 "true")
(edge 222 "true")
(edge 223 "true")
(edge 224 "true")
(edge 225 "true")
(edge 226 "true")
(edge 227 "true")
(edge 228 "true")
(edge 229 "true")
(edge 230 "true")
(edge 231 "true")
(edge 232 "true")
(edge 233 "true")
(edge 234 "true")
(edge 235 "true")
(edge 236 "true")
(edge 237 "true")
(edge 238 "true")
(edge 239 "true")
(edge 240 "true")
(edge 241 "true")
(edge 242 "true")
(edge 243 "true")
(edge 244 "true")
(edge 245 "true")
(edge 246 "true")
(edge 247 "true")
(edge 248 "true")
(edge 249 "true")
(edge 250 "true")
(edge 251 "true")
(edge 252 "true")
(edge 253 "true")
(edge 254 "true")
(edge 255 "true")
(edge 256 "true")
(edge 257 "true")
(edge 258 "true")
(edge 259 "true")
(edge 260 "true")
(edge 261 "true")
(edge 262 "true")
(edge 263 "true")
(edge 264 "true")
(edge 265 "true")
(edge 266 "true")
(edge 267 "true")
(edge 268 "true")
(edge 269 "true")
(edge 270 "true")
(edge 271 "true")
(edge 272 "true")
(edge 273 "true")
(edge 274 "true")
(edge 275 "true")
(edge 276 "true")
(edge 277 "true")
(edge 278 "true")
(edge 279 "true")
(edge 280 "true")
(edge 281 "true")
(edge 282 "true")
(edge 283 "true")
(edge 284 "true")
(edge 285 "true")
(edge 286 "true")
(edge 287 "true")
(edge 288 "true")
(edge 289 "true")
(edge 290 "true")
(edge 291 "true")
(edge 292 "true")
(edge 293 "true")
(edge 294 "true")
(edge 295 "true")
(edge 296 "true")
(edge 297 "true")
(edge 298 "true")
(edge 299 "true")
(edge 300 "true")
(edge 301 "true")
(edge 302 "true")
(edge 303 "true")
(edge 304 "true")
(edge 305 "true")
(edge 306 "true")
(edge 307 "true")
(edge 308 "true")
(edge 309 "true")
)
(property  0 string "sboTerm"
(default "" "")
(node 52 "SBO:0000176")
(node 53 "SBO:0000176")
(node 54 "SBO:0000176")
(node 55 "SBO:0000176")
(node 56 "SBO:0000176")
(node 57 "SBO:0000176")
(node 58 "SBO:0000176")
(node 59 "SBO:0000176")
(node 60 "SBO:0000176")
(node 61 "SBO:0000176")
(node 62 "SBO:0000176")
(node 63 "SBO:0000176")
(node 64 "SBO:0000176")
(node 65 "SBO:0000176")
(node 66 "SBO:0000176")
(node 67 "SBO:0000176")
(node 68 "SBO:0000176")
(node 69 "SBO:0000176")
(node 70 "SBO:0000176")
(node 71 "SBO:0000176")
(node 72 "SBO:0000176")
(node 73 "SBO:0000176")
(node 74 "SBO:0000176")
(node 75 "SBO:0000176")
(node 76 "SBO:0000176")
(node 77 "SBO:0000176")
(node 78 "SBO:0000176")
(node 79 "SBO:0000176")
(node 80 "SBO:0000176")
(node 81 "SBO:0000176")
(node 82 "SBO:0000176")
(node 83 "SBO:0000176")
(node 84 "SBO:0000176")
(node 85 "SBO:0000176")
(node 86 "SBO:0000176")
(node 87 "SBO:0000176")
(node 88 "SBO:0000176")
(node 89 "SBO:0000176")
(node 90 "SBO:0000176")
(node 91 "SBO:0000176")
(node 92 "SBO:0000176")
(node 93 "SBO:0000176")
(node 94 "SBO:0000176")
(node 95 "SBO:0000176")
(node 96 "SBO:0000176")
(node 97 "SBO:0000176")
(node 98 "SBO:0000176")
(node 99 "SBO:0000176")
(node 100 "SBO:0000176")
(node 101 "SBO:0000176")
(node 102 "SBO:0000176")
)
(property  0 string "speciesType"
(default "" "")
(node 0 "(S)-3-hydroxydecanoyl-CoA [peroxisome]")
(node 1 "(S)-3-hydroxyhexacosanoyl-CoA [peroxisome]")
(node 2 "(S)-3-hydroxylauroyl-CoA [peroxisome]")
(node 3 "(S)-3-hydroxypalmitoyl-CoA [peroxisome]")
(node 4 "(S)-3-hydroxytetradecanoyl-CoA [peroxisome]")
(node 5 "3-hydroxyoctadecanoyl-CoA [peroxisome]")
(node 6 "3-oxodecanoyl-CoA [peroxisome]")
(node 7 "3-oxohexacosanoyl-CoA [peroxisome]")
(node 8 "3-oxolauroyl-CoA [peroxisome]")
(node 9 "3-oxooctadecanoyl-CoA [peroxisome]")
(node 10 "3-oxopalmitoyl-CoA [peroxisome]")
(node 11 "3-oxotetradecanoyl-CoA [peroxisome]")
(node 12 "acetyl-CoA [peroxisome]")
(node 13 "AMP [peroxisome]")
(node 14 "ATP [peroxisome]")
(node 15 "cerotate [peroxisome]")
(node 16 "coenzyme A [peroxisome]")
(node 17 "decanoate [peroxisome]")
(node 18 "decanoyl-CoA [peroxisome]")
(node 19 "pyrophosphate [peroxisome]")
(node 20 "hexacosanoyl-CoA [peroxisome]")
(node 21 "hexadec-2-enoyl-CoA [peroxisome]")
(node 22 "hydrogen peroxide [peroxisome]")
(node 23 "laurate [peroxisome]")
(node 24 "lauroyl-CoA [peroxisome]")
(node 25 "lignoceric acid [peroxisome]")
(node 26 "myristate [peroxisome]")
(node 27 "myristoleate [peroxisome]")
(node 28 "myristoyl-CoA [peroxisome]")
(node 29 "NAD [peroxisome]")
(node 30 "NADH [peroxisome]")
(node 31 "octadec-9-ynoyl-CoA [peroxisome]")
(node 32 "octanoate [peroxisome]")
(node 33 "octanoyl-CoA [peroxisome]")
(node 34 "oleoyl-CoA [peroxisome]")
(node 35 "oxygen [peroxisome]")
(node 36 "palmitate [peroxisome]")
(node 37 "palmitoleate [peroxisome]")
(node 38 "palmitoyl-CoA [peroxisome]")
(node 39 "stearate [peroxisome]")
(node 40 "stearoyl-CoA [peroxisome]")
(node 41 "tetracosanoyl-CoA [peroxisome]")
(node 42 "tetradecenoyl-CoA [peroxisome]")
(node 43 "trans-dec-2-enoyl-CoA [peroxisome]")
(node 44 "trans-dodec-2-enoyl-CoA [peroxisome]")
(node 45 "trans-hexacos-2-enoyl-CoA [peroxisome]")
(node 46 "trans-octadec-2-enoyl-CoA [peroxisome]")
(node 47 "trans-tetradec-2-enoyl-CoA [peroxisome]")
(node 48 "H+ [peroxisome]")
(node 49 "H2O [peroxisome]")
(node 50 "butyrate [peroxisome]")
(node 51 "butyryl-CoA [peroxisome]")
(node 105 "acetyl-CoA [peroxisome]")
(node 106 "acetyl-CoA [peroxisome]")
(node 107 "acetyl-CoA [peroxisome]")
(node 108 "acetyl-CoA [peroxisome]")
(node 109 "acetyl-CoA [peroxisome]")
(node 110 "acetyl-CoA [peroxisome]")
(node 111 "acetyl-CoA [peroxisome]")
(node 112 "acetyl-CoA [peroxisome]")
(node 113 "acetyl-CoA [peroxisome]")
(node 114 "acetyl-CoA [peroxisome]")
(node 115 "acetyl-CoA [peroxisome]")
(node 116 "acetyl-CoA [peroxisome]")
(node 117 "acetyl-CoA [peroxisome]")
(node 118 "acetyl-CoA [peroxisome]")
(node 119 "acetyl-CoA [peroxisome]")
(node 120 "acetyl-CoA [peroxisome]")
(node 121 "acetyl-CoA [peroxisome]")
(node 122 "AMP [peroxisome]")
(node 123 "AMP [peroxisome]")
(node 124 "AMP [peroxisome]")
(node 125 "AMP [peroxisome]")
(node 126 "AMP [peroxisome]")
(node 127 "AMP [peroxisome]")
(node 128 "AMP [peroxisome]")
(node 129 "AMP [peroxisome]")
(node 130 "AMP [peroxisome]")
(node 131 "ATP [peroxisome]")
(node 132 "ATP [peroxisome]")
(node 133 "ATP [peroxisome]")
(node 134 "ATP [peroxisome]")
(node 135 "ATP [peroxisome]")
(node 136 "ATP [peroxisome]")
(node 137 "ATP [peroxisome]")
(node 138 "ATP [peroxisome]")
(node 139 "ATP [peroxisome]")
(node 140 "coenzyme A [peroxisome]")
(node 141 "coenzyme A [peroxisome]")
(node 142 "coenzyme A [peroxisome]")
(node 143 "coenzyme A [peroxisome]")
(node 144 "coenzyme A [peroxisome]")
(node 145 "coenzyme A [peroxisome]")
(node 146 "coenzyme A [peroxisome]")
(node 147 "coenzyme A [peroxisome]")
(node 148 "coenzyme A [peroxisome]")
(node 149 "coenzyme A [peroxisome]")
(node 150 "coenzyme A [peroxisome]")
(node 151 "coenzyme A [peroxisome]")
(node 152 "coenzyme A [peroxisome]")
(node 153 "coenzyme A [peroxisome]")
(node 154 "coenzyme A [peroxisome]")
(node 155 "coenzyme A [peroxisome]")
(node 156 "coenzyme A [peroxisome]")
(node 157 "coenzyme A [peroxisome]")
(node 158 "coenzyme A [peroxisome]")
(node 159 "coenzyme A [peroxisome]")
(node 160 "coenzyme A [peroxisome]")
(node 161 "coenzyme A [peroxisome]")
(node 162 "coenzyme A [peroxisome]")
(node 163 "coenzyme A [peroxisome]")
(node 164 "coenzyme A [peroxisome]")
(node 165 "coenzyme A [peroxisome]")
(node 166 "coenzyme A [peroxisome]")
(node 167 "coenzyme A [peroxisome]")
(node 168 "coenzyme A [peroxisome]")
(node 169 "coenzyme A [peroxisome]")
(node 170 "coenzyme A [peroxisome]")
(node 171 "coenzyme A [peroxisome]")
(node 172 "coenzyme A [peroxisome]")
(node 173 "coenzyme A [peroxisome]")
(node 174 "pyrophosphate [peroxisome]")
(node 175 "pyrophosphate [peroxisome]")
(node 176 "pyrophosphate [peroxisome]")
(node 177 "pyrophosphate [peroxisome]")
(node 178 "pyrophosphate [peroxisome]")
(node 179 "pyrophosphate [peroxisome]")
(node 180 "pyrophosphate [peroxisome]")
(node 181 "pyrophosphate [peroxisome]")
(node 182 "pyrophosphate [peroxisome]")
(node 183 "hydrogen peroxide [peroxisome]")
(node 184 "hydrogen peroxide [peroxisome]")
(node 185 "hydrogen peroxide [peroxisome]")
(node 186 "hydrogen peroxide [peroxisome]")
(node 187 "hydrogen peroxide [peroxisome]")
(node 188 "hydrogen peroxide [peroxisome]")
(node 189 "hydrogen peroxide [peroxisome]")
(node 190 "hydrogen peroxide [peroxisome]")
(node 191 "hydrogen peroxide [peroxisome]")
(node 192 "hydrogen peroxide [peroxisome]")
(node 193 "hydrogen peroxide [peroxisome]")
(node 194 "hydrogen peroxide [peroxisome]")
(node 195 "hydrogen peroxide [peroxisome]")
(node 196 "hydrogen peroxide [peroxisome]")
(node 197 "hydrogen peroxide [peroxisome]")
(node 198 "hydrogen peroxide [peroxisome]")
(node 199 "hydrogen peroxide [peroxisome]")
(node 200 "lauroyl-CoA [peroxisome]")
(node 201 "lauroyl-CoA [peroxisome]")
(node 202 "lauroyl-CoA [peroxisome]")
(node 203 "NAD [peroxisome]")
(node 204 "NAD [peroxisome]")
(node 205 "NAD [peroxisome]")
(node 206 "NAD [peroxisome]")
(node 207 "NAD [peroxisome]")
(node 208 "NAD [peroxisome]")
(node 209 "NAD [peroxisome]")
(node 210 "NAD [peroxisome]")
(node 211 "NAD [peroxisome]")
(node 212 "NAD [peroxisome]")
(node 213 "NAD [peroxisome]")
(node 214 "NAD [peroxisome]")
(node 215 "NAD [peroxisome]")
(node 216 "NAD [peroxisome]")
(node 217 "NAD [peroxisome]")
(node 218 "NAD [peroxisome]")
(node 219 "NAD [peroxisome]")
(node 220 "NADH [peroxisome]")
(node 221 "NADH [peroxisome]")
(node 222 "NADH [peroxisome]")
(node 223 "NADH [peroxisome]")
(node 224 "NADH [peroxisome]")
(node 225 "NADH [peroxisome]")
(node 226 "NADH [peroxisome]")
(node 227 "NADH [peroxisome]")
(node 228 "NADH [peroxisome]")
(node 229 "NADH [peroxisome]")
(node 230 "NADH [peroxisome]")
(node 231 "NADH [peroxisome]")
(node 232 "NADH [peroxisome]")
(node 233 "NADH [peroxisome]")
(node 234 "NADH [peroxisome]")
(node 235 "NADH [peroxisome]")
(node 236 "NADH [peroxisome]")
(node 237 "NADP(+) [peroxisome]")
(node 238 "NADP(+) [peroxisome]")
(node 239 "NADP(+) [peroxisome]")
(node 240 "NADP(+) [peroxisome]")
(node 241 "NADP(+) [peroxisome]")
(node 242 "NADPH [peroxisome]")
(node 243 "NADPH [peroxisome]")
(node 244 "NADPH [peroxisome]")
(node 245 "NADPH [peroxisome]")
(node 246 "NADPH [peroxisome]")
(node 247 "oxygen [peroxisome]")
(node 248 "oxygen [peroxisome]")
(node 249 "oxygen [peroxisome]")
(node 250 "oxygen [peroxisome]")
(node 251 "oxygen [peroxisome]")
(node 252 "oxygen [peroxisome]")
(node 253 "oxygen [peroxisome]")
(node 254 "oxygen [peroxisome]")
(node 255 "oxygen [peroxisome]")
(node 256 "oxygen [peroxisome]")
(node 257 "oxygen [peroxisome]")
(node 258 "oxygen [peroxisome]")
(node 259 "oxygen [peroxisome]")
(node 260 "oxygen [peroxisome]")
(node 261 "oxygen [peroxisome]")
(node 262 "oxygen [peroxisome]")
(node 263 "oxygen [peroxisome]")
(node 264 "H+ [peroxisome]")
(node 265 "H+ [peroxisome]")
(node 266 "H+ [peroxisome]")
(node 267 "H+ [peroxisome]")
(node 268 "H+ [peroxisome]")
(node 269 "H+ [peroxisome]")
(node 270 "H+ [peroxisome]")
(node 271 "H+ [peroxisome]")
(node 272 "H+ [peroxisome]")
(node 273 "H+ [peroxisome]")
(node 274 "H+ [peroxisome]")
(node 275 "H+ [peroxisome]")
(node 276 "H+ [peroxisome]")
(node 277 "H+ [peroxisome]")
(node 278 "H+ [peroxisome]")
(node 279 "H+ [peroxisome]")
(node 280 "H+ [peroxisome]")
(node 281 "H+ [peroxisome]")
(node 282 "H+ [peroxisome]")
(node 283 "H+ [peroxisome]")
(node 284 "H+ [peroxisome]")
(node 285 "H+ [peroxisome]")
(node 286 "H+ [peroxisome]")
(node 287 "H+ [peroxisome]")
(node 288 "H2O [peroxisome]")
(node 289 "H2O [peroxisome]")
(node 290 "H2O [peroxisome]")
(node 291 "H2O [peroxisome]")
(node 292 "H2O [peroxisome]")
(node 293 "H2O [peroxisome]")
(node 294 "H2O [peroxisome]")
(node 295 "H2O [peroxisome]")
(node 296 "H2O [peroxisome]")
(node 297 "H2O [peroxisome]")
(node 298 "H2O [peroxisome]")
(node 299 "H2O [peroxisome]")
(node 300 "H2O [peroxisome]")
(node 301 "H2O [peroxisome]")
(node 302 "H2O [peroxisome]")
(node 303 "H2O [peroxisome]")
(node 304 "H2O [peroxisome]")
(node 305 "H2O [peroxisome]")
(node 306 "H2O [peroxisome]")
(node 307 "H2O [peroxisome]")
(node 308 "H2O [peroxisome]")
(node 309 "H2O [peroxisome]")
(node 310 "H2O [peroxisome]")
(node 311 "H2O [peroxisome]")
)
(property  0 double "stoichiometry"
(default "0" "0")
(edge 0 "1")
(edge 1 "1")
(edge 2 "1")
(edge 3 "1")
(edge 4 "1")
(edge 5 "1")
(edge 6 "1")
(edge 7 "1")
(edge 8 "1")
(edge 9 "1")
(edge 10 "1")
(edge 11 "1")
(edge 12 "1")
(edge 13 "1")
(edge 14 "1")
(edge 15 "1")
(edge 16 "1")
(edge 17 "1")
(edge 18 "1")
(edge 19 "1")
(edge 20 "1")
(edge 21 "1")
(edge 22 "1")
(edge 23 "1")
(edge 24 "1")
(edge 25 "1")
(edge 26 "1")
(edge 27 "1")
(edge 28 "1")
(edge 29 "1")
(edge 30 "1")
(edge 31 "1")
(edge 32 "1")
(edge 33 "1")
(edge 34 "1")
(edge 35 "1")
(edge 36 "1")
(edge 37 "1")
(edge 38 "1")
(edge 39 "1")
(edge 40 "1")
(edge 41 "1")
(edge 42 "1")
(edge 43 "1")
(edge 44 "1")
(edge 45 "1")
(edge 46 "1")
(edge 47 "1")
(edge 48 "1")
(edge 49 "1")
(edge 50 "1")
(edge 51 "1")
(edge 52 "1")
(edge 53 "1")
(edge 54 "1")
(edge 55 "1")
(edge 56 "1")
(edge 57 "1")
(edge 58 "1")
(edge 59 "1")
(edge 60 "1")
(edge 61 "1")
(edge 62 "1")
(edge 63 "1")
(edge 64 "1")
(edge 65 "1")
(edge 66 "1")
(edge 67 "1")
(edge 68 "1")
(edge 69 "1")
(edge 70 "1")
(edge 71 "1")
(edge 72 "1")
(edge 73 "1")
(edge 74 "1")
(edge 75 "1")
(edge 76 "1")
(edge 77 "1")
(edge 78 "1")
(edge 79 "1")
(edge 80 "1")
(edge 81 "1")
(edge 82 "1")
(edge 83 "1")
(edge 84 "1")
(edge 85 "1")
(edge 86 "1")
(edge 87 "1")
(edge 88 "1")
(edge 89 "1")
(edge 90 "1")
(edge 91 "1")
(edge 92 "1")
(edge 93 "1")
(edge 94 "1")
(edge 95 "1")
(edge 96 "1")
(edge 97 "1")
(edge 98 "1")
(edge 99 "1")
(edge 100 "1")
(edge 101 "1")
(edge 102 "1")
(edge 103 "1")
(edge 104 "1")
(edge 105 "1")
(edge 106 "1")
(edge 107 "1")
(edge 108 "1")
(edge 109 "7")
(edge 110 "8")
(edge 111 "8")
(edge 112 "9")
(edge 113 "9")
(edge 114 "9")
(edge 115 "9")
(edge 116 "9")
(edge 117 "7")
(edge 118 "4")
(edge 119 "3")
(edge 120 "1")
(edge 121 "1")
(edge 122 "1")
(edge 123 "1")
(edge 124 "1")
(edge 125 "1")
(edge 126 "1")
(edge 127 "1")
(edge 128 "1")
(edge 129 "1")
(edge 130 "1")
(edge 131 "1")
(edge 132 "1")
(edge 133 "1")
(edge 134 "1")
(edge 135 "1")
(edge 136 "1")
(edge 137 "1")
(edge 138 "1")
(edge 139 "1")
(edge 140 "1")
(edge 141 "1")
(edge 142 "1")
(edge 143 "1")
(edge 144 "6")
(edge 145 "7")
(edge 146 "7")
(edge 147 "8")
(edge 148 "8")
(edge 149 "8")
(edge 150 "8")
(edge 151 "8")
(edge 152 "6")
(edge 153 "3")
(edge 154 "3")
(edge 155 "1")
(edge 156 "1")
(edge 157 "1")
(edge 158 "1")
(edge 159 "1")
(edge 160 "1")
(edge 161 "1")
(edge 162 "1")
(edge 163 "1")
(edge 164 "1")
(edge 165 "1")
(edge 166 "1")
(edge 167 "1")
(edge 168 "1")
(edge 169 "1")
(edge 170 "1")
(edge 171 "1")
(edge 172 "1")
(edge 173 "1")
(edge 174 "1")
(edge 175 "1")
(edge 176 "1")
(edge 177 "1")
(edge 178 "1")
(edge 179 "1")
(edge 180 "1")
(edge 181 "1")
(edge 182 "1")
(edge 183 "1")
(edge 184 "1")
(edge 185 "1")
(edge 186 "1")
(edge 187 "5")
(edge 188 "7")
(edge 189 "6")
(edge 190 "8")
(edge 191 "7")
(edge 192 "8")
(edge 193 "7")
(edge 194 "6")
(edge 195 "6")
(edge 196 "3")
(edge 197 "3")
(edge 198 "1")
(edge 199 "1")
(edge 200 "1")
(edge 201 "1")
(edge 202 "1")
(edge 203 "1")
(edge 204 "1")
(edge 205 "1")
(edge 206 "1")
(edge 207 "6")
(edge 208 "7")
(edge 209 "7")
(edge 210 "8")
(edge 211 "8")
(edge 212 "8")
(edge 213 "8")
(edge 214 "8")
(edge 215 "6")
(edge 216 "3")
(edge 217 "3")
(edge 218 "1")
(edge 219 "1")
(edge 220 "1")
(edge 221 "1")
(edge 222 "1")
(edge 223 "1")
(edge 224 "6")
(edge 225 "7")
(edge 226 "7")
(edge 227 "8")
(edge 228 "8")
(edge 229 "8")
(edge 230 "8")
(edge 231 "8")
(edge 232 "6")
(edge 233 "3")
(edge 234 "3")
(edge 235 "1")
(edge 236 "1")
(edge 237 "2")
(edge 238 "1")
(edge 239 "1")
(edge 240 "1")
(edge 241 "1")
(edge 242 "2")
(edge 243 "1")
(edge 244 "1")
(edge 245 "1")
(edge 246 "1")
(edge 247 "1")
(edge 248 "1")
(edge 249 "1")
(edge 250 "1")
(edge 251 "5")
(edge 252 "7")
(edge 253 "6")
(edge 254 "8")
(edge 255 "7")
(edge 256 "8")
(edge 257 "7")
(edge 258 "6")
(edge 259 "6")
(edge 260 "3")
(edge 261 "3")
(edge 262 "1")
(edge 263 "1")
(edge 264 "1")
(edge 265 "1")
(edge 266 "1")
(edge 267 "1")
(edge 268 "6")
(edge 269 "6")
(edge 270 "7")
(edge 271 "7")
(edge 272 "8")
(edge 273 "6")
(edge 274 "7")
(edge 275 "8")
(edge 276 "5")
(edge 277 "3")
(edge 278 "3")
(edge 279 "1")
(edge 280 "1")
(edge 281 "1")
(edge 282 "1")
(edge 283 "1")
(edge 284 "1")
(edge 285 "1")
(edge 286 "1")
(edge 287 "1")
(edge 288 "1")
(edge 289 "1")
(edge 290 "1")
(edge 291 "1")
(edge 292 "6")
(edge 293 "7")
(edge 294 "7")
(edge 295 "8")
(edge 296 "8")
(edge 297 "8")
(edge 298 "8")
(edge 299 "8")
(edge 300 "6")
(edge 301 "3")
(edge 302 "3")
(edge 303 "1")
(edge 304 "1")
(edge 305 "1")
(edge 306 "1")
(edge 307 "1")
(edge 308 "1")
(edge 309 "1")
)
(property  0 vector<string> "subSystem"
(default "()" "()")
)
(property  0 bool "ubiquitous"
(default "false" "false")
(node 12 "true")
(node 13 "true")
(node 14 "true")
(node 16 "true")
(node 19 "true")
(node 22 "true")
(node 29 "true")
(node 30 "true")
(node 35 "true")
(node 48 "true")
(node 49 "true")
(node 105 "true")
(node 106 "true")
(node 107 "true")
(node 108 "true")
(node 109 "true")
(node 110 "true")
(node 111 "true")
(node 112 "true")
(node 113 "true")
(node 114 "true")
(node 115 "true")
(node 116 "true")
(node 117 "true")
(node 118 "true")
(node 119 "true")
(node 120 "true")
(node 121 "true")
(node 122 "true")
(node 123 "true")
(node 124 "true")
(node 125 "true")
(node 126 "true")
(node 127 "true")
(node 128 "true")
(node 129 "true")
(node 130 "true")
(node 131 "true")
(node 132 "true")
(node 133 "true")
(node 134 "true")
(node 135 "true")
(node 136 "true")
(node 137 "true")
(node 138 "true")
(node 139 "true")
(node 140 "true")
(node 141 "true")
(node 142 "true")
(node 143 "true")
(node 144 "true")
(node 145 "true")
(node 146 "true")
(node 147 "true")
(node 148 "true")
(node 149 "true")
(node 150 "true")
(node 151 "true")
(node 152 "true")
(node 153 "true")
(node 154 "true")
(node 155 "true")
(node 156 "true")
(node 157 "true")
(node 158 "true")
(node 159 "true")
(node 160 "true")
(node 161 "true")
(node 162 "true")
(node 163 "true")
(node 164 "true")
(node 165 "true")
(node 166 "true")
(node 167 "true")
(node 168 "true")
(node 169 "true")
(node 170 "true")
(node 171 "true")
(node 172 "true")
(node 173 "true")
(node 174 "true")
(node 175 "true")
(node 176 "true")
(node 177 "true")
(node 178 "true")
(node 179 "true")
(node 180 "true")
(node 181 "true")
(node 182 "true")
(node 183 "true")
(node 184 "true")
(node 185 "true")
(node 186 "true")
(node 187 "true")
(node 188 "true")
(node 189 "true")
(node 190 "true")
(node 191 "true")
(node 192 "true")
(node 193 "true")
(node 194 "true")
(node 195 "true")
(node 196 "true")
(node 197 "true")
(node 198 "true")
(node 199 "true")
(node 203 "true")
(node 204 "true")
(node 205 "true")
(node 206 "true")
(node 207 "true")
(node 208 "true")
(node 209 "true")
(node 210 "true")
(node 211 "true")
(node 212 "true")
(node 213 "true")
(node 214 "true")
(node 215 "true")
(node 216 "true")
(node 217 "true")
(node 218 "true")
(node 219 "true")
(node 220 "true")
(node 221 "true")
(node 222 "true")
(node 223 "true")
(node 224 "true")
(node 225 "true")
(node 226 "true")
(node 227 "true")
(node 228 "true")
(node 229 "true")
(node 230 "true")
(node 231 "true")
(node 232 "true")
(node 233 "true")
(node 234 "true")
(node 235 "true")
(node 236 "true")
(node 237 "true")
(node 238 "true")
(node 239 "true")
(node 240 "true")
(node 241 "true")
(node 242 "true")
(node 243 "true")
(node 244 "true")
(node 245 "true")
(node 246 "true")
(node 247 "true")
(node 248 "true")
(node 249 "true")
(node 250 "true")
(node 251 "true")
(node 252 "true")
(node 253 "true")
(node 254 "true")
(node 255 "true")
(node 256 "true")
(node 257 "true")
(node 258 "true")
(node 259 "true")
(node 260 "true")
(node 261 "true")
(node 262 "true")
(node 263 "true")
(node 264 "true")
(node 265 "true")
(node 266 "true")
(node 267 "true")
(node 268 "true")
(node 269 "true")
(node 270 "true")
(node 271 "true")
(node 272 "true")
(node 273 "true")
(node 274 "true")
(node 275 "true")
(node 276 "true")
(node 277 "true")
(node 278 "true")
(node 279 "true")
(node 280 "true")
(node 281 "true")
(node 282 "true")
(node 283 "true")
(node 284 "true")
(node 285 "true")
(node 286 "true")
(node 287 "true")
(node 288 "true")
(node 289 "true")
(node 290 "true")
(node 291 "true")
(node 292 "true")
(node 293 "true")
(node 294 "true")
(node 295 "true")
(node 296 "true")
(node 297 "true")
(node 298 "true")
(node 299 "true")
(node 300 "true")
(node 301 "true")
(node 302 "true")
(node 303 "true")
(node 304 "true")
(node 305 "true")
(node 306 "true")
(node 307 "true")
(node 308 "true")
(node 309 "true")
(node 310 "true")
(node 311 "true")
)
(property  0 color "viewBorderColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 double "viewBorderWidth"
(default "1" "2")
)
(property  0 color "viewColor"
(default "(255,0,0,255)" "(0,0,0,255)")
(node 1 "(102,102,204,255)")
(node 6 "(102,204,102,255)")
(node 11 "(153,102,204,255)")
(node 12 "(211,211,211,255)")
(node 13 "(211,211,211,255)")
(node 14 "(211,211,211,255)")
(node 16 "(211,211,211,255)")
(node 19 "(211,211,211,255)")
(node 22 "(211,211,211,255)")
(node 29 "(211,211,211,255)")
(node 30 "(211,211,211,255)")
(node 31 "(153,204,102,255)")
(node 35 "(211,211,211,255)")
(node 40 "(102,204,150,255)")
(node 48 "(211,211,211,255)")
(node 49 "(211,211,211,255)")
(node 51 "(102,204,127,255)")
(node 52 "(0,255,0,255)")
(node 53 "(0,255,0,255)")
(node 54 "(211,211,211,255)")
(node 55 "(0,255,0,255)")
(node 56 "(0,255,0,255)")
(node 57 "(0,255,0,255)")
(node 58 "(211,211,211,255)")
(node 59 "(0,255,0,255)")
(node 60 "(211,211,211,255)")
(node 61 "(0,255,0,255)")
(node 62 "(0,255,0,255)")
(node 63 "(211,211,211,255)")
(node 64 "(0,255,0,255)")
(node 65 "(0,255,0,255)")
(node 66 "(0,255,0,255)")
(node 67 "(211,211,211,255)")
(node 68 "(211,211,211,255)")
(node 69 "(0,255,0,255)")
(node 70 "(0,255,0,255)")
(node 71 "(0,255,0,255)")
(node 72 "(0,255,0,255)")
(node 73 "(0,255,0,255)")
(node 74 "(211,211,211,255)")
(node 75 "(0,255,0,255)")
(node 76 "(0,255,0,255)")
(node 77 "(0,255,0,255)")
(node 78 "(0,255,0,255)")
(node 79 "(0,255,0,255)")
(node 80 "(0,255,0,255)")
(node 81 "(0,255,0,255)")
(node 82 "(0,255,0,255)")
(node 83 "(211,211,211,255)")
(node 84 "(0,255,0,255)")
(node 85 "(211,211,211,255)")
(node 86 "(211,211,211,255)")
(node 87 "(0,255,0,255)")
(node 88 "(0,255,0,255)")
(node 89 "(211,211,211,255)")
(node 90 "(0,255,0,255)")
(node 91 "(0,255,0,255)")
(node 92 "(0,255,0,255)")
(node 93 "(0,255,0,255)")
(node 94 "(0,255,0,255)")
(node 95 "(0,255,0,255)")
(node 96 "(0,255,0,255)")
(node 97 "(0,255,0,255)")
(node 98 "(0,255,0,255)")
(node 99 "(211,211,211,255)")
(node 100 "(0,255,0,255)")
(node 101 "(211,211,211,255)")
(node 102 "(0,255,0,255)")
(node 103 "(211,211,211,255)")
(node 104 "(211,211,211,255)")
(node 108 "(211,211,211,255)")
(node 109 "(211,211,211,255)")
(node 118 "(211,211,211,255)")
(node 120 "(211,211,211,255)")
(node 121 "(211,211,211,255)")
(node 124 "(211,211,211,255)")
(node 133 "(211,211,211,255)")
(node 143 "(211,211,211,255)")
(node 144 "(211,211,211,255)")
(node 153 "(211,211,211,255)")
(node 155 "(211,211,211,255)")
(node 156 "(211,211,211,255)")
(node 159 "(211,211,211,255)")
(node 169 "(211,211,211,255)")
(node 171 "(211,211,211,255)")
(node 173 "(211,211,211,255)")
(node 176 "(211,211,211,255)")
(node 187 "(211,211,211,255)")
(node 196 "(211,211,211,255)")
(node 198 "(211,211,211,255)")
(node 199 "(211,211,211,255)")
(node 203 "(211,211,211,255)")
(node 205 "(211,211,211,255)")
(node 208 "(211,211,211,255)")
(node 216 "(211,211,211,255)")
(node 218 "(211,211,211,255)")
(node 219 "(211,211,211,255)")
(node 220 "(211,211,211,255)")
(node 222 "(211,211,211,255)")
(node 225 "(211,211,211,255)")
(node 233 "(211,211,211,255)")
(node 235 "(211,211,211,255)")
(node 236 "(211,211,211,255)")
(node 251 "(211,211,211,255)")
(node 260 "(211,211,211,255)")
(node 262 "(211,211,211,255)")
(node 263 "(211,211,211,255)")
(node 264 "(211,211,211,255)")
(node 266 "(211,211,211,255)")
(node 269 "(211,211,211,255)")
(node 277 "(211,211,211,255)")
(node 279 "(211,211,211,255)")
(node 280 "(211,211,211,255)")
(node 284 "(211,211,211,255)")
(node 286 "(211,211,211,255)")
(node 290 "(211,211,211,255)")
(node 301 "(211,211,211,255)")
(node 303 "(211,211,211,255)")
(node 304 "(211,211,211,255)")
(node 308 "(211,211,211,255)")
(node 310 "(211,211,211,255)")
(edge 0 "(102,204,176,255)")
(edge 1 "(102,204,176,255)")
(edge 2 "(102,204,176,255)")
(edge 3 "(102,204,176,255)")
(edge 4 "(102,204,176,255)")
(edge 5 "(102,204,176,255)")
(edge 6 "(102,204,176,255)")
(edge 7 "(102,204,176,255)")
(edge 8 "(102,204,176,255)")
(edge 9 "(102,204,176,255)")
(edge 10 "(102,204,176,255)")
(edge 11 "(102,204,176,255)")
(edge 12 "(102,176,204,255)")
(edge 13 "(102,176,204,255)")
(edge 14 "(102,176,204,255)")
(edge 15 "(102,176,204,255)")
(edge 16 "(102,176,204,255)")
(edge 17 "(102,176,204,255)")
(edge 18 "(102,176,204,255)")
(edge 19 "(102,176,204,255)")
(edge 20 "(102,176,204,255)")
(edge 21 "(102,176,204,255)")
(edge 22 "(102,176,204,255)")
(edge 23 "(102,176,204,255)")
(edge 24 "(204,102,157,255)")
(edge 25 "(204,102,157,255)")
(edge 26 "(204,102,157,255)")
(edge 27 "(204,102,157,255)")
(edge 28 "(204,102,157,255)")
(edge 29 "(204,102,157,255)")
(edge 30 "(204,102,157,255)")
(edge 31 "(204,102,157,255)")
(edge 32 "(204,102,157,255)")
(edge 33 "(204,102,157,255)")
(edge 34 "(204,102,157,255)")
(edge 35 "(204,157,102,255)")
(edge 36 "(204,157,102,255)")
(edge 37 "(204,157,102,255)")
(edge 38 "(204,157,102,255)")
(edge 39 "(204,157,102,255)")
(edge 40 "(204,157,102,255)")
(edge 41 "(204,157,102,255)")
(edge 44 "(204,157,102,255)")
(edge 45 "(204,157,102,255)")
(edge 46 "(194,204,102,255)")
(edge 47 "(139,204,102,255)")
(edge 48 "(194,204,102,255)")
(edge 49 "(139,204,102,255)")
(edge 50 "(194,204,102,255)")
(edge 51 "(194,102,204,255)")
(edge 52 "(194,102,204,255)")
(edge 53 "(204,102,102,255)")
(edge 54 "(139,204,102,255)")
(edge 55 "(204,102,102,255)")
(edge 58 "(102,204,120,255)")
(edge 59 "(102,204,120,255)")
(edge 60 "(102,204,120,255)")
(edge 61 "(102,204,120,255)")
(edge 62 "(102,204,120,255)")
(edge 63 "(102,120,204,255)")
(edge 64 "(102,120,204,255)")
(edge 65 "(102,204,120,255)")
(edge 66 "(102,204,120,255)")
(edge 67 "(102,204,120,255)")
(edge 68 "(102,204,120,255)")
(edge 69 "(102,204,120,255)")
(edge 70 "(102,204,120,255)")
(edge 71 "(102,204,120,255)")
(edge 72 "(102,204,120,255)")
(edge 73 "(102,120,204,255)")
(edge 74 "(102,120,204,255)")
(edge 75 "(139,102,204,255)")
(edge 76 "(139,102,204,255)")
(edge 77 "(139,102,204,255)")
(edge 78 "(139,102,204,255)")
(edge 79 "(139,102,204,255)")
(edge 80 "(139,102,204,255)")
(edge 81 "(139,102,204,255)")
(edge 82 "(139,102,204,255)")
(edge 83 "(139,102,204,255)")
(edge 84 "(139,102,204,255)")
(edge 87 "(139,102,204,255)")
(edge 88 "(139,102,204,255)")
(edge 89 "(102,204,120,255)")
(edge 90 "(102,204,120,255)")
(edge 91 "(102,204,120,255)")
(edge 92 "(102,204,120,255)")
(edge 93 "(102,204,120,255)")
(edge 94 "(204,102,102,255)")
(edge 95 "(204,102,102,255)")
(edge 96 "(204,102,102,255)")
(edge 97 "(204,102,102,255)")
(edge 98 "(204,102,102,255)")
(edge 99 "(204,102,102,255)")
(edge 100 "(204,102,102,255)")
(edge 101 "(204,102,102,255)")
(edge 102 "(204,102,102,255)")
(edge 103 "(204,102,157,255)")
(edge 104 "(204,102,157,255)")
(edge 105 "(204,102,157,255)")
(edge 106 "(204,102,157,255)")
(edge 107 "(204,102,157,255)")
(edge 108 "(204,102,157,255)")
(edge 109 "(194,204,102,255)")
(edge 110 "(139,204,102,255)")
(edge 111 "(194,204,102,255)")
(edge 112 "(139,204,102,255)")
(edge 113 "(194,204,102,255)")
(edge 114 "(194,102,204,255)")
(edge 115 "(194,102,204,255)")
(edge 116 "(204,102,102,255)")
(edge 117 "(139,204,102,255)")
(edge 118 "(204,102,102,255)")
(edge 120 "(102,204,120,255)")
(edge 121 "(102,204,120,255)")
(edge 122 "(102,204,120,255)")
(edge 123 "(102,120,204,255)")
(edge 124 "(102,204,120,255)")
(edge 125 "(102,204,120,255)")
(edge 126 "(102,204,120,255)")
(edge 127 "(102,204,120,255)")
(edge 128 "(102,120,204,255)")
(edge 129 "(102,204,120,255)")
(edge 130 "(102,204,120,255)")
(edge 131 "(102,204,120,255)")
(edge 132 "(102,120,204,255)")
(edge 133 "(102,204,120,255)")
(edge 134 "(102,204,120,255)")
(edge 135 "(102,204,120,255)")
(edge 136 "(102,204,120,255)")
(edge 137 "(102,120,204,255)")
(edge 138 "(204,102,157,255)")
(edge 139 "(204,102,157,255)")
(edge 140 "(204,102,157,255)")
(edge 141 "(204,102,157,255)")
(edge 142 "(204,102,157,255)")
(edge 143 "(204,102,157,255)")
(edge 144 "(194,204,102,255)")
(edge 145 "(139,204,102,255)")
(edge 146 "(194,204,102,255)")
(edge 147 "(139,204,102,255)")
(edge 148 "(194,204,102,255)")
(edge 149 "(194,102,204,255)")
(edge 150 "(194,102,204,255)")
(edge 151 "(204,102,102,255)")
(edge 152 "(139,204,102,255)")
(edge 153 "(204,102,102,255)")
(edge 155 "(102,204,120,255)")
(edge 156 "(102,204,120,255)")
(edge 157 "(102,204,120,255)")
(edge 158 "(102,120,204,255)")
(edge 159 "(102,204,120,255)")
(edge 160 "(102,204,120,255)")
(edge 161 "(102,204,120,255)")
(edge 162 "(102,204,120,255)")
(edge 163 "(102,120,204,255)")
(edge 164 "(139,102,204,255)")
(edge 165 "(139,102,204,255)")
(edge 166 "(139,102,204,255)")
(edge 167 "(139,102,204,255)")
(edge 168 "(139,102,204,255)")
(edge 170 "(139,102,204,255)")
(edge 171 "(102,204,120,255)")
(edge 172 "(102,204,120,255)")
(edge 173 "(102,204,120,255)")
(edge 174 "(102,204,120,255)")
(edge 175 "(102,120,204,255)")
(edge 176 "(102,204,120,255)")
(edge 177 "(102,204,120,255)")
(edge 178 "(102,204,120,255)")
(edge 179 "(102,204,120,255)")
(edge 180 "(102,120,204,255)")
(edge 181 "(204,157,102,255)")
(edge 182 "(204,157,102,255)")
(edge 183 "(204,157,102,255)")
(edge 184 "(204,157,102,255)")
(edge 186 "(204,157,102,255)")
(edge 187 "(194,204,102,255)")
(edge 188 "(139,204,102,255)")
(edge 189 "(194,204,102,255)")
(edge 190 "(139,204,102,255)")
(edge 191 "(194,204,102,255)")
(edge 192 "(194,102,204,255)")
(edge 193 "(194,102,204,255)")
(edge 194 "(204,102,102,255)")
(edge 195 "(139,204,102,255)")
(edge 196 "(204,102,102,255)")
(edge 198 "(204,102,157,255)")
(edge 199 "(204,157,102,255)")
(edge 200 "(102,204,120,255)")
(edge 201 "(102,176,204,255)")
(edge 202 "(102,176,204,255)")
(edge 203 "(102,176,204,255)")
(edge 204 "(102,176,204,255)")
(edge 205 "(102,176,204,255)")
(edge 206 "(102,176,204,255)")
(edge 207 "(194,204,102,255)")
(edge 208 "(139,204,102,255)")
(edge 209 "(194,204,102,255)")
(edge 210 "(139,204,102,255)")
(edge 211 "(194,204,102,255)")
(edge 212 "(194,102,204,255)")
(edge 213 "(194,102,204,255)")
(edge 214 "(204,102,102,255)")
(edge 215 "(139,204,102,255)")
(edge 216 "(204,102,102,255)")
(edge 218 "(102,176,204,255)")
(edge 219 "(102,176,204,255)")
(edge 220 "(102,176,204,255)")
(edge 221 "(102,176,204,255)")
(edge 222 "(102,176,204,255)")
(edge 223 "(102,176,204,255)")
(edge 224 "(194,204,102,255)")
(edge 225 "(139,204,102,255)")
(edge 226 "(194,204,102,255)")
(edge 227 "(139,204,102,255)")
(edge 228 "(194,204,102,255)")
(edge 229 "(194,102,204,255)")
(edge 230 "(194,102,204,255)")
(edge 231 "(204,102,102,255)")
(edge 232 "(139,204,102,255)")
(edge 233 "(204,102,102,255)")
(edge 235 "(139,204,102,255)")
(edge 236 "(139,204,102,255)")
(edge 237 "(194,102,204,255)")
(edge 238 "(194,102,204,255)")
(edge 239 "(139,204,102,255)")
(edge 240 "(139,204,102,255)")
(edge 241 "(139,204,102,255)")
(edge 242 "(194,102,204,255)")
(edge 243 "(194,102,204,255)")
(edge 244 "(139,204,102,255)")
(edge 245 "(204,157,102,255)")
(edge 246 "(204,157,102,255)")
(edge 247 "(204,157,102,255)")
(edge 248 "(204,157,102,255)")
(edge 250 "(204,157,102,255)")
(edge 251 "(194,204,102,255)")
(edge 252 "(139,204,102,255)")
(edge 253 "(194,204,102,255)")
(edge 254 "(139,204,102,255)")
(edge 255 "(194,204,102,255)")
(edge 256 "(194,102,204,255)")
(edge 257 "(194,102,204,255)")
(edge 258 "(204,102,102,255)")
(edge 259 "(139,204,102,255)")
(edge 260 "(204,102,102,255)")
(edge 262 "(102,176,204,255)")
(edge 263 "(102,176,204,255)")
(edge 264 "(102,176,204,255)")
(edge 265 "(102,176,204,255)")
(edge 266 "(102,176,204,255)")
(edge 267 "(102,176,204,255)")
(edge 268 "(194,204,102,255)")
(edge 269 "(139,204,102,255)")
(edge 270 "(194,204,102,255)")
(edge 271 "(139,204,102,255)")
(edge 272 "(194,204,102,255)")
(edge 273 "(194,102,204,255)")
(edge 274 "(194,102,204,255)")
(edge 275 "(204,102,102,255)")
(edge 276 "(139,204,102,255)")
(edge 277 "(204,102,102,255)")
(edge 279 "(139,102,204,255)")
(edge 280 "(139,102,204,255)")
(edge 281 "(139,102,204,255)")
(edge 282 "(139,102,204,255)")
(edge 283 "(139,102,204,255)")
(edge 285 "(139,102,204,255)")
(edge 286 "(102,204,176,255)")
(edge 287 "(102,204,176,255)")
(edge 288 "(102,204,176,255)")
(edge 289 "(102,204,176,255)")
(edge 290 "(102,204,176,255)")
(edge 291 "(102,204,176,255)")
(edge 292 "(194,204,102,255)")
(edge 293 "(139,204,102,255)")
(edge 294 "(194,204,102,255)")
(edge 295 "(139,204,102,255)")
(edge 296 "(194,204,102,255)")
(edge 297 "(194,102,204,255)")
(edge 298 "(194,102,204,255)")
(edge 299 "(204,102,102,255)")
(edge 300 "(139,204,102,255)")
(edge 301 "(204,102,102,255)")
(edge 303 "(139,102,204,255)")
(edge 304 "(139,102,204,255)")
(edge 305 "(139,102,204,255)")
(edge 306 "(139,102,204,255)")
(edge 307 "(139,102,204,255)")
(edge 309 "(139,102,204,255)")
)
(property  0 string "viewFont"
(default "TulipBitmapDir/font.ttf" "TulipBitmapDir/font.ttf")
)
(property  0 int "viewFontSize"
(default "18" "18")
)
(property  0 string "viewLabel"
(default "" "")
(node 0 "(S)-3-hydroxydecanoyl-CoA")
(node 1 "C47H86N-\n7O18P3S")
(node 2 "(S)-3-hydroxylauroyl-CoA")
(node 3 "(S)-3-hydroxypalmitoyl-CoA")
(node 4 "(S)-3-hydroxytetradecanoyl-CoA")
(node 5 "3-hydroxyoctadecanoyl-CoA")
(node 6 "C31H52N-\n7O18P3S")
(node 7 "3-oxohexacosanoyl-CoA")
(node 8 "3-oxolauroyl-CoA")
(node 9 "3-oxooctadecanoyl-CoA")
(node 10 "3-oxopalmitoyl-CoA")
(node 11 "C35H60N-\n7O18P3S")
(node 12 "AcCoA")
(node 13 "AMP")
(node 14 "atp")
(node 15 "cerotate")
(node 16 "CoA")
(node 17 "decanoate")
(node 18 "decanoyl-CoA")
(node 19 "PPi")
(node 20 "hexacosanoyl-CoA")
(node 21 "hexadec-2-enoyl-CoA")
(node 22 "H2O2")
(node 23 "laurate")
(node 24 "lauroyl-CoA")
(node 25 "lignoceric\nacid")
(node 26 "myristate")
(node 27 "myristoleate")
(node 28 "myristoyl-CoA")
(node 29 "NAD")
(node 30 "NADH")
(node 31 "C39H66N-\n7O17P3S")
(node 32 "octanoate")
(node 33 "octanoyl-CoA")
(node 34 "oleoyl-CoA")
(node 35 "O2")
(node 36 "palmitate")
(node 37 "palmitoleate")
(node 38 "palmitoyl-CoA")
(node 39 "stearate")
(node 40 "C18:0-\nCoA")
(node 41 "tetracosanoyl-CoA")
(node 42 "tetradecenoyl-CoA")
(node 43 "trans-dec-2-enoyl-CoA")
(node 44 "trans-dodec-2-enoyl-CoA")
(node 45 "trans-hexacos-2-enoyl-CoA")
(node 46 "trans-octadec-2-enoyl-CoA")
(node 47 "trans-tetradec-2-enoyl-CoA")
(node 48 "H")
(node 49 "H2O")
(node 50 "butyrate")
(node 51 "4:0-CoA")
(node 52 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxydecanoyl-CoA)")
(node 53 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxydodecanoyl-CoA)")
(node 54 "3-hydro-\nxyacyl-\nCoA dehy-\ndratase")
(node 55 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxyhexadecanoyl-CoA)")
(node 56 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxyoctadecanoyl-CoA)")
(node 57 "3-hydroxyacyl-CoA\ndehydratase\n(3-hydroxytetradecanoyl-CoA)")
(node 58 "3-hydrox-\nyacyl-CoA\ndehydrog-\nenase")
(node 59 "3-hydroxyacyl-CoA\ndehydrogenase\n(3-oxodecanoyl-CoA)")
(node 60 "3-hydrox-\nyacyl-CoA\ndehydrog-\nenase")
(node 61 "3-hydroxyacyl-CoA\ndehydrogenase\n(3-oxohexadecanoyl-CoA)")
(node 62 "3-hydroxyacyl-CoA\ndehydrogenase\n(3-oxooctadecanoyl-CoA)")
(node 63 "3-hydrox-\nyacyl-CoA\ndehydrog-\nenase")
(node 64 "acetyl-CoA\nacyltransferase\n(hexadecanoyl-CoA)")
(node 65 "acetyl-CoA\nacyltransferase\n(tetracosanoyl-CoA)")
(node 66 "acetyl-CoA\nacyltransferase\n(tetradecanoyl-CoA)")
(node 67 "acetyl-\nCoAC-\nacetylt-\nransferase")
(node 68 "acetyl-\nCoAC-\nacetylt-\nransferase")
(node 69 "acetyl-CoA\nC-acyltransferase\n(decanoyl-CoA)")
(node 70 "acyl-CoA\noxidase\n(decanoyl-CoA)")
(node 71 "acyl-CoA\noxidase\n(dodecanoyl-CoA)")
(node 72 "acyl-CoA\noxidase\n(hexacanoyl-CoA)")
(node 73 "acyl-CoA\noxidase\n(hexadecanoyl-CoA)")
(node 74 "acyl-\nCoA oxid-\nase")
(node 75 "acyl-CoA\noxidase\n(tetradecanoyl-CoA)")
(node 76 "fatty\nacid\noxidation")
(node 77 "fatty\nacid\noxidation")
(node 78 "fatty\nacid\noxidation")
(node 79 "fatty\nacid\noxidation")
(node 80 "fatty\nacid\noxidation")
(node 81 "fatty\nacid\noxidation")
(node 82 "fatty\nacid\noxidation")
(node 83 "fatty\nacid oxi-\ndation")
(node 84 "fatty\nacid\noxidation")
(node 85 "fatty\nacid oxi-\ndation")
(node 86 "fatty\nacid oxi-\ndation")
(node 87 "fatty-acid--CoA\nligase\n(decanoate)")
(node 88 "fatty-acid--CoA\nligase\n(dodecanoate)")
(node 89 "fatty-\nacid-\n-CoA lig-\nase")
(node 90 "fatty-acid--CoA\nligase\n(hexadecenoate)")
(node 91 "fatty-acid--CoA\nligase\n(n-C24:0)")
(node 92 "fatty-acid--CoA\nligase\n(n-C26:0)")
(node 93 "fatty-acid--CoA\nligase\n(octanoate)")
(node 94 "fatty-acid--CoA\nligase\n(tetradecanoate)")
(node 95 "fatty-acid--CoA\nligase\n(tetradecenoate)")
(node 96 "peroxisomal\nacyl-CoA\nthioesterase")
(node 97 "peroxisomal\nacyl-CoA\nthioesterase")
(node 98 "peroxisomal\nacyl-CoA\nthioesterase")
(node 99 "peroxiso-\nmalacyl-\nCoA thioe-\nsterase")
(node 100 "peroxisomal\nacyl-CoA\nthioesterase")
(node 101 "peroxiso-\nmalacyl-\nCoA thioe-\nsterase")
(node 102 "peroxisomal\nacyl-CoA\nthioesterase")
(node 103 "fatty-\nacid-\n-CoA lig-\nase")
(node 104 "fatty\nacid oxi-\ndation")
(node 105 "acetyl-CoA")
(node 106 "acetyl-CoA")
(node 107 "acetyl-CoA")
(node 108 "AcCoA")
(node 109 "AcCoA")
(node 110 "acetyl-CoA")
(node 111 "acetyl-CoA")
(node 112 "acetyl-CoA")
(node 113 "acetyl-CoA")
(node 114 "acetyl-CoA")
(node 115 "acetyl-CoA")
(node 116 "acetyl-CoA")
(node 117 "acetyl-CoA")
(node 118 "AcCoA")
(node 119 "acetyl-CoA")
(node 120 "AcCoA")
(node 121 "AcCoA")
(node 122 "AMP")
(node 123 "AMP")
(node 124 "AMP")
(node 125 "AMP")
(node 126 "AMP")
(node 127 "AMP")
(node 128 "AMP")
(node 129 "AMP")
(node 130 "AMP")
(node 131 "ATP")
(node 132 "ATP")
(node 133 "atp")
(node 134 "ATP")
(node 135 "ATP")
(node 136 "ATP")
(node 137 "ATP")
(node 138 "ATP")
(node 139 "ATP")
(node 140 "coenzyme\nA")
(node 141 "coenzyme\nA")
(node 142 "coenzyme\nA")
(node 143 "CoA")
(node 144 "CoA")
(node 145 "coenzyme\nA")
(node 146 "coenzyme\nA")
(node 147 "coenzyme\nA")
(node 148 "coenzyme\nA")
(node 149 "coenzyme\nA")
(node 150 "coenzyme\nA")
(node 151 "coenzyme\nA")
(node 152 "coenzyme\nA")
(node 153 "CoA")
(node 154 "coenzyme\nA")
(node 155 "CoA")
(node 156 "CoA")
(node 157 "coenzyme\nA")
(node 158 "coenzyme\nA")
(node 159 "CoA")
(node 160 "coenzyme\nA")
(node 161 "coenzyme\nA")
(node 162 "coenzyme\nA")
(node 163 "coenzyme\nA")
(node 164 "coenzyme\nA")
(node 165 "coenzyme\nA")
(node 166 "coenzyme\nA")
(node 167 "coenzyme\nA")
(node 168 "coenzyme\nA")
(node 169 "CoA")
(node 170 "coenzyme\nA")
(node 171 "CoA")
(node 172 "coenzyme\nA")
(node 173 "CoA")
(node 174 "pyrophosphate")
(node 175 "pyrophosphate")
(node 176 "PPi")
(node 177 "pyrophosphate")
(node 178 "pyrophosphate")
(node 179 "pyrophosphate")
(node 180 "pyrophosphate")
(node 181 "pyrophosphate")
(node 182 "pyrophosphate")
(node 183 "hydrogen\nperoxide")
(node 184 "hydrogen\nperoxide")
(node 185 "hydrogen\nperoxide")
(node 186 "hydrogen\nperoxide")
(node 187 "H2O2")
(node 188 "hydrogen\nperoxide")
(node 189 "hydrogen\nperoxide")
(node 190 "hydrogen\nperoxide")
(node 191 "hydrogen\nperoxide")
(node 192 "hydrogen\nperoxide")
(node 193 "hydrogen\nperoxide")
(node 194 "hydrogen\nperoxide")
(node 195 "hydrogen\nperoxide")
(node 196 "H2O2")
(node 197 "hydrogen\nperoxide")
(node 198 "H2O2")
(node 199 "H2O2")
(node 200 "lauroyl-CoA")
(node 201 "lauroyl-CoA")
(node 202 "lauroyl-CoA")
(node 203 "NAD")
(node 204 "NAD")
(node 205 "NAD")
(node 206 "NAD")
(node 207 "NAD")
(node 208 "NAD")
(node 209 "NAD")
(node 210 "NAD")
(node 211 "NAD")
(node 212 "NAD")
(node 213 "NAD")
(node 214 "NAD")
(node 215 "NAD")
(node 216 "NAD")
(node 217 "NAD")
(node 218 "NAD")
(node 219 "NAD")
(node 220 "NADH")
(node 221 "NADH")
(node 222 "NADH")
(node 223 "NADH")
(node 224 "NADH")
(node 225 "NADH")
(node 226 "NADH")
(node 227 "NADH")
(node 228 "NADH")
(node 229 "NADH")
(node 230 "NADH")
(node 231 "NADH")
(node 232 "NADH")
(node 233 "NADH")
(node 234 "NADH")
(node 235 "NADH")
(node 236 "NADH")
(node 237 "NADP(+)")
(node 238 "NADP(+)")
(node 239 "NADP(+)")
(node 240 "NADP(+)")
(node 241 "NADP(+)")
(node 242 "NADPH")
(node 243 "NADPH")
(node 244 "NADPH")
(node 245 "NADPH")
(node 246 "NADPH")
(node 247 "oxygen")
(node 248 "oxygen")
(node 249 "oxygen")
(node 250 "oxygen")
(node 251 "O2")
(node 252 "oxygen")
(node 253 "oxygen")
(node 254 "oxygen")
(node 255 "oxygen")
(node 256 "oxygen")
(node 257 "oxygen")
(node 258 "oxygen")
(node 259 "oxygen")
(node 260 "O2")
(node 261 "oxygen")
(node 262 "O2")
(node 263 "O2")
(node 264 "H")
(node 265 "H+")
(node 266 "H")
(node 267 "H+")
(node 268 "H+")
(node 269 "H")
(node 270 "H+")
(node 271 "H+")
(node 272 "H+")
(node 273 "H+")
(node 274 "H+")
(node 275 "H+")
(node 276 "H+")
(node 277 "H")
(node 278 "H+")
(node 279 "H")
(node 280 "H")
(node 281 "H+")
(node 282 "H+")
(node 283 "H+")
(node 284 "H")
(node 285 "H+")
(node 286 "H")
(node 287 "H+")
(node 288 "H2O")
(node 289 "H2O")
(node 290 "H2O")
(node 291 "H2O")
(node 292 "H2O")
(node 293 "H2O")
(node 294 "H2O")
(node 295 "H2O")
(node 296 "H2O")
(node 297 "H2O")
(node 298 "H2O")
(node 299 "H2O")
(node 300 "H2O")
(node 301 "H2O")
(node 302 "H2O")
(node 303 "H2O")
(node 304 "H2O")
(node 305 "H2O")
(node 306 "H2O")
(node 307 "H2O")
(node 308 "H2O")
(node 309 "H2O")
(node 310 "H2O")
(node 311 "H2O")
)
(property  0 color "viewLabelColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 int "viewLabelPosition"
(default "0" "0")
)
(property  0 layout "viewLayout"
(default "(0,0,0)" "()")
(node 0 "(120.471,307.069,0)")
(node 1 "(36.5,270.583,0)")
(node 2 "(21.5,307.069,0)")
(node 3 "(80.3573,209.625,0)")
(node 4 "(172.304,224.125,0)")
(node 5 "(145.472,267.583,9.79717e-16)")
(node 6 "(135.471,307.069,0)")
(node 7 "(51.5,270.583,0)")
(node 8 "(36.5,307.069,0)")
(node 9 "(153.472,294.583,1.95943e-15)")
(node 10 "(101.357,218.625,0)")
(node 11 "(187.304,224.125,0)")
(node 12 "(37.0863,168.387,0)")
(node 13 "(37.0863,187.387,0)")
(node 14 "(37.0863,195.387,0)")
(node 15 "(-6.5,270.583,0)")
(node 16 "(37.0863,176.387,0)")
(node 17 "(70.3314,309.924,0)")
(node 18 "(74.8314,305.409,0)")
(node 19 "(45.0863,187.387,0)")
(node 20 "(8.5,270.583,0)")
(node 21 "(59.3573,222.625,0)")
(node 22 "(45.0863,168.387,0)")
(node 23 "(41.0863,142.887,0)")
(node 24 "(41.0863,157.887,0)")
(node 25 "(85.3316,273.439,0)")
(node 26 "(120.974,222.471,0)")
(node 27 "(66.3097,197.644,0)")
(node 28 "(125.49,226.971,0)")
(node 29 "(37.0863,180.387,0)")
(node 30 "(41.0863,160.887,0)")
(node 31 "(132.047,189.723,0)")
(node 32 "(169.285,304.223,0)")
(node 33 "(173.801,308.723,0)")
(node 34 "(97.0469,189.723,0)")
(node 35 "(45.0863,176.387,0)")
(node 36 "(185.09,268.929,0)")
(node 37 "(80.3573,222.625,0)")
(node 38 "(189.605,273.429,0)")
(node 39 "(113.472,246.583,-2.93915e-15)")
(node 40 "(121.472,267.583,-1.95943e-15)")
(node 41 "(89.8316,268.923,0)")
(node 42 "(66.3097,178.644,0)")
(node 43 "(107.471,307.069,0)")
(node 44 "(8.5,307.069,0)")
(node 45 "(23.5,270.583,0)")
(node 46 "(137.472,246.583,0)")
(node 47 "(159.304,224.125,0)")
(node 48 "(37.0863,164.387,0)")
(node 49 "(45.0863,180.387,0)")
(node 50 "(41.0863,198.887,0)")
(node 51 "(41.0863,183.887,0)")
(node 52 "(114.971,307.069,0)")
(node 53 "(16,307.069,0)")
(node 54 "(31,270.583,0)")
(node 55 "(69.8573,206.625,0)")
(node 56 "(145.472,257.083,9.79717e-16)")
(node 57 "(166.804,224.125,0)")
(node 58 "(127.971,307.069,0)")
(node 59 "(29,307.069,0)")
(node 60 "(44,270.583,0)")
(node 61 "(90.8573,212.625,0)")
(node 62 "(145.472,281.083,9.79717e-16)")
(node 63 "(179.804,224.125,0)")
(node 64 "(161.472,281.083,2.93915e-15)")
(node 65 "(59,270.583,0)")
(node 66 "(90.8573,230.625,0)")
(node 67 "(194.804,224.125,0)")
(node 68 "(142.971,307.069,0)")
(node 69 "(44,307.069,0)")
(node 70 "(99.9715,307.069,0)")
(node 71 "(1,307.069,0)")
(node 72 "(16,270.583,0)")
(node 73 "(69.8573,238.625,0)")
(node 74 "(129.472,257.083,-9.79717e-16)")
(node 75 "(151.804,224.125,0)")
(node 76 "(74.3097,160.144,0)")
(node 77 "(40.8573,214.625,0)")
(node 78 "(40.8573,230.625,0)")
(node 79 "(105.047,171.223,0)")
(node 80 "(89.0469,171.223,0)")
(node 81 "(148.047,171.223,0)")
(node 82 "(132.047,171.223,0)")
(node 83 "(116.047,171.223,0)")
(node 84 "(58.3097,160.144,0)")
(node 85 "(206.919,307.069,0)")
(node 86 "(121.472,281.083,-1.95943e-15)")
(node 87 "(70.3235,305.416,0)")
(node 88 "(41.0863,135.387,0)")
(node 89 "(189.598,268.921,0)")
(node 90 "(69.8573,222.625,0)")
(node 91 "(85.3237,268.931,0)")
(node 92 "(1,270.583,0)")
(node 93 "(169.293,308.731,0)")
(node 94 "(125.482,222.463,0)")
(node 95 "(66.3097,188.144,0)")
(node 96 "(74.8392,309.916,0)")
(node 97 "(41.0863,150.387,0)")
(node 98 "(89.8394,273.431,0)")
(node 99 "(185.098,273.436,0)")
(node 100 "(120.982,226.978,0)")
(node 101 "(113.472,257.083,-2.93915e-15)")
(node 102 "(173.793,304.215,0)")
(node 103 "(41.0863,191.387,0)")
(node 104 "(41.0863,172.387,0)")
(node 105 "(161.472,267.583,2.93915e-15)")
(node 106 "(64.5,270.583,0)")
(node 107 "(80.3573,230.625,0)")
(node 108 "(198.804,220.125,0)")
(node 109 "(148.471,307.069,0)")
(node 110 "(49.5,307.069,0)")
(node 111 "(70.3097,155.644,0)")
(node 112 "(36.3573,218.625,0)")
(node 113 "(36.3573,234.625,0)")
(node 114 "(101.047,166.723,0)")
(node 115 "(85.0469,166.723,0)")
(node 116 "(144.047,166.723,0)")
(node 117 "(128.047,166.723,0)")
(node 118 "(112.047,166.723,0)")
(node 119 "(54.3097,155.644,0)")
(node 120 "(202.419,303.069,4.89859e-16)")
(node 121 "(125.472,276.583,-1.46958e-15)")
(node 122 "(67.2647,299.986,0)")
(node 123 "(37.0863,131.387,0)")
(node 124 "(195.028,265.862,0)")
(node 125 "(65.3573,226.625,0)")
(node 126 "(82.2649,263.5,0)")
(node 127 "(5,266.583,0)")
(node 128 "(166.253,314.172,0)")
(node 129 "(130.913,219.404,0)")
(node 130 "(62.3097,183.644,0)")
(node 131 "(62.5,304.767,0)")
(node 132 "(37.0863,139.387,0)")
(node 133 "(190.247,261.097,0)")
(node 134 "(74.3573,226.625,0)")
(node 135 "(77.5002,268.281,0)")
(node 136 "(-3,266.583,0)")
(node 137 "(161.472,309.408,0)")
(node 138 "(126.132,214.639,0)")
(node 139 "(62.3097,192.644,0)")
(node 140 "(165.472,285.583,3.42901e-15)")
(node 141 "(55,266.583,0)")
(node 142 "(95.3573,234.625,0)")
(node 143 "(190.804,220.125,0)")
(node 144 "(138.971,303.069,0)")
(node 145 "(40,303.069,0)")
(node 146 "(70.3097,164.644,0)")
(node 147 "(45.3573,218.625,0)")
(node 148 "(45.3573,234.625,0)")
(node 149 "(101.047,175.723,0)")
(node 150 "(85.0469,175.723,0)")
(node 151 "(144.047,175.723,0)")
(node 152 "(128.047,175.723,0)")
(node 153 "(112.047,175.723,0)")
(node 154 "(54.3097,164.644,0)")
(node 155 "(211.419,303.069,4.89859e-16)")
(node 156 "(125.472,285.583,-1.46958e-15)")
(node 157 "(64.8823,302.377,0)")
(node 158 "(45.0863,139.387,0)")
(node 159 "(192.638,263.48,0)")
(node 160 "(74.3573,218.625,0)")
(node 161 "(79.8825,265.891,0)")
(node 162 "(-3,274.583,0)")
(node 163 "(163.862,311.79,0)")
(node 164 "(128.522,217.022,0)")
(node 165 "(70.3097,192.644,0)")
(node 166 "(79.0893,314.152,0)")
(node 167 "(37.0863,146.387,0)")
(node 168 "(94.0895,277.666,0)")
(node 169 "(180.862,277.686,0)")
(node 170 "(116.747,231.228,0)")
(node 171 "(117.472,252.583,-2.44929e-15)")
(node 172 "(178.028,299.965,0)")
(node 173 "(45.0863,195.387,0)")
(node 174 "(69.647,297.595,0)")
(node 175 "(45.0863,131.387,0)")
(node 176 "(197.419,268.244,0)")
(node 177 "(65.3573,218.625,0)")
(node 178 "(84.6472,261.109,0)")
(node 179 "(5,274.583,0)")
(node 180 "(168.643,316.555,0)")
(node 181 "(133.304,221.786,0)")
(node 182 "(70.3097,183.644,0)")
(node 183 "(103.971,303.069,0)")
(node 184 "(5,303.069,0)")
(node 185 "(20,266.583,0)")
(node 186 "(65.3573,242.625,0)")
(node 187 "(133.472,252.583,-4.89859e-16)")
(node 188 "(155.804,220.125,0)")
(node 189 "(70.3097,151.644,0)")
(node 190 "(32.3573,218.625,0)")
(node 191 "(32.3573,234.625,0)")
(node 192 "(101.047,162.723,0)")
(node 193 "(85.0469,162.723,0)")
(node 194 "(144.047,162.723,0)")
(node 195 "(128.047,162.723,0)")
(node 196 "(112.047,162.723,0)")
(node 197 "(54.3097,151.644,0)")
(node 198 "(198.419,303.069,4.89859e-16)")
(node 199 "(125.472,272.583,-1.46958e-15)")
(node 200 "(202.304,224.125,0)")
(node 201 "(-6.5,307.069,0)")
(node 202 "(41.0863,127.887,0)")
(node 203 "(123.971,303.069,0)")
(node 204 "(25,303.069,0)")
(node 205 "(40,266.583,0)")
(node 206 "(86.3573,216.625,0)")
(node 207 "(149.472,276.583,1.46958e-15)")
(node 208 "(175.804,220.125,0)")
(node 209 "(70.3097,168.644,0)")
(node 210 "(49.3573,218.625,0)")
(node 211 "(49.3573,234.625,0)")
(node 212 "(101.047,179.723,0)")
(node 213 "(85.0469,179.723,0)")
(node 214 "(144.047,179.723,0)")
(node 215 "(128.047,179.723,0)")
(node 216 "(112.047,179.723,0)")
(node 217 "(54.3097,168.644,0)")
(node 218 "(220.419,307.069,0)")
(node 219 "(121.472,294.583,-1.95943e-15)")
(node 220 "(131.971,303.069,0)")
(node 221 "(33,303.069,0)")
(node 222 "(48,266.583,0)")
(node 223 "(95.3573,216.625,0)")
(node 224 "(149.472,285.583,1.46958e-15)")
(node 225 "(183.804,220.125,0)")
(node 226 "(74.3097,141.644,0)")
(node 227 "(36.3573,210.625,0)")
(node 228 "(22.3573,230.625,0)")
(node 229 "(109.047,166.723,0)")
(node 230 "(89.0469,152.723,0)")
(node 231 "(152.047,166.723,0)")
(node 232 "(136.047,166.723,0)")
(node 233 "(116.047,152.723,0)")
(node 234 "(62.3097,155.644,0)")
(node 235 "(193.419,307.069,0)")
(node 236 "(117.472,276.583,-2.44929e-15)")
(node 237 "(22.3573,214.625,0)")
(node 238 "(105.047,152.723,0)")
(node 239 "(148.047,152.723,0)")
(node 240 "(132.047,152.723,0)")
(node 241 "(58.3097,141.644,0)")
(node 242 "(53.3573,218.625,0)")
(node 243 "(101.047,183.723,0)")
(node 244 "(144.047,183.723,0)")
(node 245 "(128.047,183.723,0)")
(node 246 "(54.3097,172.644,0)")
(node 247 "(94.4715,307.069,0)")
(node 248 "(-3,303.069,0)")
(node 249 "(12,266.583,0)")
(node 250 "(80.3573,238.625,0)")
(node 251 "(133.472,261.583,-4.89859e-16)")
(node 252 "(146.304,224.125,0)")
(node 253 "(78.3097,164.644,0)")
(node 254 "(45.3573,210.625,0)")
(node 255 "(45.3573,226.625,0)")
(node 256 "(109.047,175.723,0)")
(node 257 "(93.0469,175.723,0)")
(node 258 "(152.047,175.723,0)")
(node 259 "(136.047,175.723,0)")
(node 260 "(120.047,175.723,0)")
(node 261 "(62.3097,164.644,0)")
(node 262 "(215.419,303.069,4.89859e-16)")
(node 263 "(125.472,289.583,-1.46958e-15)")
(node 264 "(131.971,311.069,0)")
(node 265 "(33,311.069,0)")
(node 266 "(48,274.583,0)")
(node 267 "(95.3573,208.625,0)")
(node 268 "(141.472,285.583,4.89859e-16)")
(node 269 "(183.804,228.125,0)")
(node 270 "(78.3097,155.644,0)")
(node 271 "(32.3573,210.625,0)")
(node 272 "(36.3573,226.625,0)")
(node 273 "(109.047,162.723,0)")
(node 274 "(93.0469,166.723,0)")
(node 275 "(152.047,162.723,0)")
(node 276 "(136.047,162.723,0)")
(node 277 "(120.047,166.723,0)")
(node 278 "(62.3097,151.644,0)")
(node 279 "(202.419,311.069,-4.89859e-16)")
(node 280 "(117.472,272.583,-2.44929e-15)")
(node 281 "(76.7069,316.542,0)")
(node 282 "(45.0863,146.387,0)")
(node 283 "(91.7071,280.057,0)")
(node 284 "(178.472,275.304,0)")
(node 285 "(114.356,228.846,0)")
(node 286 "(109.472,252.583,-3.42901e-15)")
(node 287 "(175.637,297.583,0)")
(node 288 "(110.971,303.069,0)")
(node 289 "(12,303.069,0)")
(node 290 "(27,266.583,0)")
(node 291 "(65.3573,210.625,0)")
(node 292 "(149.472,252.583,1.46958e-15)")
(node 293 "(162.804,220.125,0)")
(node 294 "(78.3097,168.644,0)")
(node 295 "(49.3573,210.625,0)")
(node 296 "(49.3573,226.625,0)")
(node 297 "(109.047,179.723,0)")
(node 298 "(93.0469,179.723,0)")
(node 299 "(152.047,179.723,0)")
(node 300 "(136.047,179.723,0)")
(node 301 "(120.047,179.723,0)")
(node 302 "(62.3097,168.644,0)")
(node 303 "(211.419,311.069,-4.89859e-16)")
(node 304 "(117.472,285.583,-2.44929e-15)")
(node 305 "(81.4716,311.761,0)")
(node 306 "(37.0863,154.387,0)")
(node 307 "(96.4718,275.275,0)")
(node 308 "(183.253,280.069,0)")
(node 309 "(119.138,233.611,0)")
(node 310 "(117.472,261.583,-2.44929e-15)")
(node 311 "(180.419,302.348,0)")
(edge 40 "((72.4177,242.718,-9.15527e-05), (179.457,243.462,-9.15527e-05))")
)
(property  0 graph "viewMetaGraph"
(default "" "()")
)
(property  0 double "viewRotation"
(default "0" "0")
)
(property  0 bool "viewSelection"
(default "false" "false")
)
(property  0 int "viewShape"
(default "4" "0")
(node 0 "120")
(node 1 "120")
(node 2 "120")
(node 3 "120")
(node 4 "120")
(node 5 "120")
(node 6 "120")
(node 7 "120")
(node 8 "120")
(node 9 "120")
(node 10 "120")
(node 11 "120")
(node 12 "120")
(node 13 "120")
(node 14 "120")
(node 15 "120")
(node 16 "120")
(node 17 "120")
(node 18 "120")
(node 19 "120")
(node 20 "120")
(node 21 "120")
(node 22 "120")
(node 23 "120")
(node 24 "120")
(node 25 "120")
(node 26 "120")
(node 27 "120")
(node 28 "120")
(node 29 "120")
(node 30 "120")
(node 31 "120")
(node 32 "120")
(node 33 "120")
(node 34 "120")
(node 35 "120")
(node 36 "120")
(node 37 "120")
(node 38 "120")
(node 39 "120")
(node 40 "120")
(node 41 "120")
(node 42 "120")
(node 43 "120")
(node 44 "120")
(node 45 "120")
(node 46 "120")
(node 47 "120")
(node 48 "120")
(node 49 "120")
(node 50 "120")
(node 51 "120")
(node 52 "124")
(node 53 "124")
(node 54 "124")
(node 55 "124")
(node 56 "124")
(node 57 "124")
(node 58 "124")
(node 59 "124")
(node 60 "124")
(node 61 "124")
(node 62 "124")
(node 63 "124")
(node 64 "124")
(node 65 "124")
(node 66 "124")
(node 67 "124")
(node 68 "124")
(node 69 "124")
(node 70 "124")
(node 71 "124")
(node 72 "124")
(node 73 "124")
(node 74 "124")
(node 75 "124")
(node 76 "124")
(node 77 "124")
(node 78 "124")
(node 79 "124")
(node 80 "124")
(node 81 "124")
(node 82 "124")
(node 83 "124")
(node 84 "124")
(node 85 "124")
(node 86 "124")
(node 87 "124")
(node 88 "124")
(node 89 "124")
(node 90 "124")
(node 91 "124")
(node 92 "124")
(node 93 "124")
(node 94 "124")
(node 95 "124")
(node 96 "124")
(node 97 "124")
(node 98 "124")
(node 99 "124")
(node 100 "124")
(node 101 "124")
(node 102 "124")
(node 103 "124")
(node 104 "124")
(node 105 "120")
(node 106 "120")
(node 107 "120")
(node 108 "120")
(node 109 "120")
(node 110 "120")
(node 111 "120")
(node 112 "120")
(node 113 "120")
(node 114 "120")
(node 115 "120")
(node 116 "120")
(node 117 "120")
(node 118 "120")
(node 119 "120")
(node 120 "120")
(node 121 "120")
(node 122 "120")
(node 123 "120")
(node 124 "120")
(node 125 "120")
(node 126 "120")
(node 127 "120")
(node 128 "120")
(node 129 "120")
(node 130 "120")
(node 131 "120")
(node 132 "120")
(node 133 "120")
(node 134 "120")
(node 135 "120")
(node 136 "120")
(node 137 "120")
(node 138 "120")
(node 139 "120")
(node 140 "120")
(node 141 "120")
(node 142 "120")
(node 143 "120")
(node 144 "120")
(node 145 "120")
(node 146 "120")
(node 147 "120")
(node 148 "120")
(node 149 "120")
(node 150 "120")
(node 151 "120")
(node 152 "120")
(node 153 "120")
(node 154 "120")
(node 155 "120")
(node 156 "120")
(node 157 "120")
(node 158 "120")
(node 159 "120")
(node 160 "120")
(node 161 "120")
(node 162 "120")
(node 163 "120")
(node 164 "120")
(node 165 "120")
(node 166 "120")
(node 167 "120")
(node 168 "120")
(node 169 "120")
(node 170 "120")
(node 171 "120")
(node 172 "120")
(node 173 "120")
(node 174 "120")
(node 175 "120")
(node 176 "120")
(node 177 "120")
(node 178 "120")
(node 179 "120")
(node 180 "120")
(node 181 "120")
(node 182 "120")
(node 183 "120")
(node 184 "120")
(node 185 "120")
(node 186 "120")
(node 187 "120")
(node 188 "120")
(node 189 "120")
(node 190 "120")
(node 191 "120")
(node 192 "120")
(node 193 "120")
(node 194 "120")
(node 195 "120")
(node 196 "120")
(node 197 "120")
(node 198 "120")
(node 199 "120")
(node 200 "120")
(node 201 "120")
(node 202 "120")
(node 203 "120")
(node 204 "120")
(node 205 "120")
(node 206 "120")
(node 207 "120")
(node 208 "120")
(node 209 "120")
(node 210 "120")
(node 211 "120")
(node 212 "120")
(node 213 "120")
(node 214 "120")
(node 215 "120")
(node 216 "120")
(node 217 "120")
(node 218 "120")
(node 219 "120")
(node 220 "120")
(node 221 "120")
(node 222 "120")
(node 223 "120")
(node 224 "120")
(node 225 "120")
(node 226 "120")
(node 227 "120")
(node 228 "120")
(node 229 "120")
(node 230 "120")
(node 231 "120")
(node 232 "120")
(node 233 "120")
(node 234 "120")
(node 235 "120")
(node 236 "120")
(node 237 "120")
(node 238 "120")
(node 239 "120")
(node 240 "120")
(node 241 "120")
(node 242 "120")
(node 243 "120")
(node 244 "120")
(node 245 "120")
(node 246 "120")
(node 247 "120")
(node 248 "120")
(node 249 "120")
(node 250 "120")
(node 251 "120")
(node 252 "120")
(node 253 "120")
(node 254 "120")
(node 255 "120")
(node 256 "120")
(node 257 "120")
(node 258 "120")
(node 259 "120")
(node 260 "120")
(node 261 "120")
(node 262 "120")
(node 263 "120")
(node 264 "120")
(node 265 "120")
(node 266 "120")
(node 267 "120")
(node 268 "120")
(node 269 "120")
(node 270 "120")
(node 271 "120")
(node 272 "120")
(node 273 "120")
(node 274 "120")
(node 275 "120")
(node 276 "120")
(node 277 "120")
(node 278 "120")
(node 279 "120")
(node 280 "120")
(node 281 "120")
(node 282 "120")
(node 283 "120")
(node 284 "120")
(node 285 "120")
(node 286 "120")
(node 287 "120")
(node 288 "120")
(node 289 "120")
(node 290 "120")
(node 291 "120")
(node 292 "120")
(node 293 "120")
(node 294 "120")
(node 295 "120")
(node 296 "120")
(node 297 "120")
(node 298 "120")
(node 299 "120")
(node 300 "120")
(node 301 "120")
(node 302 "120")
(node 303 "120")
(node 304 "120")
(node 305 "120")
(node 306 "120")
(node 307 "120")
(node 308 "120")
(node 309 "120")
(node 310 "120")
(node 311 "120")
)
(property  0 size "viewSize"
(default "(1,1,1)" "(0.125,0.125,0.5)")
(node 0 "(3,3,3)")
(node 1 "(3,3,3)")
(node 2 "(3,3,3)")
(node 3 "(3,3,3)")
(node 4 "(3,3,3)")
(node 5 "(3,3,3)")
(node 6 "(3,3,3)")
(node 7 "(3,3,3)")
(node 8 "(3,3,3)")
(node 9 "(3,3,3)")
(node 10 "(3,3,3)")
(node 11 "(3,3,3)")
(node 12 "(3,3,3)")
(node 13 "(3,3,3)")
(node 14 "(3,3,3)")
(node 15 "(3,3,3)")
(node 16 "(3,3,3)")
(node 17 "(3,3,3)")
(node 18 "(3,3,3)")
(node 19 "(3,3,3)")
(node 20 "(3,3,3)")
(node 21 "(3,3,3)")
(node 22 "(3,3,3)")
(node 23 "(3,3,3)")
(node 24 "(3,3,3)")
(node 25 "(3,3,3)")
(node 26 "(3,3,3)")
(node 27 "(3,3,3)")
(node 28 "(3,3,3)")
(node 29 "(3,3,3)")
(node 30 "(3,3,3)")
(node 31 "(3,3,3)")
(node 32 "(3,3,3)")
(node 33 "(3,3,3)")
(node 34 "(3,3,3)")
(node 35 "(3,3,3)")
(node 36 "(3,3,3)")
(node 37 "(3,3,3)")
(node 38 "(3,3,3)")
(node 39 "(3,3,3)")
(node 40 "(3,3,3)")
(node 41 "(3,3,3)")
(node 42 "(3,3,3)")
(node 43 "(3,3,3)")
(node 44 "(3,3,3)")
(node 45 "(3,3,3)")
(node 46 "(3,3,3)")
(node 47 "(3,3,3)")
(node 48 "(3,3,3)")
(node 49 "(3,3,3)")
(node 50 "(3,3,3)")
(node 51 "(3,3,3)")
(node 105 "(3,3,3)")
(node 106 "(3,3,3)")
(node 107 "(3,3,3)")
(node 108 "(3,3,3)")
(node 109 "(3,3,3)")
(node 110 "(3,3,3)")
(node 111 "(3,3,3)")
(node 112 "(3,3,3)")
(node 113 "(3,3,3)")
(node 114 "(3,3,3)")
(node 115 "(3,3,3)")
(node 116 "(3,3,3)")
(node 117 "(3,3,3)")
(node 118 "(3,3,3)")
(node 119 "(3,3,3)")
(node 120 "(3,3,3)")
(node 121 "(3,3,3)")
(node 122 "(3,3,3)")
(node 123 "(3,3,3)")
(node 124 "(3,3,3)")
(node 125 "(3,3,3)")
(node 126 "(3,3,3)")
(node 127 "(3,3,3)")
(node 128 "(3,3,3)")
(node 129 "(3,3,3)")
(node 130 "(3,3,3)")
(node 131 "(3,3,3)")
(node 132 "(3,3,3)")
(node 133 "(3,3,3)")
(node 134 "(3,3,3)")
(node 135 "(3,3,3)")
(node 136 "(3,3,3)")
(node 137 "(3,3,3)")
(node 138 "(3,3,3)")
(node 139 "(3,3,3)")
(node 140 "(3,3,3)")
(node 141 "(3,3,3)")
(node 142 "(3,3,3)")
(node 143 "(3,3,3)")
(node 144 "(3,3,3)")
(node 145 "(3,3,3)")
(node 146 "(3,3,3)")
(node 147 "(3,3,3)")
(node 148 "(3,3,3)")
(node 149 "(3,3,3)")
(node 150 "(3,3,3)")
(node 151 "(3,3,3)")
(node 152 "(3,3,3)")
(node 153 "(3,3,3)")
(node 154 "(3,3,3)")
(node 155 "(3,3,3)")
(node 156 "(3,3,3)")
(node 157 "(3,3,3)")
(node 158 "(3,3,3)")
(node 159 "(3,3,3)")
(node 160 "(3,3,3)")
(node 161 "(3,3,3)")
(node 162 "(3,3,3)")
(node 163 "(3,3,3)")
(node 164 "(3,3,3)")
(node 165 "(3,3,3)")
(node 166 "(3,3,3)")
(node 167 "(3,3,3)")
(node 168 "(3,3,3)")
(node 169 "(3,3,3)")
(node 170 "(3,3,3)")
(node 171 "(3,3,3)")
(node 172 "(3,3,3)")
(node 173 "(3,3,3)")
(node 174 "(3,3,3)")
(node 175 "(3,3,3)")
(node 176 "(3,3,3)")
(node 177 "(3,3,3)")
(node 178 "(3,3,3)")
(node 179 "(3,3,3)")
(node 180 "(3,3,3)")
(node 181 "(3,3,3)")
(node 182 "(3,3,3)")
(node 183 "(3,3,3)")
(node 184 "(3,3,3)")
(node 185 "(3,3,3)")
(node 186 "(3,3,3)")
(node 187 "(3,3,3)")
(node 188 "(3,3,3)")
(node 189 "(3,3,3)")
(node 190 "(3,3,3)")
(node 191 "(3,3,3)")
(node 192 "(3,3,3)")
(node 193 "(3,3,3)")
(node 194 "(3,3,3)")
(node 195 "(3,3,3)")
(node 196 "(3,3,3)")
(node 197 "(3,3,3)")
(node 198 "(3,3,3)")
(node 199 "(3,3,3)")
(node 200 "(3,3,3)")
(node 201 "(3,3,3)")
(node 202 "(3,3,3)")
(node 203 "(3,3,3)")
(node 204 "(3,3,3)")
(node 205 "(3,3,3)")
(node 206 "(3,3,3)")
(node 207 "(3,3,3)")
(node 208 "(3,3,3)")
(node 209 "(3,3,3)")
(node 210 "(3,3,3)")
(node 211 "(3,3,3)")
(node 212 "(3,3,3)")
(node 213 "(3,3,3)")
(node 214 "(3,3,3)")
(node 215 "(3,3,3)")
(node 216 "(3,3,3)")
(node 217 "(3,3,3)")
(node 218 "(3,3,3)")
(node 219 "(3,3,3)")
(node 220 "(3,3,3)")
(node 221 "(3,3,3)")
(node 222 "(3,3,3)")
(node 223 "(3,3,3)")
(node 224 "(3,3,3)")
(node 225 "(3,3,3)")
(node 226 "(3,3,3)")
(node 227 "(3,3,3)")
(node 228 "(3,3,3)")
(node 229 "(3,3,3)")
(node 230 "(3,3,3)")
(node 231 "(3,3,3)")
(node 232 "(3,3,3)")
(node 233 "(3,3,3)")
(node 234 "(3,3,3)")
(node 235 "(3,3,3)")
(node 236 "(3,3,3)")
(node 237 "(3,3,3)")
(node 238 "(3,3,3)")
(node 239 "(3,3,3)")
(node 240 "(3,3,3)")
(node 241 "(3,3,3)")
(node 242 "(3,3,3)")
(node 243 "(3,3,3)")
(node 244 "(3,3,3)")
(node 245 "(3,3,3)")
(node 246 "(3,3,3)")
(node 247 "(3,3,3)")
(node 248 "(3,3,3)")
(node 249 "(3,3,3)")
(node 250 "(3,3,3)")
(node 251 "(3,3,3)")
(node 252 "(3,3,3)")
(node 253 "(3,3,3)")
(node 254 "(3,3,3)")
(node 255 "(3,3,3)")
(node 256 "(3,3,3)")
(node 257 "(3,3,3)")
(node 258 "(3,3,3)")
(node 259 "(3,3,3)")
(node 260 "(3,3,3)")
(node 261 "(3,3,3)")
(node 262 "(3,3,3)")
(node 263 "(3,3,3)")
(node 264 "(3,3,3)")
(node 265 "(3,3,3)")
(node 266 "(3,3,3)")
(node 267 "(3,3,3)")
(node 268 "(3,3,3)")
(node 269 "(3,3,3)")
(node 270 "(3,3,3)")
(node 271 "(3,3,3)")
(node 272 "(3,3,3)")
(node 273 "(3,3,3)")
(node 274 "(3,3,3)")
(node 275 "(3,3,3)")
(node 276 "(3,3,3)")
(node 277 "(3,3,3)")
(node 278 "(3,3,3)")
(node 279 "(3,3,3)")
(node 280 "(3,3,3)")
(node 281 "(3,3,3)")
(node 282 "(3,3,3)")
(node 283 "(3,3,3)")
(node 284 "(3,3,3)")
(node 285 "(3,3,3)")
(node 286 "(3,3,3)")
(node 287 "(3,3,3)")
(node 288 "(3,3,3)")
(node 289 "(3,3,3)")
(node 290 "(3,3,3)")
(node 291 "(3,3,3)")
(node 292 "(3,3,3)")
(node 293 "(3,3,3)")
(node 294 "(3,3,3)")
(node 295 "(3,3,3)")
(node 296 "(3,3,3)")
(node 297 "(3,3,3)")
(node 298 "(3,3,3)")
(node 299 "(3,3,3)")
(node 300 "(3,3,3)")
(node 301 "(3,3,3)")
(node 302 "(3,3,3)")
(node 303 "(3,3,3)")
(node 304 "(3,3,3)")
(node 305 "(3,3,3)")
(node 306 "(3,3,3)")
(node 307 "(3,3,3)")
(node 308 "(3,3,3)")
(node 309 "(3,3,3)")
(node 310 "(3,3,3)")
(node 311 "(3,3,3)")
)
(property  0 int "viewSrcAnchorShape"
(default "0" "-1")
)
(property  0 size "viewSrcAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  0 string "viewTexture"
(default "" "")
)
(property  0 int "viewTgtAnchorShape"
(default "0" "50")
)
(property  0 size "viewTgtAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(graph_attributes 0 
(string "name" "ylipolytica_loira_2011")
(string "id" "ylipolytica_loira_2011")
(string "compartments" "cytoplasm;peroxisome")
(string "file" "/Users/anna/pero.tlp")
(string "outside_compartments" ";cytoplasm")
)
(controller 
(DataSet "Tulip Classic" 
(DataSet "views" 
(DataSet "view0" 
(DataSet "Node Link Diagram view" 
(DataSet "data" 
(DataSet "Display" 
(bool "antialiased" true)
(bool "arrow" true)
(bool "displayNodes" true)
(bool "displayEdges" true)
(bool "displayMetaNodes" true)
(bool "nodeLabel" true)
(bool "edgeLabel" false)
(bool "metaLabel" false)
(bool "outScreenLabel" false)
(bool "elementOrdered" false)
(bool "elementZOrdered" false)
(bool "edgeColorInterpolation" false)
(bool "edgeSizeInterpolation" false)
(bool "edge3D" false)
(bool "labelScaled" true)
(int "labelMinSize" 10)
(int "labelMaxSize" 30)
(int "selectedNodesStencil" 2)
(int "selectedMetaNodesStencil" 2)
(int "selectedEdgesStencil" 2)
(int "nodesStencil" 65535)
(int "metaNodesStencil" 65535)
(int "edgesStencil" 65535)
(int "nodesLabelStencil" 65535)
(int "metaNodesLabelStencil" 65535)
(int "edgesLabelStencil" 65535)
(bool "edgesMaxSizeToNodesSize" true)
(color "selectionColor" "(255,0,255,255)")
(int "labelsDensity" 100)
(bool "labelsAreBillboarded" false)
(bool "polylines3DAreBicolored" false)
)
(string "scene" "<?xml version=\"1.0\"?>
<scene>
  <data>
    <viewport>(0,0,715,1032)</viewport>
    <background>(255,255,255,255)</background>
  </data>
  <children>
    <GlLayer name=\"Background\">
      <data>
        <camera>
          <data>
            <center>(123.75,144.027,0)</center>
            <eyes>(123.75,144.027,263.5)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>263.5</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(-8,-30,-0.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(255.5,318.055,0.5)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>0</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"background\" type=\"Gl2DRect\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
              <top>0</top>
              <bottom>1</bottom>
              <left>0</left>
              <right>1</right>
              <inPercent>1</inPercent>
              <textureName>TulipBitmapDir/tex_back.png</textureName>
              <xInv>0</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Main\">
      <data>
        <camera>
          <data>
            <center>(123.985,274.877,0)</center>
            <eyes>(123.985,274.877,263.5)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1.4641</zoomFactor>
            <sceneRadius>263.5</sceneRadius>
            <d3>1</d3>
            <sceneBoundingBox0>(-8,126.387,-1.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(221.919,318.055,263.5)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"Hulls\" type=\"GlComposite\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
            </data>
            <children/>
          </GlEntity>
          <GlEntity name=\"graph\" type=\"GlGraphComposite\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Foreground\">
      <data>
        <camera>
          <data>
            <center>(123.75,144.027,0)</center>
            <eyes>(123.75,144.027,263.5)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>263.5</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(-8,126.387,-1.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(221.919,318.055,263.5)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"labrilogo\" type=\"Gl2DRect\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
              <top>55</top>
              <bottom>5</bottom>
              <left>5</left>
              <right>55</right>
              <inPercent>0</inPercent>
              <textureName>TulipBitmapDir/logolabri.jpg</textureName>
              <xInv>1</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
  </children>
</scene>
")
)
)
(uint "id" 0)
(int "x" 0)
(int "y" 0)
(int "width" 717)
(int "height" 1059)
(bool "maximized" false)
)
(DataSet "view1" 
(DataSet "Python Script view" 
(string "script code" "from tulip import *
from colorsys import hsv_to_rgb

def annotate(clusters, graph, ubiquitous_species):
	isVersionOf = graph.getStringVectorProperty(\"isVersionOf\")
	ancestor = graph.getStringProperty(\"ancestor\")
	cluster_num = 0
	transform = lambda f: tuple(sorted(ubiquitous_species & set(map(lambda it: graph[\"id\"][it], f))))
	for clu in clusters:
		chain_num = 0
		for r in clu:
			reaction_num = 0
			rev = not graph[\"reversible\"][r] or transform(graph.getInNodes(r)) <= transform(graph.getOutNodes(r))
			isVersionOf[r] = [\"{0}.{1}.{2}.{3}.{4}\".format(\"_\", cluster_num, chain_num, reaction_num, rev)]
			ancestor[r] = \"{0}.{1}\".format(cluster_num, reaction_num)
			chain_num += 1
		cluster_num += 1

def do_cluster(reactions, ubiquitous_species, id2parent, graph):
	vk2r = {}
	for r in reactions:
		key = getVerticalKey(r, ubiquitous_species, id2parent, graph)
		if vk2r.has_key(key):
			vk2r[key].append(r)
		else:
			vk2r[key] = [r]
	return vk2r.values()
	
def getReactions2Factor(graph, n2clu):
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubs = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	id2parent = {graph[\"id\"][n] : clu for (n, clu) in n2clu.iteritems()}
	vk2r = {}
	for r in rs:
		print \"O_o\"
		key = getVerticalKey(r, ubs, id2parent, graph)
		print key
		if vk2r.has_key(key):
			vk2r[key].append(r)
		else:
			vk2r[key] = [r]
	return vk2r.values()
	
def markSimilarReactions(graph, name=\"similar reactions\"):
	rClusterGraph = graph.addCloneSubGraph(name)
	ancestor = graph.getStringProperty(\"ancestor\")
	id_ = graph[\"id\"]
	print \"vertical merge on \", graph.getName()
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubiquitous_species = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	id2parent = {id_[n] : (ancestor[n] if ancestor[n] else id_[n]) for n in sp - ubiquitous_species}
	clus = do_cluster(rs, ubiquitous_species, id2parent, graph)
	clusters = filter(lambda clu: len(clu) > 1, clus)
	reverseIfNeeded(clusters, graph, ubiquitous_species, id2parent)
	drawClusters(clusters, rClusterGraph, graph)
	annotate(clus, graph, ubiquitous_species)
	# if no clusters found, remove the \"reaction clusters\" sub-graph
	if rClusterGraph.numberOfSubGraphs() == 0: graph.delSubGraph(rClusterGraph)

def reverseIfNeeded(clusters, graph, ubiquitous_species, id2parent):	
	for clu in clusters:
		for r in clu:
			if not graph[\"reversible\"][r]: continue
			ubiquitous_reactants, ubiquitous_products, \\
			specific_reactant_classes, specific_product_classes \\
			= getKeyElements(r, ubiquitous_species, id2parent, graph)
			if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
				graph[\"viewSelection\"][r] = True
				edgs = list(graph.getInOutEdges(r))
				for e in edgs:
					graph.reverse(e)	
					
def alignToVKey(graph, n2clu):	
	id2parent = {graph[\"id\"][n] : clu for (n, clu) in n2clu.iteritems()}
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubiquitous_species = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	for r in rs:
		if not graph[\"reversible\"][r]: continue
		ubiquitous_reactants, ubiquitous_products, \\
		specific_reactant_classes, specific_product_classes \\
		= getKeyElements(r, ubiquitous_species, id2parent, graph)
		if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
			graph[\"viewSelection\"][r] = True
			edgs = list(graph.getInOutEdges(r))
			for e in edgs:
				graph.reverse(e)	
					
def drawClusters(clusters, rClusterGraph, graph):
	for cluster in clusters:
		nodes = list(cluster)
		for r in cluster:
			nodes.extend(rClusterGraph.getInOutNodes(r))
		sub = rClusterGraph.inducedSubGraph(nodes)
		sub.setName(graph[\"name\"][cluster[0]])
		for r in cluster:
			nodes = [r]
			nodes.extend(sub.getInOutNodes(r))
			subsub = sub.inducedSubGraph(nodes)
			subsub.setName(graph[\"name\"][r])
	colorClu(clusters, graph)
	
def needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
	return (ubiquitous_reactants > ubiquitous_products) \\
	or (not ubiquitous_reactants and not ubiquitous_products \\
	and specific_reactant_classes > specific_product_classes)
	
def getKeyElements(r, ubiquitous_species, id2parent, graph):
	transform = lambda f: {graph[\"id\"][it] for it in f}
	reactants, products = transform(graph.getInNodes(r)), transform(graph.getOutNodes(r))
	ub_tr = lambda f: tuple(sorted(ubiquitous_species & f))
	ubiquitous_reactants, ubiquitous_products = ub_tr(reactants), ub_tr(products)
	getSpecificClasses = lambda species, id2parent: \\
	[id2parent[id] if id2parent.has_key(id) else id for id in species]
	sp_tr = lambda f: tuple(sorted(getSpecificClasses(f - ubiquitous_species, id2parent)))
	specific_reactant_classes, specific_product_classes = sp_tr(reactants), sp_tr(products)
	return ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes
	
def getVerticalKey(r, ubiquitous_species, id2parent, graph):
	ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes \\
	= getKeyElements(r, ubiquitous_species, id2parent, graph)
	if graph[\"reversible\"][r]:
		if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
			ubiquitous_reactants, ubiquitous_products = ubiquitous_products, ubiquitous_reactants
			specific_reactant_classes, specific_product_classes = specific_product_classes, specific_reactant_classes
	return (ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes, )
	
def removeUnusedSubgraphs(graph, rClusterGraph):
	# if no clusters found, remove the \"reaction clusters\" sub-graph
	if rClusterGraph.numberOfSubGraphs() == 0:
		graph.delSubGraph(rClusterGraph)
		
def colorClu(clusters, graph):
	viewColor = graph.getColorProperty(\"viewColor\")
	n = len(clusters)
	colors = [hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
	colors = [tlp.Color(int(255 * r), int(255 * g), int(255 * b)) for (r, g, b) in colors]
	for clu, color in zip(clusters, colors):
		for reaction in clu:
			for edge in graph.getInOutEdges(reaction):
				viewColor.setEdgeValue(edge, color)
	
def verticalCluster(graph):
	factor(graph, \"similar reactions\") 
")
(DataSet "main_scripts" 
(string "main_script0" "/Users/anna/Documents/PhD/tulip/src/python/modules/reaction_clusters_2_metanodes.py")
(string "main_script_src0" "from tulip import *
import ontology
import os

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	clones = [node]
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())
		
def factor(graph):
	clone = graph.addCloneSubGraph(graph.getName())
	quotient = graph.addCloneSubGraph(graph.getName() + \" quotient\")
	ancestor2nodes = {}
	for node in quotient.getNodes():
		ancestor = graph[\"ancestor\"][node]
		if ancestor:
			isReaction = graph[\"reaction\"][node]
			if not isReaction: 				
				neighbours = set()
#				for nn in getClones(quotient, node):
#					for n in quotient.getInNodes(nn):
#						neighbours.add((\"in\", graph[\"ancestor\"][n]))
#					for n in quotient.getOutNodes(nn):
#						neighbours.add((\"out\", graph[\"ancestor\"][n]))
				ancestor = ancestor, tuple(sorted(neighbours))
			ancestor = ancestor, isReaction 
			if ancestor2nodes.has_key(ancestor):
				ancestor2nodes[ancestor].append(node)
			else:
				ancestor2nodes[ancestor] = [node]
	
	ancestor2node_neighbours = {}		
	keys = list(ancestor2nodes.keys())
	for (ancestor, isReaction) in keys:
		if isReaction: continue
		nodes = ancestor2nodes[(ancestor, isReaction)]
		del ancestor2nodes[(ancestor, isReaction)]
		ancestor, neighbours = ancestor
		if ancestor2node_neighbours.has_key(ancestor):
			ancestor2node_neighbours[ancestor].append((nodes, set(neighbours)))
		else:
			ancestor2node_neighbours[ancestor] = [(nodes, set(neighbours))]
		
	for ancestor, lst in ancestor2node_neighbours.iteritems():
		changed = True
		while changed:
			changed = False
			new_lst = []
			for (nodes, neighbours) in lst:
				not_found = True
				for (new_nodes, new_neighbours) in new_lst:
					if neighbours & new_neighbours:
						new_neighbours |= neighbours
						new_nodes.extend(nodes)
						not_found = False
						changed = True
						break
				if not_found:
					new_lst.append((nodes, neighbours))
			lst = new_lst
		for (nodes, neighbours) in lst:
			new_ancestor = (ancestor, tuple(sorted(neighbours))), False
			if ancestor2nodes.has_key(new_ancestor):
				ancestor2nodes[new_ancestor].extend(nodes)
			else:
				ancestor2nodes[new_ancestor] = nodes
		
#	dir_ = os.path.dirname(ontology.__file__)
#	onto = ontology.parse(\"{0}/chebi.obo\".format(dir_))
			
	for (ancestor, isReaction), nodes in ancestor2nodes.iteritems():
		if len(nodes) <= 1: continue		
		all_nodes = list(nodes)
		id2ubN = {}
		if isReaction:
			for node in nodes:
				for n in quotient.getInOutNodes(node):
					if quotient.getRoot()[\"ubiquitous\"][n]:
						id_ = quotient.getRoot()[\"id\"][n]
						if id2ubN.has_key(id_): id2ubN[id_].append(n)
						else: id2ubN[id_] = [n]
		
			ubs = list(quotient.getInOutNodes(nodes[0]))
			isUb = quotient.getRoot()[\"ubiquitous\"]
			for n in ubs:
				if not isUb[n]: continue
				id_ = quotient.getRoot()[\"id\"][n]
				metaNode = quotient.createMetaNode(id2ubN[id_], False)
				updateProps(metaNode, n, quotient, clone)
				isUb[metaNode] = True
				quotient[\"viewSize\"][metaNode] = tlp.Size(3, 3) #bb.width(), bb.height())	
				quotient[\"viewLabel\"][metaNode] = clone[\"viewLabel\"][n]
				graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"chebi_id\"][n]
				quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]				
				updateComprises(id2ubN[id_], quotient, clone, metaNode)
					
		metaNode = quotient.createMetaNode(all_nodes, False)
		updateProps(metaNode, nodes[0], quotient, clone)
			
		if isReaction:	
			quotient[\"viewSize\"][metaNode] = tlp.Size(4, 4) #bb.width(), bb.height())
			quotient[\"viewLabel\"][metaNode] = \"generalized {0}\".format(clone[\"name\"][nodes[0]])
			for n in nodes:
				if not clone[\"reversible\"][metaNode]:
					quotient[\"reversible\"][metaNode] = False	
					break
			quotient[\"geneAssociation\"][metaNode] = \" or \".join(clone[\"geneAssociation\"][it] for it in nodes)	
			updateEcNumber(metaNode, nodes, quotient, clone)			
		else:		
			quotient[\"viewSize\"][metaNode] = tlp.Size(6, 6) #bb.width(), bb.height())	
			quotient[\"viewLabel\"][metaNode] = quotient[\"ancestor\"][metaNode]
			graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"ancestor_chebi_id\"][nodes[0]]
#			updateChebiInfo(metaNode, nodes, quotient, clone, onto)	
							
		quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]
			
		updateComprises(nodes, quotient, clone, metaNode)
		
def updateComprises(nodes, quotient, clone, metaNode):
	comprises = []
	for it in nodes:
		if not clone.isElement(it):
			print it
			continue
		if clone.getStringVectorProperty(\"comprises\")[it]:
			comprises.extend(clone[\"comprises\"][it])
		else:
			comprises.append(clone[\"speciesType\"][it])
	quotient.getStringVectorProperty(\"comprises\")[metaNode] = comprises

def updateChebiInfo(metaNode, nodes, quotient, clone, onto):
	common_parent = findCommonParent(nodes, clone, onto)
	if common_parent:
		quotient[\"viewLabel\"][metaNode] = common_parent.getName()
		par_id = list(common_parent.getAllIds())
		quotient[\"chebi_id\"][metaNode] = par_id
	
def updateEcNumber(metaNode, nodes, quotient, clone):
	ec = set()
	ecNum = clone.getStringProperty(\"ecNumber\")
	for n in nodes:
		numbers = ecNum[n]
		if numbers:
			numbers = set(numbers.split(\",\"))
			if not ec:
				ec = numbers
			else:
				intersection = ec & numbers
				if not intersection:
					print ec
					print numbers
					concensus = list(ec)[0].split(\".\")
					for num in ec | numbers:
						i = 0
						for it in num.split(\".\"):
							if concensus[i] == '-': break
							if concensus[i] != it:
								if i == 0:
									ec = set()
									break
								while i < 4:
									concensus[i] = '-'
									i += 1
								break
							i += 1
					ec = {'.'.join(concensus)}
				else:
					ec = intersection
	quotient[\"ecNumber\"][metaNode] = \",\".join(ec)
		
def findCommonParent(nodes, clone, onto):
	common_parent = None
	for n in nodes:
		chebi_ids = clone[\"chebi_id\"][n]
		if not chebi_ids: continue
		term = None
		for chebi_id in chebi_ids:
			term = onto.getTerm(chebi_id)
			if term: break
		if not term:
			common_parent = None
			break
		if not common_parent:
			common_parent = term
		else:
			common_parent = onto.commonParent(common_parent, term)
			if not common_parent:
				break
	return common_parent
	
def updateProps(metaNode, node, quotient, clone):
	for prop in [\"ancestor\", \"compartment\", \"multiColor\", \"outsideCompartment\", \\
	\"reaction\", \"reversible\", \"sboTerm\", \"speciesType\", \"ubiquitous\", \\
	\"viewBorderColor\", \"viewBorderWidth\", \"viewColor\", \"viewFont\", \"viewFontSize\", \\
	\"viewLabelColor\", \"viewLabelPosition\", \"viewLayout\", \"viewRotation\", \"viewSelection\", \\
	\"viewShape\", \"viewTexture\"]:
		quotient[prop][metaNode] = clone[prop][node]
	quotient[\"id\"][metaNode] = \"meta_\" + clone[\"id\"][node]
")
(string "main_script1" "/Users/anna/Documents/PhD/tulip/src/python/modules/vertical_merge.py")
(string "main_script_src1" "from tulip import *
from colorsys import hsv_to_rgb

def annotate(clusters, graph, ubiquitous_species):
	isVersionOf = graph.getStringVectorProperty(\"isVersionOf\")
	ancestor = graph.getStringProperty(\"ancestor\")
	cluster_num = 0
	transform = lambda f: tuple(sorted(ubiquitous_species & set(map(lambda it: graph[\"id\"][it], f))))
	for clu in clusters:
		chain_num = 0
		for r in clu:
			reaction_num = 0
			rev = not graph[\"reversible\"][r] or transform(graph.getInNodes(r)) <= transform(graph.getOutNodes(r))
			isVersionOf[r] = [\"{0}.{1}.{2}.{3}.{4}\".format(\"_\", cluster_num, chain_num, reaction_num, rev)]
			ancestor[r] = \"{0}.{1}\".format(cluster_num, reaction_num)
			chain_num += 1
		cluster_num += 1

def do_cluster(reactions, ubiquitous_species, id2parent, graph):
	vk2r = {}
	for r in reactions:
		key = getVerticalKey(r, ubiquitous_species, id2parent, graph)
		if vk2r.has_key(key):
			vk2r[key].append(r)
		else:
			vk2r[key] = [r]
	return vk2r.values()
	
def getReactions2Factor(graph, n2clu):
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubs = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	id2parent = {graph[\"id\"][n] : clu for (n, clu) in n2clu.iteritems()}
	vk2r = {}
	for r in rs:
		print \"O_o\"
		key = getVerticalKey(r, ubs, id2parent, graph)
		print key
		if vk2r.has_key(key):
			vk2r[key].append(r)
		else:
			vk2r[key] = [r]
	return vk2r.values()
	
def markSimilarReactions(graph, name=\"similar reactions\"):
	rClusterGraph = graph.addCloneSubGraph(name)
	ancestor = graph.getStringProperty(\"ancestor\")
	id_ = graph[\"id\"]
	print \"vertical merge on \", graph.getName()
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubiquitous_species = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	id2parent = {id_[n] : (ancestor[n] if ancestor[n] else id_[n]) for n in sp - ubiquitous_species}
	clus = do_cluster(rs, ubiquitous_species, id2parent, graph)
	clusters = filter(lambda clu: len(clu) > 1, clus)
	reverseIfNeeded(clusters, graph, ubiquitous_species, id2parent)
	drawClusters(clusters, rClusterGraph, graph)
	annotate(clus, graph, ubiquitous_species)
	# if no clusters found, remove the \"reaction clusters\" sub-graph
	if rClusterGraph.numberOfSubGraphs() == 0: graph.delSubGraph(rClusterGraph)

def reverseIfNeeded(clusters, graph, ubiquitous_species, id2parent):	
	for clu in clusters:
		for r in clu:
			if not graph[\"reversible\"][r]: continue
			ubiquitous_reactants, ubiquitous_products, \\
			specific_reactant_classes, specific_product_classes \\
			= getKeyElements(r, ubiquitous_species, id2parent, graph)
			if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
				graph[\"viewSelection\"][r] = True
				edgs = list(graph.getInOutEdges(r))
				for e in edgs:
					graph.reverse(e)	
					
def alignToVKey(graph, n2clu):	
	id2parent = {graph[\"id\"][n] : clu for (n, clu) in n2clu.iteritems()}
	ns = set(graph.getNodes())
	rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
	sp = ns - rs
	ubiquitous_species = set(filter(lambda it: graph[\"ubiquitous\"][it], sp))
	for r in rs:
		if not graph[\"reversible\"][r]: continue
		ubiquitous_reactants, ubiquitous_products, \\
		specific_reactant_classes, specific_product_classes \\
		= getKeyElements(r, ubiquitous_species, id2parent, graph)
		if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
			graph[\"viewSelection\"][r] = True
			edgs = list(graph.getInOutEdges(r))
			for e in edgs:
				graph.reverse(e)	
					
def drawClusters(clusters, rClusterGraph, graph):
	for cluster in clusters:
		nodes = list(cluster)
		for r in cluster:
			nodes.extend(rClusterGraph.getInOutNodes(r))
		sub = rClusterGraph.inducedSubGraph(nodes)
		sub.setName(graph[\"name\"][cluster[0]])
		for r in cluster:
			nodes = [r]
			nodes.extend(sub.getInOutNodes(r))
			subsub = sub.inducedSubGraph(nodes)
			subsub.setName(graph[\"name\"][r])
	colorClu(clusters, graph)
	
def needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
	return (ubiquitous_reactants > ubiquitous_products) \\
	or (not ubiquitous_reactants and not ubiquitous_products \\
	and specific_reactant_classes > specific_product_classes)
	
def getKeyElements(r, ubiquitous_species, id2parent, graph):
	transform = lambda f: {graph[\"id\"][it] for it in f}
	reactants, products = transform(graph.getInNodes(r)), transform(graph.getOutNodes(r))
	ub_tr = lambda f: tuple(sorted(ubiquitous_species & f))
	ubiquitous_reactants, ubiquitous_products = ub_tr(reactants), ub_tr(products)
	getSpecificClasses = lambda species, id2parent: \\
	[id2parent[id] if id2parent.has_key(id) else id for id in species]
	sp_tr = lambda f: tuple(sorted(getSpecificClasses(f - ubiquitous_species, id2parent)))
	specific_reactant_classes, specific_product_classes = sp_tr(reactants), sp_tr(products)
	return ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes
	
def getVerticalKey(r, ubiquitous_species, id2parent, graph):
	ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes \\
	= getKeyElements(r, ubiquitous_species, id2parent, graph)
	if graph[\"reversible\"][r]:
		if needToReverse(ubiquitous_reactants, ubiquitous_products, specific_reactant_classes, specific_product_classes):
			ubiquitous_reactants, ubiquitous_products = ubiquitous_products, ubiquitous_reactants
			specific_reactant_classes, specific_product_classes = specific_product_classes, specific_reactant_classes
	return (ubiquitous_reactants, ubiquitous_products, \\
	specific_reactant_classes, specific_product_classes, )
	
def removeUnusedSubgraphs(graph, rClusterGraph):
	# if no clusters found, remove the \"reaction clusters\" sub-graph
	if rClusterGraph.numberOfSubGraphs() == 0:
		graph.delSubGraph(rClusterGraph)
		
def colorClu(clusters, graph):
	viewColor = graph.getColorProperty(\"viewColor\")
	n = len(clusters)
	colors = [hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
	colors = [tlp.Color(int(255 * r), int(255 * g), int(255 * b)) for (r, g, b) in colors]
	for clu, color in zip(clusters, colors):
		for reaction in clu:
			for edge in graph.getInOutEdges(reaction):
				viewColor.setEdgeValue(edge, color)
	
def verticalCluster(graph):
	factor(graph, \"similar reactions\") 
")
(string "main_script2" "/Users/anna/Documents/PhD/tulip/src/python/porgy/sbml2porgy_pipeline.py")
(string "main_script_src2" "from tulip import *
from generalize import cluclu
from reaction_clusters_to_port_rules import addLabelGeneralizationRules, \\
addReactionFactoringRules, addRevertReactionRules

COMPARTMENT = \"peroxisome\"

def main(graph):
	tlp.Observable().holdObservers() 
	root = graph.getRoot()
	
	for n in graph.getNodes():
		if graph[\"reaction\"][n]:
			graph[\"viewLabel\"][n] = \"\"
			graph[\"name\"][n] = \"\"
	
#	runGraphScript(\"build_compartments_hierarchy.py\", root)
#	
#	comp = findSubGraphByName(root, COMPARTMENT)
#	
#	runGraphScript(\"draw_compartment.py\", comp)
#	
#	qd = findSubGraphByName(root, \"compartment drawings\")
#	qdc = findSubGraphByName(qd, COMPARTMENT)
#	qo = findSubGraphByName(qdc, \"quotient opened\")
#	if not qo: qo = comp
#	if not qo: qo = root
#	
#	co = root.addSubGraph()
#	co.setName(COMPARTMENT)
#	for n in qo.getNodes():
#		if list(qo.getInOutEdges(n)):
#			co.addNode(n)
#			for prop in qo.getProperties():
#				if co.existProperty(prop):
#					co[prop][n] = qo[prop][n]
#	for e in qo.getEdges():
#		co.addEdge(e)
#		for prop in qo.getProperties():
#			if co.existProperty(prop):
#				co[prop][e] = qo[prop][e]
#		
#	runGraphScript(\"filter_root.py\", co)
#	
#	to_delete = list(root.getSubGraphs()) 
#	for sub in to_delete:
#		root.delAllSubGraphs(sub)
	
#	co = root.addCloneSubGraph(COMPARTMENT)
#	
#	runGraphScript(\"cluster_reactions.py\", root)
	
	n2clu, rclu = cluclu(root)
	  
#	rc = findSubGraphByName(root, \"similar reactions\")
#	
#	runGraphScript(\"draw_reaction_clusters.py\", rc)
#	
#	root.delAllSubGraphs(rc)
	
	runGraphScript(\"convert_to_port_graph.py\", root)
	
	addLabelGeneralizationRules(root, n2clu)
	addReactionFactoringRules(root, rclu, n2clu)
	addRevertReactionRules(root, rclu, n2clu)
	
# 	runGraphScript(\"reaction_clusters_to_port_rules.py\", root)
 	
 	traceRoot = findSubGraphByName(root, \"TraceRoot\")
 	g0 = findSubGraphByName(root, \"G0\")
 	
 	traceMain = tlp.newSubGraph(traceRoot, \"TraceMain\")
	
	for n in g0.getNodes():
		traceMain.addNode(n)
	for e in g0.getEdges():
		traceMain.addEdge(e)
	metaNode = traceMain.createMetaNode(g0)
	fixProperties(traceMain, metaNode)
	fixProperties(traceRoot, metaNode)
	fixProperties(root, metaNode)
	
	# (uint \"TraceMain\" 89)
	root.setAttribute(\"TraceMain\", traceMain.getId())
	print traceMain.getId()
	
	tlp.Observable().unholdObservers()
	
def fixProperties(traceMain, metaNode):
	traceMain[\"viewShape\"][metaNode] = tlp.NodeShape.Square
#	traceMain.getIntegerProperty(\"NodeType\").setNodeValue(metaNode, 0)
	traceMain[\"viewLabel\"][metaNode] = \"G0\"
	traceMain.getIntegerProperty(\"Type\").setNodeValue(metaNode, 1)
	traceMain.getIntegerProperty(\"Transformation_Instance\").setNodeValue(metaNode, -1)
	traceMain.getStringProperty(\"Transformation_PPropertyName\").setNodeValue(metaNode, \"\")
	traceMain.getIntegerProperty(\"Transformation_Parallel_Information\").setNodeValue(metaNode, 0)
	traceMain.getIntegerProperty(\"Transformation_Rule\").setNodeValue(metaNode, -1)
	traceMain.getStringProperty(\"Transformation_Strategy\").setNodeValue(metaNode, \"\")
		
")
(string "main_script3" "/Users/anna/Documents/PhD/tulip/src/python/porgy/reaction_clusters_to_port_rules.py")
(string "main_script_src3" "from tulip import *
from convert_to_port_graph import *
import os
import ontology

LEFT = 1
RIGHT = 2
BRIDGE = 3
BRIDGE_PORT = 4

CENTER = 1
PORT = 2

def findSubGraphByName(root, name):
	def checkCollection(collection, name):
		new_collection = []
		for element in collection:
			if element:
				if name == element.getName(): return element
				subs = list(element.getSubGraphs())
				if subs: new_collection.extend(subs)
		return checkCollection(new_collection, name) if new_collection else None
	return checkCollection([root], name)
def getCenterPorts(gr, center): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")	
	return filter(lambda it: portType[it] == PORT, list(gr.getOutNodes(center)))
def getCenter(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")	
	return filter(lambda it: portType[it] == CENTER, list(gr.getInNodes(port)))[0]
def getPorts(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")	
	return filter(lambda it: portType[it] == PORT, list(gr.getInOutNodes(port)))
def getInPorts(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")		
	return filter(lambda it: portType[it] == PORT, list(gr.getInNodes(port)))
def getOutPorts(gr, port): 
	portType = gr.getRoot().getIntegerProperty(\"NodeType\")		
	return filter(lambda it: portType[it] == PORT, list(gr.getOutNodes(port)))
	
def isUbiquitous(n, graph):
	return len(graph[\"ancestor\"][n]) == 0
	
def getId(graph, species_port):
	species_center = getCenter(graph, species_port)
	reaction_ports = filter(lambda it: BRIDGE != graph[\"RuleSide\"][it], getPorts(graph, species_port))
	in_ = \"in\" == graph[\"viewLabel\"][species_port]	
	rs = []	
	for rp in reaction_ports:
		r = getCenter(graph, rp)
		numbers = graph[\"isVersionOf\"][r][0].split(\".\")
		reaction_num = numbers[3]
		rev = numbers[4]		
		
		species_ports = set(filter(lambda it: not graph[\"reaction\"][it], getPorts(graph, rp)))
		species_centers = map(lambda sp: getCenter(graph, sp), species_ports)
#		junk_species_centers = filter(lambda sc: isUbiquitous(sc, graph), species_centers)
		junk_neighbors = sorted(set(map(lambda sc: graph[\"viewLabel\"][sc], species_centers)))
		
		
#		in_out = \"in\" if (in_ and not rev) or (not in_ and rev) else \"out\"
		rs.append((reaction_num, tuple(junk_neighbors)))
	return graph[\"ancestor\"][species_center], tuple(sorted(set(rs)))	
	
def copy_node(graph, n, etalon):
	new_n = graph.addNode()
	for propName in etalon.getProperties():
		graph[propName][new_n] = etalon[propName][n]
	return new_n
			
def add_left(graph, n, etalon, shiftY=0):
	new_n = copy_node(graph, n, etalon)
	graph[\"RuleSide\"][new_n] = LEFT
	if shiftY:
		coord = graph[\"viewLayout\"][new_n]	
		coord.setY(coord.getY() + shiftY)
		graph[\"viewLayout\"][new_n] = coord
	return new_n
	
def add_right(graph, n, etalon, shiftY=0):
	new_n = copy_node(graph, n, etalon)
	coord = graph[\"viewLayout\"][new_n]	
	coord.setX(coord.getX() + 250)	
	graph[\"viewLayout\"][new_n] = coord
	graph[\"RuleSide\"][new_n] = RIGHT
	graph.getBooleanProperty(\"new\")[new_n] = True
	return new_n

def add_bridge(graph, rule_name):
	bridge = graph.addNode()
	graph[\"viewColor\"][bridge] = tlp.Color(200,200,200)
	graph[\"viewLabel\"][bridge] = rule_name
	graph[\"viewLayout\"][bridge] = tlp.Coord(150,0,0)
	graph[\"viewSize\"][bridge] = tlp.Size(1,10,1)
#	graph.getStringProperty(\"LayoutAlgorithm\")[bridge] = \"none\"
	graph[\"viewShape\"][bridge] = tlp.NodeShape.RoundedBox
	graph.getRoot().getIntegerProperty(\"NodeType\")[bridge] = CENTER
	graph[\"RuleSide\"][bridge] = BRIDGE	
	return bridge	
	
def add_side(graph, etalon, add_operation, side):
	edges = set()
	ports = []
	n2new_n, new_n2n = {}, {}
	for n in etalon.getNodes():
		new_n = add_operation(graph, n, etalon)	
		n2new_n[n] = new_n	
		new_n2n[new_n] = n
		if graph.getRoot().getIntegerProperty(\"NodeType\")[new_n] == PORT:
			graph[\"state\"][new_n] = \"\"
			graph[\"Arity\"][new_n] = len(list(etalon.getRoot().getInOutEdges(n))) - 1
			if not graph[\"reaction\"][new_n]: ports.append(new_n)
		for out in etalon.getOutNodes(n):
			edges.add((n, out))
		
	for (fro_n, to_n) in set(edges):
		graph[\"RuleSide\"][graph.addEdge(n2new_n[fro_n], n2new_n[to_n])] = side
	return ports, new_n2n, n2new_n
	
def add_nd(graph, etalon, n, add_operation, side, shiftY=0):
	in_p, out_p = None, None
	new_n = add_operation(graph, n, etalon, shiftY)
	for pt in getCenterPorts(etalon, n):
		new_p = add_operation(graph, pt, etalon, shiftY)
		graph[\"state\"][new_p] = \"not used\"
		graph[\"Arity\"][new_p] = len(list(etalon.getRoot().getInOutEdges(pt))) - 1
		if etalon[\"viewLabel\"][pt] == \"in\": in_p = new_p 
		else: out_p = new_p
		graph[\"RuleSide\"][graph.addEdge(new_n, new_p)] = side
	return new_n, in_p, out_p
	
def addLabelGeneralizationRules(gr, n2clu): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
		
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	ruleNames = []
	for n, clu in n2clu.iteritems():
		rule_name = \"rule_{1}_FROM_{0}\".format(root[\"name\"][n].replace(\" \", \"_\"), clu.replace(\" \", \"_\"))
		ruleNames.append(rule_name)
		graph = tlp.newSubGraph(rules, rule_name)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		new_n, in_p, out_p = add_nd(graph, g0, n, add_left, LEFT)
		r_new_n, r_in_p, r_out_p = add_nd(graph, g0, n, add_right, RIGHT)
		graph[\"viewLabel\"][r_new_n] = clu.getName()
		gr[\"name\"][r_new_n] = clu.getName()
			
		# add bridge
		bridge = add_bridge(graph, rule_name)	
		
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		
		for (lbl, l_p, r_p, dy) in [(\"in\", in_p, r_in_p, -5), (\"out\", out_p, r_out_p, 5)]:
			bridge_port = addPort(graph, bridge, dy, lbl)
			viewShape[bridge_port] = tlp.NodeShape.Hexagon
			ruleSide[bridge_port] = BRIDGE
		
			for e in graph.getInEdges(bridge_port):
				ruleSide[e] = BRIDGE_PORT
				viewColor[e] = tlp.Color(255,0,0)
			for e in [graph.addEdge(l_p, bridge_port), graph.addEdge(bridge_port, r_p)]:
				ruleSide[e] = BRIDGE
				viewColor[e] = tlp.Color(255,0,0)
		graph.setAttribute(\"LayoutAlgorithm\", \"none\")
	print \";\".join(ruleNames)
				
def addReactionFactoringRules(gr, rclu, n2clu): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
		
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	i = 0
	ruleNames = []
	for (r, ins, outs) in rclu:
		rule_name = \"rule_r_{0}\".format(i)
		ruleNames.append(rule_name)
		i += 1 
		graph = tlp.newSubGraph(rules, rule_name)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		# add bridge
		bridge = add_bridge(graph, rule_name)	
		
		
		r_new_n, r_in_p, r_out_p = add_nd(graph, g0, r, add_right, RIGHT)
		graph[\"viewLabel\"][r_new_n] = \"\"
		gr[\"name\"][r_new_n] = \"\"
		
		(new_n0, in_p0, out_p0), (new_n1, in_p1, out_p1) = add_nd(graph, g0, r, add_left, LEFT), add_nd(graph, g0, r, add_left, LEFT, 100)
		for (sps, le, re) in [(ins, lambda in_s_p, out_s_p, in_p, out_p: graph.addEdge(out_s_p, in_p), lambda r_in_s_p, r_out_s_p, r_in_p, r_out_p: graph.addEdge(r_out_s_p, r_in_p)),\\
		(outs, lambda in_s_p, out_s_p, in_p, out_p: graph.addEdge(out_p, in_s_p), lambda r_in_s_p, r_out_s_p, r_in_p, r_out_p: graph.addEdge(r_out_p, r_in_s_p))]:
			for n in sps:
				(new_s_n0, in_s_p0, out_s_p0), (new_s_n1, in_s_p1, out_s_p1) = add_nd(graph, g0, n, add_left, LEFT), add_nd(graph, g0, n, add_left, LEFT, 100)
				r_new_s_n, r_in_s_p, r_out_s_p = add_nd(graph, g0, n, add_right, RIGHT)
				if n2clu.has_key(n):
					clu = n2clu[n]
					graph[\"viewLabel\"][r_new_s_n] = clu.getName()
					gr[\"name\"][r_new_s_n] = clu.getName()
					
					for new_s_n in [new_s_n0, new_s_n1]:
						graph[\"viewLabel\"][new_s_n] = clu.getName()
						gr[\"name\"][new_s_n] = clu.getName()
				for (in_s_p, out_s_p, in_p, out_p) in [(in_s_p0, out_s_p0, in_p0, out_p0), (in_s_p1, out_s_p1, in_p1, out_p1)]:
					ruleSide[le(in_s_p, out_s_p, in_p, out_p)] = LEFT
				ruleSide[re(r_in_s_p, r_out_s_p, r_in_p, r_out_p)] = RIGHT
				for (lbl, l_p0, l_p1, r_p, dy) in [(\"in\", in_s_p0, in_s_p1, r_in_s_p, -5), (\"out\", out_s_p0, out_s_p1, r_out_s_p, 5)]:
					bridge_port0, bridge_port1 = addPort(graph, bridge, dy, lbl), addPort(graph, bridge, dy, lbl)
					for bridge_port in [bridge_port0, bridge_port1]:
						viewShape[bridge_port] = tlp.NodeShape.Hexagon
						ruleSide[bridge_port] = BRIDGE
				
						for e in graph.getInEdges(bridge_port):
							ruleSide[e] = BRIDGE_PORT
							viewColor[e] = tlp.Color(255,0,0)
					for e in [graph.addEdge(l_p0, bridge_port0), graph.addEdge(l_p1, bridge_port1), graph.addEdge(bridge_port0, r_p), graph.addEdge(bridge_port1, r_p)]:
						ruleSide[e] = BRIDGE
						viewColor[e] = tlp.Color(255,0,0)
		graph.setAttribute(\"LayoutAlgorithm\", \"none\")
	print \";\".join(ruleNames)

def addRevertReactionRules(gr, rclu, n2clu): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
		
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	i = 0
	ruleNames = []
	for (r, ins, outs) in rclu:
		rule_name = \"rule_revert_{0}\".format(i)
		ruleNames.append(rule_name)
		i += 1 
		graph = tlp.newSubGraph(rules, rule_name)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		# add bridge
		bridge = add_bridge(graph, rule_name)	
		
		new_n, in_p, out_p = add_nd(graph, g0, r, add_left, LEFT)
		r_new_n, r_in_p, r_out_p = add_nd(graph, g0, r, add_right, RIGHT)
		for (sps, le, re) in [(ins, lambda in_s_p, out_s_p: graph.addEdge(out_p, in_s_p), lambda r_in_s_p, r_out_s_p: graph.addEdge(r_out_s_p, r_in_p)),\\
		(outs, lambda in_s_p, out_s_p: graph.addEdge(out_s_p, in_p), lambda r_in_s_p, r_out_s_p: graph.addEdge(r_out_p, r_in_s_p))]:
			for n in sps:
				new_s_n, in_s_p, out_s_p = add_nd(graph, g0, n, add_left, LEFT)
				r_new_s_n, r_in_s_p, r_out_s_p = add_nd(graph, g0, n, add_right, RIGHT)
				if n2clu.has_key(n):
					clu = n2clu[n]
					graph[\"viewLabel\"][r_new_s_n] = clu.getName()
					gr[\"name\"][r_new_s_n] = clu.getName()
					
					graph[\"viewLabel\"][new_s_n] = clu.getName()
					gr[\"name\"][new_s_n] = clu.getName()
				ruleSide[le(in_s_p, out_s_p)] = LEFT
				ruleSide[re(r_in_s_p, r_out_s_p)] = RIGHT
				for (lbl, l_p, r_p, dy) in [(\"in\", in_s_p, r_in_s_p, -5), (\"out\", out_s_p, r_out_s_p, 5)]:
					bridge_port = addPort(graph, bridge, dy, lbl)
					viewShape[bridge_port] = tlp.NodeShape.Hexagon
					ruleSide[bridge_port] = BRIDGE
				
					for e in graph.getInEdges(bridge_port):
						ruleSide[e] = BRIDGE_PORT
						viewColor[e] = tlp.Color(255,0,0)
					for e in [graph.addEdge(l_p, bridge_port), graph.addEdge(bridge_port, r_p)]:
						ruleSide[e] = BRIDGE
						viewColor[e] = tlp.Color(255,0,0)
		graph.setAttribute(\"LayoutAlgorithm\", \"none\")
	print \";\".join(ruleNames)									
								
def main(gr): 
	root = gr.getRoot()
	rules = findSubGraphByName(root, \"Rules\")
	if not rules: return
	rclusters = findSubGraphByName(root, \"reaction clusters drawing\")
	if not rclusters: return
	# we assume that this branch structure is like \"reaction clusters drawings\" > \"compartment_name\" > clusters
	rclusters = rclusters.getSubGraphs().next()
	
	g0 = findSubGraphByName(root, \"G0\")
	if not g0: return
	
	result_species_sets = []
	n2g0_n = {}
	graph2perimeter = {}
	i = 0	
	for cluster in rclusters.getSubGraphs():
		rule_name = \"rule_{0}\".format(i)
		i += 1 
		graph = tlp.newSubGraph(rules, rule_name)
		ruleSide = rules.getIntegerProperty(\"RuleSide\")
		arity = graph.getIntegerProperty(\"Arity\")
		portType = graph.getRoot().getIntegerProperty(\"NodeType\")
		
		# add left side
		left_ports, left_n2n, n2left_n = add_side(graph, cluster, add_left, LEFT)
					
		# add right side
		right_ports, right_n2n, n2right_n = add_side(graph, cluster.getSubGraphs().next(), add_right, RIGHT)
			
		# add bridge
		bridge = add_bridge(graph, rule_name)	
			
		left_perimeter = []
		for port in left_ports:
			for neighbor in getPorts(g0, left_n2n[port]):
				if not n2left_n.has_key(neighbor):
					left_perimeter.append(port)
			
		id2species = {}
		all_ports = list(left_ports)
		all_ports.extend(right_ports)
		for species_port in all_ports:
			if not isUbiquitous(species_port, graph):
				sp_id = getId(graph, species_port)
				center = getCenter(graph, species_port)
				if id2species.has_key(sp_id):
					id2species[sp_id].add(center)
				else:
					id2species[sp_id] = {center} 
				
		species_sets = id2species.values()
		for s_set in species_sets:
			for s in s_set:
				if left_n2n.has_key(s):
					n2g0_n[s] = left_n2n[s]
			add = True
			for r_set in result_species_sets:
				if r_set & s_set:
					r_set |= s_set
					add = False
					break
			if add: 
				result_species_sets.append(s_set)		
				
		graph2perimeter[graph] = left_perimeter, right_ports, bridge
		
	all_graphs = [g0, root, rules]
	all_graphs.extend(list(rules.getSubGraphs()))
	
	for sp_set in result_species_sets:
		sp_set_f = filter(lambda ti: n2g0_n.has_key(ti), sp_set)
		if not sp_set_f: continue
		common_name = rclusters[\"ancestor\"][sp_set_f[0]]
		for n in sp_set:
			name = root[\"name\"][n] if n2g0_n.has_key(n) else common_name 
			g0_n = n2g0_n[n] if n2g0_n.has_key(n) else None	
			for gr in all_graphs:
				if gr.isElement(n): 
					gr[\"viewLabel\"][n] = common_name
					gr[\"name\"][n] = name
				if g0_n and gr.isElement(g0_n):
					gr[\"viewLabel\"][g0_n] = common_name
					gr[\"name\"][g0_n] = name
					
	# connect to the bridge
	
	for graph, (left_perimeter, right_ports, bridge) in graph2perimeter.iteritems():
		dy = -5
		id2bridge_port = {}
		
		viewColor =  graph.getColorProperty(\"viewColor\")
		viewShape =  graph.getIntegerProperty(\"viewShape\")
		state = graph.getStringProperty(\"state\")
		arity = graph.getIntegerProperty(\"Arity\")
		
		i = 0
		for species_port in set(left_perimeter):
			port_id = getId(graph, species_port)
			bridge_port = addPort(graph, bridge, dy, \"{0}\".format(port_id))
			i += 1
			viewShape[bridge_port] = tlp.NodeShape.Hexagon
			ruleSide[bridge_port] = BRIDGE
			for e in graph.getInEdges(bridge_port):
				ruleSide[e] = BRIDGE_PORT
				viewColor[e] = tlp.Color(255,0,0)
			dy += 2
			if id2bridge_port.has_key(port_id):
				id2bridge_port[port_id].append(bridge_port)
			else:
				id2bridge_port[port_id] = [bridge_port]
			e = graph.addEdge(species_port, bridge_port)
			ruleSide[e] = BRIDGE
			viewColor[e] = tlp.Color(255,0,0)
				
		for species_port in set(right_ports):
			port_id = getId(graph, species_port)
			if id2bridge_port.has_key(port_id):
				for bridge_port in id2bridge_port[port_id]:
					e = graph.addEdge(bridge_port, species_port)
					ruleSide[e] = BRIDGE
					viewColor[e] = tlp.Color(255,0,0)
			
			
")
(string "main_script4" "/Users/anna/Documents/PhD/tulip/src/python/modules/generalize.py")
(string "main_script_src4" "from tulip import *
from extract_chebi import getOnto
from vertical_merge import markSimilarReactions, getReactions2Factor, alignToVKey
from reaction_clusters_2_metanodes import factor
from shorten_names import shorten

def getN2term(graph, onto):
	n2term = {}	
	chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
	for n in graph.getNodes():		
		if graph[\"reaction\"][n] or graph[\"ubiquitous\"][n]: continue
		chebi_id_values = chebi_id[n]
		for chebi_id_value in chebi_id_values:
			term = onto.getTerm(chebi_id_value)
			if term: 
				n2term[n] = term
				break
	return n2term

def add2map(m, key, value):
	if m.has_key(key): m[key].add(value)
	else: m[key] = {value}
	
def getReaction2cluster(graph, n2clu):
	rs_clusters = getReactions2Factor(graph, n2clu)	
	r2clu, i = {}, 0
	for rs in rs_clusters:
		for r in rs: r2clu[r] = i
		i += 1
	return r2clu
	
def markAncestors(graph, n2term, term2clu):
	anc = graph.getStringProperty(\"ancestor\")
	anc_id = graph.getStringVectorProperty(\"ancestor_chebi_id\")	
	for n, term in n2term.iteritems():
		if not term2clu.has_key(term): continue
		(name, idd) = term2clu[term]
		anc[n] = name
		anc_id[n] = idd

def maximize(graph, term2clu, n2term):
	n2clu, clu2nodes = {}, {}
	for n, term in n2term.iteritems():
		if term2clu.has_key(term):
			n2clu[n] = term2clu[term]
			add2map(clu2nodes, term2clu[term], n)
			
	r2clu = getReaction2cluster(graph, n2clu)
	alignToVKey(graph, n2clu)
	
	for (clu, nodes) in clu2nodes.iteritems():
		neighbours2terms = {}
		for node in nodes:
			# reactions this species participated in			
			neighbours = set()
			for nn in getClones(graph, node):
				neighbours |= {(\"in\", r2clu[r]) for r in graph.getInNodes(nn)}
				neighbours |= {(\"out\", r2clu[r]) for r in graph.getOutNodes(nn)}
			key = tuple(sorted(neighbours))
			add2map(neighbours2terms, key, n2term[node])		
		cha = True
		lst = neighbours2terms.iteritems()
		new_lst = []
		for neighbours, terms in lst:
			neighbours = set(neighbours)
			to_remove = []
			for (new_neighbours, new_terms) in new_lst:
				if neighbours & new_neighbours:
					neighbours |= new_neighbours
					terms |= new_terms
					to_remove.append((new_neighbours, new_terms))
			new_lst = filter(lambda it: not it in to_remove, new_lst)
			new_lst.append((neighbours, terms))
		if len(new_lst) > 1:
			i = 0
			for neighbours, terms in new_lst:
				n_clu = clu + (i,)
				i += 1
				for t in terms: term2clu[t] = n_clu
	return term2clu

def getClu2term(term2clusters):
	clu2term = {}
	for term, clu in term2clusters.iteritems():
		add2map(clu2term, clu, term)
	return clu2term
	
def computeEq0(interesting_terms):
	return {term: (0,) for term in interesting_terms}

def getReactions(graph, node):
	rs = set()
	for nn in getClones(graph, node):
		rs |= set(graph.getInOutNodes(nn))
	return rs

def getConflicts(graph, terms, term2n, n2term):
	nodes = {term2n[t] for t in terms}
	r2ns = {}
	for n in nodes:
		for r in getReactions(graph, n):
			add2map(r2ns, r, n)
	confs = filter(lambda ns: len(ns) > 1, r2ns.values())
	return [{n2term[n] for n in ns} for ns in confs]

def fixStoich(graph, term2clu, n2term, onto):
	clu2terms = getClu2term(term2clu)
	term2n = {t:n for (n,t) in n2term.iteritems()}
	for clu, terms in clu2terms.iteritems():
		conflicts = getConflicts(graph, terms, term2n, n2term)
		if not conflicts: continue
		t_sets = partition(terms, onto, conflicts)
		i = 0
		for ts in t_sets:
			i += 1
			n_clu = clu + (i,)
			for t in ts: term2clu[t] = n_clu
	return term2clu

def partition(terms, onto, conflicts):
	T = onto.commonPts(terms, includingChildren=False).pop()
	
	def good(t_set, conflicts):
		if not t_set: return False
		if len(t_set) <= 1: return True
		good = True
		for c_ts in conflicts:
			if len(t_set & c_ts) > 1:
				good = False
				break 
		return good
		
	psi = set()
	for t in onto.getAnyChildren(T, direct=False, checked=set()):
		t_set = (onto.getAnyChildren(t, direct=False, checked=set()) | {t}) & terms
		if not t_set: continue
		compl_set = tuple(sorted(terms - t_set))
		t_set = tuple(sorted(t_set))		
		psi |= {t_set, compl_set}
		
	to_add = set()
	ps = list(psi)
	i = 0
	for s in psi:
		i += 1
		for ss in ps[i:]:
			sss = tuple(sorted(set(s) - set(ss)))
			if sss and not sss in psi: 
				to_add.add(sss)
			sss = tuple(sorted(set(ss) - set(s)))
			if sss and not sss in psi: 
				to_add.add(sss)
	psi |= to_add		
			
	psi = filter(lambda s: good(s, conflicts), [set(it) for it in psi])
		
	parts = list(reversed(greedy(terms, psi)))
	i = 1
	for part in parts:
		for o_part in parts[i:]: 
			if o_part & part: 
				part -= o_part
		i += 1
	return parts
	
def greedy(terms, psi):
	phi = []
	while terms:
		s = max(psi, key=lambda it: len(it & terms))
		phi.append(s)
		terms -= s
		psi.remove(s)
	return phi	
	
def cluster2term(terms, onto):
	return onto.commonPts(terms, includingChildren=False).pop()
	
def computeRepresentatives(term2clu, clu2term, onto):
	clu2t, t2clu = {}, {}
	for clu, terms in clu2term.iteritems():
		T = cluster2term(terms, onto)
		clu2t[clu] = T	
		add2map(t2clu, T, clu)
	Ts = list(t2clu.keys())
	i = 0
	tr = lambda it: onto.getAnyChildren(it, False, set()) | onto.getEqualTerms(it, None, 0, set())
	t2not = {}	
	for t in Ts:
		kids = tr(t)
		i += 1
		for o_t in Ts[i:]:
			if tr(o_t) & kids:
				if o_t in kids:
					add2map(t2not, t, o_t)
				else:
					add2map(t2not, o_t, t)
	for clu, terms in clu2term.iteritems():
		T = clu2t[clu]
		name = T.getName()
		if t2not.has_key(T):
			name = name + \", but not \" + \", nor \".join([t.getName() for t in t2not[T]])
		for t in terms:
			term2clu[t] = (name, list(T.getAllIds()))
	return term2clu

def fixIncompartibilities(graph, onto, n2term, interesting_terms):	
	term2n = {t:n for (n,t) in n2term.iteritems()}
	print \"---eq-0---\"
	term2clu = computeEq0(interesting_terms)		
	print \"---maximize---\"
	term2clu = maximize(graph, term2clu, n2term)
	clu2term = getClu2term(term2clu)
	for clu, terms in clu2term.iteritems():
		print clu, \" : \", [t.getName() for t in terms]
	print \"---stoich---\"
	term2clu = fixStoich(graph, term2clu, n2term, onto)
	clu2term = getClu2term(term2clu)
	for clu, terms in clu2term.iteritems():
		print clu, \" : \", [t.getName() for t in terms]
#	print \"---maximize---\"
#	term2clu = maximize(graph, term2clu, n2term)
#	clu2term = getClu2term(term2clu)
#	for clu, terms in clu2term.iteritems():
#		print clu, \" : \", [t.getName() for t in terms]
	term2clu = computeRepresentatives(term2clu, clu2term, onto)
	return term2clu

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	clones = [node]
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())			
	
def generalize(graph):
	onto = getOnto(graph)
	n2term = getN2term(graph, onto)
	interesting_terms = set(n2term.values())
	term2clu = fixIncompartibilities(graph, onto, n2term, interesting_terms)
	if not term2clu: return None

	clone = graph.addCloneSubGraph(graph.getName())
	markAncestors(clone, n2term, term2clu)
	markSimilarReactions(clone)
	
	factor(clone)
	grr = None
	for sub in clone.getSubGraphs():
		if ((clone.getName() + \" quotient\") == sub.getName()):
			grr = sub
	print \"-------------------------\\n\"
	dataSet = tlp.getDefaultPluginParameters(\"ChebiColorer\", grr)
	tlp.applyAlgorithm(grr, dataSet, \"ChebiColorer\")
	shorten(grr, onto)
	
	return grr

def cluclu(graph):
	onto = getOnto(graph)
	n2term = getN2term(graph, onto)
	interesting_terms = set(n2term.values())
	term2clu = fixIncompartibilities(graph, onto, n2term, interesting_terms)
	
	n2clu = {}
	for n, term in n2term.iteritems():
		if term2clu.has_key(term):
			(name, idd) = term2clu[term]
			n2clu[n] = name
			
	rs_clusters = getReactions2Factor(graph, n2clu)
	rclu = []
	for rs in rs_clusters:
		r = rs.pop()
		ins, outs = list(graph.getInNodes(r)), list(graph.getOutNodes(r))
		rclu.append((r, ins, outs))
	return n2clu, rclu
")
(int "main_script_id" 1)
)
(DataSet "modules" 
(string "module0" "/Users/anna/Documents/PhD/tulip/src/python/modules/edge_length_optimizer.py")
(string "module_src0" "from tulip import *
import itertools
import metabolic_utils

def findBestLayoutConfiguration(sg, layoutConfigurations):
	spacing = 30
	minAvgEdgeLength = 1000000
	bestConf = None
	wholeConfs = list(itertools.product(*layoutConfigurations))
	
	trSg = sg.addSubGraph()
	contentSg = sg.addSubGraph()
	membranePos = -1
	for n in sg.getNodes():
		if sg[\"membrane\"][n] and sg[\"reaction\"][n]:
			membranePos = sg[\"membranePos\"][n]
			trSg.addNode(n)
			for ne in sg.getInOutNodes(n):
				if sg[\"clone\"][ne] or sg[\"outsideMembrane\"][ne]:
					trSg.addNode(ne)
					trSg.addEdge(sg.existEdge(n, ne, False))
		elif not trSg.isElement(n):
			canAdd = True
			if sg[\"clone\"][n] or sg[\"outsideMembrane\"][n]:
				if sg[\"membrane\"][sg.getInOutNodes(n).next()]:
					canAdd = False
			if not canAdd:
				continue
				
			contentSg.addNode(n)				
			for ne in sg.getInOutNodes(n):
				if not sg[\"membrane\"][ne]:
					contentSg.addNode(ne)
					contentSg.addEdge(sg.existEdge(n, ne, False))	
	
	for conf in wholeConfs:
		for g in conf:
			for n in g.getNodes():
				sg[\"viewLayout\"][n] = g[\"viewLayout\"][n]
			for e in g.getEdges():
				sg[\"viewLayout\"][e] = g[\"viewLayout\"][e]
				
		if membranePos != -1:
			bbTr = tlp.computeBoundingBox(trSg, trSg[\"viewLayout\"], trSg[\"viewSize\"], trSg[\"viewRotation\"])
			bbContent = tlp.computeBoundingBox(contentSg, contentSg[\"viewLayout\"], contentSg[\"viewSize\"], contentSg[\"viewRotation\"])
			if membranePos == 0:
				newCenter = tlp.Vec3f(bbTr[1][0] + spacing + bbContent.width() / 2, bbTr.center()[1], 0)
			elif membranePos == 1:
				newCenter = tlp.Vec3f(bbTr.center()[0], bbTr[0][1] - spacing - bbContent.height() / 2, 0)
			elif membranePos == 2:
				newCenter = tlp.Vec3f(bbTr[0][0] - spacing - bbContent.width() / 2, bbTr.center()[1], 0)
			elif membranePos == 3:
				newCenter = tlp.Vec3f(bbTr.center()[0], bbTr[1][1] + spacing + bbContent.height() / 2, 0)	
			sg[\"viewLayout\"].center(newCenter, contentSg)
			for n in sg.getNodes():
				for g in conf:
					if g.isElement(n):
						g[\"viewLayout\"][n] = sg[\"viewLayout\"][n]
			for e in sg.getEdges():
				for g in conf:
					if g.isElement(e):
						g[\"viewLayout\"][e] = sg[\"viewLayout\"][e]
		avgEdgeLength = sg[\"viewLayout\"].averageEdgeLength()
		if (avgEdgeLength <= minAvgEdgeLength):
			minAvgEdgeLength = avgEdgeLength
			bestConf = conf
	sg.delSubGraph(trSg)
	sg.delSubGraph(contentSg)
				
	for g in bestConf:
		for n in g.getNodes():
			sg[\"viewLayout\"][n] = g[\"viewLayout\"][n]
			sg[\"viewSize\"][n] = g[\"viewSize\"][n]
			sg[\"viewMetaGraph\"][n] = g[\"viewMetaGraph\"][n]
		for e in g.getEdges():
			sg[\"viewLayout\"][e] = g[\"viewLayout\"][e]

def findBestLayoutConfiguration2(sg, selectedNodes):
		ccfp = tlp.ConnectedTest.computeConnectedComponents(selectedNodes)
		for cc in ccfp:
			layoutConfigurations = []
			for n in cc:
				metaSg = sg[\"viewMetaGraph\"][n]
				metaSgConfs = []
				for conf in metaSg.getSubGraphs():
					metaSgConfs.append(conf)
				if len(metaSgConfs) > 0:
					layoutConfigurations.append(metaSgConfs)
			nbConfs = 1
			for confs in layoutConfigurations:
				print nbConfs
				nbConfs *= len(confs)
			print nbConfs
			if nbConfs < 50000:
				findBestLayoutConfiguration(sg, layoutConfigurations)
			else:
				sgCC = selectedNodes.inducedSubGraph(cc)
				betweeness = tlp.DoubleProperty(sgCC)
				dataSet = tlp.getDefaultPluginParameters(\"Betweenness Centrality\")
				dataSet[\"norm\"] = True
				sgCC.computeDoubleProperty(\"Betweenness Centrality\", betweeness, dataSet)
				firstPass = []
				secondPass = []
				for n in sgCC.getNodes():
					if betweeness[n] > betweeness.getNodeMax()/2:
						firstPass.append(n)
					else:
						secondPass.append(n)
						
				fpSg = sgCC.inducedSubGraph(firstPass)
				spSg = sgCC.inducedSubGraph(secondPass)
												
				findBestLayoutConfiguration2(sg, fpSg)
				findBestLayoutConfiguration2(sg, spSg)
				
				selectedNodes.delAllSubGraphs(sgCC)	

def optimizeEdgeLengthOnQuotient(quotient):
	origLayoutSg = quotient.getSuperGraph().addSubGraph(quotient.getName() + \" original\")
	origLayoutSgLayout = origLayoutSg.getLocalLayoutProperty(\"viewLayout\")
	finalLayoutSg = quotient.getSuperGraph().addSubGraph(quotient.getName() + \" final\")
	finalLayoutSgLayout = finalLayoutSg.getLocalLayoutProperty(\"viewLayout\")
	layoutConfigurations = []
	metaNodes = []
	nodesToRemove = []
	for n in quotient.getNodes():
		if quotient.isMetaNode(n):
			metaNodes.append(n)
			metaGraph = quotient[\"viewMetaGraph\"][n]
			metaGraph[\"viewLayout\"].center(quotient[\"viewLayout\"][n])
			
			metaSgConfs = []
			for conf in metaGraph.getSubGraphs():
				metaSgConfs.append(conf)
				conf[\"viewLayout\"].center(quotient[\"viewLayout\"][n])
			if len(metaSgConfs) > 0:	
				layoutConfigurations.append(metaSgConfs)	
			
			for ne in metaGraph.getNodes():
				nodesToRemove.append(ne)
				origLayoutSg.addNode(ne)
				finalLayoutSg.addNode(ne)
				origLayoutSgLayout[ne] = metaGraph[\"viewLayout\"][ne] 
				finalLayoutSgLayout[ne] = metaGraph[\"viewLayout\"][ne]
			for e in metaGraph.getEdges():
				origLayoutSg.addEdge(e)
				finalLayoutSg.addEdge(e)
				origLayoutSgLayout[e] = metaGraph[\"viewLayout\"][e] 
				finalLayoutSgLayout[e] = metaGraph[\"viewLayout\"][e]	
		else:
			origLayoutSg.addNode(n)
			finalLayoutSg.addNode(n)
			origLayoutSgLayout[n] = quotient[\"viewLayout\"][n] 
			finalLayoutSgLayout[n] = quotient[\"viewLayout\"][n]
			
	for e in quotient.getEdges():
		if quotient.isMetaEdge(e):
			for ee in metabolic_utils.getOriginalEdgesInMetaEdge(quotient, e):
				if origLayoutSg.isElement(quotient.getRoot().source(ee)) and origLayoutSg.isElement(quotient.getRoot().target(ee)):
					origLayoutSg.addEdge(ee)
					finalLayoutSg.addEdge(ee)
		else:
			origLayoutSg.addEdge(e)
			finalLayoutSg.addEdge(e)
			
	if len(layoutConfigurations) > 0:
			nbConfs = 1
			for confs in layoutConfigurations:
				nbConfs *= len(confs)
			print nbConfs
			if nbConfs < 50000:	
				findBestLayoutConfiguration(finalLayoutSg, layoutConfigurations)
			else:
				firstPass = []
				secondPass = []
				quotient.push(False)
				tlp.SimpleTest.makeSimple(quotient)
				for n in metaNodes:
					if quotient.deg(n) > 2 and not quotient[\"membrane\"][n]:
						firstPass.append(n)
					elif not quotient[\"membrane\"][n]:
						secondPass.append(n)	
				quotient.pop()
				fpSg = quotient.inducedSubGraph(firstPass)
				spSg = quotient.inducedSubGraph(secondPass)
				
				fpSg.setName(\"first pass\")
				spSg.setName(\"second pass\")
					
				findBestLayoutConfiguration2(finalLayoutSg, fpSg)
				findBestLayoutConfiguration2(finalLayoutSg, spSg)
				
				quotient.delSubGraph(fpSg)
				quotient.delSubGraph(spSg)	
	
	for n in quotient.getNodes():
		if quotient.isMetaNode(n):
			sel = tlp.BooleanProperty(quotient.getSuperGraph())
			metaNodeSg = quotient[\"viewMetaGraph\"][n]
			for nm in metaNodeSg.getNodes():
				metaNodeSg[\"viewLayout\"][nm] = finalLayoutSgLayout[nm]
				sel[nm] = True
			for e in metaNodeSg.getEdges():
				metaNodeSg[\"viewLayout\"][e] = finalLayoutSg[\"viewLayout\"][e]	
				sel[e] = True
				
			bbOld = tlp.computeBoundingBox(origLayoutSg, origLayoutSg[\"viewLayout\"], origLayoutSg[\"viewSize\"], origLayoutSg[\"viewRotation\"], sel)	
			bbNew = tlp.computeBoundingBox(finalLayoutSg, finalLayoutSg[\"viewLayout\"], finalLayoutSg[\"viewSize\"], finalLayoutSg[\"viewRotation\"], sel)
			
			quotient[\"viewLayout\"][n] = tlp.Coord(bbNew.center())	
			quotient[\"viewSize\"][n] = tlp.Size(bbNew.width(), bbNew.height())	
			            
		else:
			quotient[\"viewLayout\"][n] = finalLayoutSgLayout[n]
	
	forDataSet = tlp.getDefaultPluginParameters(\"Fast Overlap Removal\", quotient)
	forDataSet[\"x border\"] = 10
	forDataSet[\"y border\"] = 10
	quotient.computeLayoutProperty(\"Fast Overlap Removal\", quotient[\"viewLayout\"], forDataSet)
		
	quotient.getSuperGraph().delSubGraph(origLayoutSg)
	quotient.getSuperGraph().delSubGraph(finalLayoutSg)
")
)
(DataSet "plugins" 
(string "plugin0" "/Users/anna/Documents/PhD/tulip/src/python/plugins/ChebiColorer.py")
(string "plugin_src0" "from tulip import *
import tulipplugins
import colorsys
from model_utils import *

class ChebiColorer(tlp.Algorithm):
	def __init__(self, context):
		tlp.Algorithm.__init__(self, context)

	def check(self):
		return (True, \"Ok\")

	def run(self):
		graph = self.graph
		isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		name =  graph.getStringProperty(\"name\")
		reaction =  graph.getBooleanProperty(\"reaction\")
		multiColor =  graph.getColorVectorProperty(\"multiColor\")
		ubiquitous = graph.getBooleanProperty(\"ubiquitous\")
		
		ns = set(graph.getNodes())
		rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
		sp = ns - rs
		grey = tlp.Color(211, 211, 211)
		vo2node = {}		
		ancestor = graph.getStringProperty(\"ancestor\")
		for n in sp:
			multiColor[n] = [grey]
			viewColor[n] = grey
			if ubiquitous[n]:	continue
			key = ancestor[n]
			if key:
				if not vo2node.has_key(key): vo2node[key] = [n]
				else: vo2node[key].append(n)
						
		n = len(vo2node.keys())
		colors = [colorsys.hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
		colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
		
		for ((vo, nodes), color) in zip(vo2node.iteritems(), colors):
			for node in nodes:
				mc = multiColor[node]
				if mc == [grey]: mc = [color]
				else: mc.append(color)
				multiColor[node] = mc
				viewColor[node] = color
						
		ecNum =  graph.getStringProperty(\"ecNumber\")
		ec2node = {}
		for n in rs:
			viewColor[n] = grey
			multiColor[n] = [grey]
			ec = ecNum[n]
			if ec:
				ecs = ec.split(\",\")
				for ec in ecs:			
					if not ec2node.has_key(ec): ec2node[ec] = [n]
					else: ec2node[ec].append(n)
		
		n = len(ec2node.keys())
		colors = [colorsys.hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
		colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
		
		for ((ec, nodes), color) in zip(ec2node.iteritems(), colors):
			for node in nodes:
				mc = multiColor[node]
				if mc == [grey]: mc = [color]
				else: mc.append(color)
				multiColor[node] = mc
				viewColor[node] = color
				for e in graph.getInOutEdges(node):
					mc = multiColor[e]
					if mc == [grey]: mc = [color]
					else: mc.append(color)
					multiColor[e] = mc
					viewColor[e] = color
		return True

# The line below does the magic to register the plugin to the plugin database
# and updates the GUI to make it accessible through the menus.
tulipplugins.registerAlgorithmPluginOfGroup(\"ChebiColorer\", \"ChebiColorer\", \"anna\", \"21/02/2012\", \"\", \"1.0\", \"Metabolic\")
")
(string "plugin1" "/Users/anna/Documents/PhD/tulip/src/python/plugins/ChebiAnnotator.py")
(string "plugin_src1" "from tulip import *
import tulipplugins
from metabolic_widgets import *
import ontology
import os

class ChebiAnnotator(tlp.Algorithm):
	def __init__(self, context):
		tlp.Algorithm.__init__(self, context)
#		self.addStringParameter(\"file::Ontology file\", \"Ontology file in obo format.\", \"\")		
		self.chebi = None

	def check(self):
		dir = os.path.dirname(ontology.__file__)
		self.chebi = ontology.parse(\"{0}/chebi.obo\".format(dir))
#		self.chebi = parse(self.dataSet[\"file::Ontology file\"])		
		return (self.chebi != None, \"Could not parse an ontology file. Make sure that the path you provided exists and the format is obo.\")

	def run(self):
		chebi = self.chebi
		graph = self.graph
		name =  graph.getStringProperty(\"name\")
		id_ = graph.getStringProperty(\"id\")
		is_ =  graph.getStringVectorProperty(\"is\")
		chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
		isReaction = graph.getBooleanProperty(\"reaction\")
		no_annotation = \"DO NOT ANNOTATE\"
		name2annotation = {}
		byDefault, doNothing = False, False
		for n in graph.getNodes():
			if isReaction[n]: continue
			is_annotation = is_[n]
			found = False
			for ii in is_annotation:
				if ii and chebi.getTerm(ontology.removeMiriamPrefix(ii)):
					found = True
					break
			if not found:
				name_ = name[n]
				end = name_.find(\"[\")
				if end != -1: name_ = name_[0:end].strip()
				if name2annotation.has_key(name_): 
					is_annotation = name2annotation[name_]
				else:
					possibilities = chebi.getIdsByName(name_)
					if not possibilities: 
						end = name_.find(\"(\")
						if end != -1: name_ = name_[0:end].strip()
						possibilities = chebi.getIdsByName(name_)
						if not possibilities: continue
					if len(possibilities) > 1 and not byDefault: 
						if doNothing: continue
						# ask user what to choose
						dialog = OptionSelectionDialog(\"Choose an ontology term for {1} ({0})\".format(id_[n], name_))
						dialog.addOptions(sorted(map(lambda id: \"{0} {1}\".format(id, chebi.getTerm(id).getName()), possibilities)))
						dialog.addOption(no_annotation)
						if not dialog.exec_(): continue
						byDefault = dialog.isByDefault()
						doNothing = dialog.isDoNothing()
						result = dialog.getSelectedOption()
						if no_annotation == result: continue					
						is_annotation = result[0:result.find(\" \")]
					else: is_annotation = possibilities.pop()
					name2annotation[name_] = is_annotation
				value = list(is_[n])
				value.append(ontology.addMiriamPrefix(is_annotation))
				is_[n] = value
				vv = list(chebi_id[n])
				vv.append(is_annotation.lower())
				chebi_id[n] = vv
		return True   


tulipplugins.registerAlgorithmPluginOfGroup(\"ChebiAnnotator\", \"ChebiAnnotator\", \"anna\", \"22/02/2012\", \"\", \"1.0\", \"Metabolic\")
")
)
)
(uint "id" 0)
(int "x" 717)
(int "y" 0)
(int "width" 717)
(int "height" 1059)
(bool "maximized" false)
)
)
)
)
)
