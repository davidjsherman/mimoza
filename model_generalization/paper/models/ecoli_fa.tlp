(tlp "2.3"
(date "06-17-2013")
(comments "This file was generated by Tulip.")
(nb_nodes 174)
;(nodes <node_id> <node_id> ...)
(nodes 0..173)
(nb_edges 393)
;(edge <edge_id> <source_id> <target_id>)
(edge 0 41 64)
(edge 1 75 19)
(edge 2 64 40)
(edge 3 72 19)
(edge 4 33 65)
(edge 5 73 19)
(edge 6 65 35)
(edge 7 76 19)
(edge 8 28 66)
(edge 9 78 19)
(edge 10 66 30)
(edge 11 79 19)
(edge 12 22 67)
(edge 13 81 19)
(edge 14 67 21)
(edge 15 82 19)
(edge 16 18 68)
(edge 17 84 19)
(edge 18 68 17)
(edge 19 85 19)
(edge 20 12 69)
(edge 21 89 19)
(edge 22 69 9)
(edge 23 87 19)
(edge 24 6 70)
(edge 25 49 70)
(edge 26 70 4)
(edge 27 70 50)
(edge 28 88 19)
(edge 29 71 5)
(edge 30 91 19)
(edge 31 72 3)
(edge 32 19 92)
(edge 33 5 72)
(edge 34 94 19)
(edge 35 95 19)
(edge 36 73 3)
(edge 37 4 73)
(edge 38 36 76)
(edge 39 7 74)
(edge 40 0 74)
(edge 41 36 70)
(edge 42 74 13)
(edge 43 36 77)
(edge 44 36 69)
(edge 45 75 1)
(edge 46 14 75)
(edge 47 76 3)
(edge 48 2 76)
(edge 49 36 80)
(edge 50 77 6)
(edge 51 36 75)
(edge 52 8 77)
(edge 53 78 11)
(edge 54 36 68)
(edge 55 8 78)
(edge 56 36 83)
(edge 57 36 67)
(edge 58 79 11)
(edge 59 9 79)
(edge 60 36 86)
(edge 61 36 66)
(edge 62 80 12)
(edge 63 36 90)
(edge 64 15 80)
(edge 65 81 16)
(edge 66 36 65)
(edge 67 15 81)
(edge 68 36 93)
(edge 69 36 64)
(edge 70 82 16)
(edge 71 17 82)
(edge 72 36 96)
(edge 73 37 64)
(edge 74 83 18)
(edge 75 24 83)
(edge 76 37 65)
(edge 77 84 23)
(edge 78 37 66)
(edge 79 24 84)
(edge 80 37 67)
(edge 81 37 68)
(edge 82 85 23)
(edge 83 21 85)
(edge 84 37 70)
(edge 85 37 69)
(edge 86 86 22)
(edge 87 69 43)
(edge 88 29 86)
(edge 89 87 27)
(edge 90 70 43)
(edge 91 29 87)
(edge 92 64 43)
(edge 93 65 43)
(edge 94 88 27)
(edge 95 30 88)
(edge 96 66 43)
(edge 97 89 26)
(edge 98 67 43)
(edge 99 31 89)
(edge 100 68 43)
(edge 101 44 40)
(edge 102 36 44)
(edge 103 90 28)
(edge 104 34 90)
(edge 105 37 44)
(edge 106 91 32)
(edge 107 35 91)
(edge 108 44 43)
(edge 109 32 92)
(edge 110 44 35)
(edge 111 92 34)
(edge 112 44 30)
(edge 113 93 47)
(edge 114 93 33)
(edge 115 38 93)
(edge 116 44 21)
(edge 117 94 39)
(edge 118 44 17)
(edge 119 38 94)
(edge 120 44 9)
(edge 121 44 4)
(edge 122 95 39)
(edge 123 40 95)
(edge 124 55 95)
(edge 125 96 42)
(edge 126 96 57)
(edge 127 96 10)
(edge 128 41 96)
(edge 129 58 96)
(edge 130 59 96)
(edge 131 97 20)
(edge 132 97 52)
(edge 133 25 97)
(edge 134 53 97)
(edge 135 54 97)
(edge 136 71 98)
(edge 137 99 77)
(edge 138 100 80)
(edge 139 101 83)
(edge 140 102 86)
(edge 141 103 90)
(edge 142 104 93)
(edge 143 105 71)
(edge 144 77 106)
(edge 145 80 107)
(edge 146 83 108)
(edge 147 86 109)
(edge 148 90 110)
(edge 149 111 64)
(edge 150 112 65)
(edge 151 113 66)
(edge 152 114 67)
(edge 153 115 68)
(edge 154 116 69)
(edge 155 64 117)
(edge 156 65 118)
(edge 157 66 119)
(edge 158 67 120)
(edge 159 68 121)
(edge 160 69 122)
(edge 161 72 123)
(edge 162 78 124)
(edge 163 81 125)
(edge 164 84 126)
(edge 165 87 127)
(edge 166 89 128)
(edge 167 129 92)
(edge 168 94 130)
(edge 169 131 72)
(edge 170 132 78)
(edge 171 133 81)
(edge 172 134 84)
(edge 173 135 87)
(edge 174 136 89)
(edge 175 92 137)
(edge 176 138 94)
(edge 177 139 72)
(edge 178 140 78)
(edge 179 141 81)
(edge 180 142 84)
(edge 181 143 87)
(edge 182 144 89)
(edge 183 145 94)
(edge 184 146 73)
(edge 185 147 79)
(edge 186 148 82)
(edge 187 149 85)
(edge 188 150 88)
(edge 189 151 91)
(edge 190 152 74)
(edge 191 74 153)
(edge 192 74 154)
(edge 193 77 45)
(edge 194 80 45)
(edge 195 83 45)
(edge 196 86 45)
(edge 197 90 45)
(edge 198 93 45)
(edge 199 46 93)
(edge 200 46 77)
(edge 201 46 80)
(edge 202 46 83)
(edge 203 46 86)
(edge 204 46 90)
(edge 205 48 8)
(edge 206 36 48)
(edge 207 48 45)
(edge 208 46 48)
(edge 209 48 15)
(edge 210 48 24)
(edge 211 48 29)
(edge 212 48 34)
(edge 213 48 38)
(edge 214 51 73)
(edge 215 44 51)
(edge 216 51 79)
(edge 217 51 82)
(edge 218 51 85)
(edge 219 51 88)
(edge 220 51 91)
(edge 221 51 95)
(edge 222 56 73)
(edge 223 56 79)
(edge 224 56 82)
(edge 225 56 85)
(edge 226 56 88)
(edge 227 56 91)
(edge 228 56 95)
(edge 229 60 19)
(edge 230 51 60)
(edge 231 56 60)
(edge 232 71 61)
(edge 233 61 72)
(edge 234 61 78)
(edge 235 48 61)
(edge 236 61 81)
(edge 237 61 84)
(edge 238 61 87)
(edge 239 61 89)
(edge 240 92 61)
(edge 241 61 94)
(edge 242 72 62)
(edge 243 78 62)
(edge 244 81 62)
(edge 245 84 62)
(edge 246 87 62)
(edge 247 89 62)
(edge 248 94 62)
(edge 249 63 72)
(edge 250 63 78)
(edge 251 63 81)
(edge 252 63 84)
(edge 253 63 87)
(edge 254 63 89)
(edge 255 63 94)
(edge 256 155 72)
(edge 257 155 78)
(edge 258 155 81)
(edge 259 155 84)
(edge 260 155 87)
(edge 261 155 89)
(edge 262 155 94)
(edge 263 156 19)
(edge 264 61 156)
(edge 265 156 62)
(edge 266 63 156)
(edge 267 155 156)
(edge 268 157 19)
(edge 269 36 157)
(edge 270 158 64)
(edge 271 158 65)
(edge 272 158 66)
(edge 273 158 67)
(edge 274 158 68)
(edge 275 158 70)
(edge 276 158 69)
(edge 277 68 159)
(edge 278 69 159)
(edge 279 70 159)
(edge 280 64 159)
(edge 281 65 159)
(edge 282 66 159)
(edge 283 67 159)
(edge 284 41 160)
(edge 285 160 40)
(edge 286 158 160)
(edge 287 160 159)
(edge 288 33 160)
(edge 289 160 35)
(edge 290 28 160)
(edge 291 160 30)
(edge 292 22 160)
(edge 293 160 21)
(edge 294 18 160)
(edge 295 160 17)
(edge 296 12 160)
(edge 297 160 9)
(edge 298 6 160)
(edge 299 160 4)
(edge 300 71 161)
(edge 301 161 72)
(edge 302 161 77)
(edge 303 161 78)
(edge 304 161 80)
(edge 305 161 81)
(edge 306 161 83)
(edge 307 161 84)
(edge 308 161 86)
(edge 309 161 87)
(edge 310 161 90)
(edge 311 92 161)
(edge 312 161 93)
(edge 313 161 94)
(edge 314 162 95)
(edge 315 162 73)
(edge 316 162 79)
(edge 317 162 82)
(edge 318 162 85)
(edge 319 162 88)
(edge 320 162 91)
(edge 321 163 3)
(edge 322 4 163)
(edge 323 162 163)
(edge 324 163 11)
(edge 325 9 163)
(edge 326 163 16)
(edge 327 17 163)
(edge 328 163 23)
(edge 329 21 163)
(edge 330 163 27)
(edge 331 30 163)
(edge 332 163 32)
(edge 333 35 163)
(edge 334 163 39)
(edge 335 40 163)
(edge 336 164 77)
(edge 337 164 80)
(edge 338 164 83)
(edge 339 164 86)
(edge 340 164 90)
(edge 341 164 93)
(edge 342 90 165)
(edge 343 93 165)
(edge 344 77 165)
(edge 345 80 165)
(edge 346 83 165)
(edge 347 86 165)
(edge 348 166 6)
(edge 349 161 166)
(edge 350 164 166)
(edge 351 166 165)
(edge 352 166 12)
(edge 353 166 18)
(edge 354 166 22)
(edge 355 166 28)
(edge 356 166 33)
(edge 357 160 167)
(edge 358 167 163)
(edge 359 72 168)
(edge 360 163 168)
(edge 361 78 168)
(edge 362 81 168)
(edge 363 84 168)
(edge 364 87 168)
(edge 365 168 92)
(edge 366 94 168)
(edge 367 169 160)
(edge 368 166 169)
(edge 369 169 96)
(edge 370 72 170)
(edge 371 78 170)
(edge 372 81 170)
(edge 373 84 170)
(edge 374 87 170)
(edge 375 94 170)
(edge 376 171 72)
(edge 377 171 78)
(edge 378 171 81)
(edge 379 171 84)
(edge 380 171 87)
(edge 381 171 94)
(edge 382 172 72)
(edge 383 172 78)
(edge 384 172 81)
(edge 385 172 84)
(edge 386 172 87)
(edge 387 172 94)
(edge 388 161 173)
(edge 389 173 168)
(edge 390 173 170)
(edge 391 171 173)
(edge 392 172 173)
(cluster 7
(nodes 0..173)
(edges 0..392)
(cluster 386
(nodes 0..18 20..35 38..42 47 49..50 52..55 57..59 64..154)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 29 31 33 36..37 39..40 42 45..48 50 52..53 55 58..59 62 64..65 67 70..71 74..75 77 79 82..83 86 88..89 91 94..95 97 99 103..104 106..107 109 111 113..115 117 119 122..192)
(cluster 387
(nodes 4 6 9 12 17..18 21..22 28 30 33 35 40..41 49..50 64..70 111..122)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 149..160)
(cluster 388
(nodes 40..41 111 117 64)
(edges 155 0 2 149)
)
(cluster 389
(nodes 65 35 112 33 118)
(edges 150 156 6 4)
)
(cluster 390
(nodes 30 66 28 113 119)
(edges 10 151 157 8)
)
(cluster 391
(nodes 120 21..22 67 114)
(edges 152 12 158 14)
)
(cluster 392
(nodes 115 121 17..18 68)
(edges 16 18 153 159)
)
(cluster 393
(nodes 116 12 122 9 69)
(edges 160 20 22 154)
)
(cluster 394
(nodes 70 50 6 4 49)
(edges 24..27)
)
)
(cluster 395
(nodes 6 8 12 15 18 22 24 28..29 33..34 38 47 77 80 83 86 90 93 99..104 106..110)
(edges 50 52 62 64 74..75 86 88 103..104 113..115 137..142 144..148)
(cluster 396
(nodes 106 6 77 8 99)
(edges 50 52 137 144)
)
(cluster 397
(nodes 100 15 80 12 107)
(edges 145 62 138 64)
)
(cluster 398
(nodes 101 108 18 83 24)
(edges 75 146 139 74)
)
(cluster 399
(nodes 86 22 102 29 109)
(edges 140 86 147 88)
)
(cluster 400
(nodes 110 90 28 103 34)
(edges 141 148 103..104)
)
(cluster 401
(nodes 47 38 93 33 104)
(edges 113..115 142)
)
)
(cluster 402
(nodes 3..4 9 11 16..17 21 23 27 30 32 35 39..40 55 73 79 82 85 88 91 95 146..151)
(edges 36..37 58..59 70..71 82..83 94..95 106..107 122..124 184..189)
(cluster 403
(nodes 146 3 73 4)
(edges 36..37 184)
)
(cluster 404
(nodes 11 147 9 79)
(edges 185 58..59)
)
(cluster 405
(nodes 16..17 82 148)
(edges 70..71 186)
)
(cluster 406
(nodes 85 21 23 149)
(edges 187 82..83)
)
(cluster 407
(nodes 150 30 27 88)
(edges 95 188 94)
)
(cluster 408
(nodes 35 91 151 32)
(edges 106..107 189)
)
(cluster 409
(nodes 40 55 95 39)
(edges 122..124)
)
)
(cluster 410
(nodes 1..2 14 3 75..76)
(edges 45..48)
(cluster 411
(nodes 75 1 14)
(edges 45..46)
)
(cluster 412
(nodes 76 2..3)
(edges 47..48)
)
)
(cluster 413
(nodes 3 5 8 11 15..16 23..24 26..27 29 31 38..39 72 78 81 84 87 89 94 123..128 130..136 138..145)
(edges 31 33 53 55 65 67 77 79 89 91 97 99 117 119 161..166 168..174 176..183)
(cluster 414
(nodes 123 3 5 72 139 131)
(edges 161 31 177 33 169)
)
(cluster 415
(nodes 132 11 78 124 8 140)
(edges 55 170 162 53 178)
)
(cluster 416
(nodes 133 81 15 125 16 141)
(edges 65 171 67 163 179)
)
(cluster 417
(nodes 23..24 134 126 84 142)
(edges 180 172 77 79 164)
)
(cluster 418
(nodes 143 135 27 127 29 87)
(edges 165 91 181 173 89)
)
(cluster 419
(nodes 144 89 26 136 128 31)
(edges 166 182 97 174 99)
)
(cluster 420
(nodes 145 38..39 94 138 130)
(edges 176 117 183 168 119)
)
)
)
(cluster 421
(nodes 0 3..13 15..18 20..25 27..30 32..35 38..42 47 49..50 52..55 57..59 64..74 77..88 90..127 129..135 137..143 145..154 158..173)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 29 31 33 36..37 39..40 42 50 52..53 55 58..59 62 64..65 67 70..71 74..75 77 79 82..83 86 88..89 91 94..95 103..104 106..107 109 111 113..115 117 119 122..165 167..173 175..181 183..192 270..392)
(cluster 1
(nodes 0 3..13 15..18 20..25 27..30 32..35 38..42 47 49..50 52..55 57..59 64..74 77..88 90..127 129..135 137..143 145..154 158..173)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 29 31 33 36..37 39..40 42 50 52..53 55 58..59 62 64..65 67 70..71 74..75 77 79 82..83 86 88..89 91 94..95 103..104 106..107 109 111 113..115 117 119 122..165 167..173 175..181 183..192 270..392)
(cluster 52
(nodes 0 3..13 15..18 20..25 27..30 32..35 38..42 47 49..50 52..55 57..59 64..74 77..88 90..127 129..135 137..143 145..154)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 29 31 33 36..37 39..40 42 50 52..53 55 58..59 62 64..65 67 70..71 74..75 77 79 82..83 86 88..89 91 94..95 103..104 106..107 109 111 113..115 117 119 122..165 167..173 175..181 183..192)
(cluster 53
(nodes 6 8 12 15 18 22 24 28..29 33..34 38 47 77 80 83 86 90 93 99..104 106..110)
(edges 50 52 62 64 74..75 86 88 103..104 113..115 137..142 144..148)
(cluster 54
(nodes 106 6 77 8 99)
(edges 50 137 52 144)
)
(cluster 55
(nodes 80 15 100 107 12)
(edges 145 62 138 64)
)
(cluster 56
(nodes 101 83 18 108 24)
(edges 75 146 139 74)
)
(cluster 57
(nodes 86 102 22 109 29)
(edges 140 86 147 88)
)
(cluster 58
(nodes 110 90 103 28 34)
(edges 141 103 148 104)
)
(cluster 59
(nodes 47 38 93 33 104)
(edges 113..115 142)
)
)
(cluster 60
(nodes 3..4 9 11 16..17 21 23 27 30 32 35 39..40 55 73 79 82 85 88 91 95 146..151)
(edges 36..37 58..59 70..71 82..83 94..95 106..107 122..124 184..189)
(cluster 61
(nodes 146 73 3..4)
(edges 36..37 184)
)
(cluster 62
(nodes 11 147 79 9)
(edges 185 58..59)
)
(cluster 63
(nodes 16 82 17 148)
(edges 70 186 71)
)
(cluster 64
(nodes 85 21 23 149)
(edges 187 82..83)
)
(cluster 65
(nodes 150 30 27 88)
(edges 95 188 94)
)
(cluster 66
(nodes 35 151 91 32)
(edges 106..107 189)
)
(cluster 67
(nodes 55 95 40 39)
(edges 122..124)
)
)
(cluster 68
(nodes 3 5 8 11 15..16 23..24 27 29 38..39 72 78 81 84 87 94 123..127 130..135 138..143 145)
(edges 31 33 53 55 65 67 77 79 89 91 117 119 161..165 168..173 176..181 183)
(cluster 69
(nodes 123 3 5 72 139 131)
(edges 161 31 177 33 169)
)
(cluster 70
(nodes 132 11 78 124 140 8)
(edges 55 170 162 178 53)
)
(cluster 71
(nodes 133 81 15 125 16 141)
(edges 65 171 67 163 179)
)
(cluster 72
(nodes 23..24 134 126 84 142)
(edges 180 77 172 164 79)
)
(cluster 73
(nodes 143 135 27 127 29 87)
(edges 165 91 181 173 89)
)
(cluster 74
(nodes 145 38..39 94 138 130)
(edges 176 117 168 183 119)
)
)
(cluster 75
(nodes 4 6 9 12 17..18 21..22 28 30 33 35 40..41 49..50 64..70 111..122)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 149..160)
(cluster 76
(nodes 40 111 41 117 64)
(edges 155 0 2 149)
)
(cluster 77
(nodes 65 35 112 118 33)
(edges 150 6 156 4)
)
(cluster 78
(nodes 30 66 113 28 119)
(edges 10 151 157 8)
)
(cluster 79
(nodes 120 21 67 22 114)
(edges 152 12 158 14)
)
(cluster 80
(nodes 115 121 17 68 18)
(edges 16 153 18 159)
)
(cluster 81
(nodes 116 122 12 69 9)
(edges 160 20 22 154)
)
(cluster 82
(nodes 70 50 6 49 4)
(edges 24..27)
)
)
)
(cluster 83
(nodes 0 3..13 15..18 20..25 27..30 32..35 38..42 47 49..50 52..55 57..59 64..74 77..88 90..127 129..135 137..143 145..154)
(edges 0 2 4 6 8 10 12 14 16 18 20 22 24..27 29 31 33 36..37 39..40 42 50 52..53 55 58..59 62 64..65 67 70..71 74..75 77 79 82..83 86 88..89 91 94..95 103..104 106..107 109 111 113..115 117 119 122..165 167..173 175..181 183..192)
)
(cluster 84
(nodes 0 7 10 13 20 25 42 52..54 57..59 71 74 92 96..98 105 129 137 152..154 158..173)
(edges 39..40 42 125..127 129..136 143 167 175 190..192 286..287 300 311 323 349..351 357..358 360 365 367..369 388..392)
(cluster 101
(nodes 158..173)
(edges 286..287 323 349..351 357..358 360 367..368 388..392)
)
)
(cluster 85
(nodes 111..115 49 116)
)
(cluster 86
(nodes 121..122 50 117..120)
)
(cluster 87
(nodes 64..70)
)
(cluster 88
(nodes 5 8 15 24 29 34 38)
)
(cluster 89
(nodes 55 146..151)
)
(cluster 90
(nodes 73 79 82 85 88 91 95)
)
(cluster 91
(nodes 99..104)
)
(cluster 92
(nodes 110 47 106..109)
)
(cluster 93
(nodes 77 80 83 86 90 93)
)
(cluster 94
(nodes 4 9 17 21 30 35 40)
)
(cluster 95
(nodes 3 11 16 23 27 32 39)
)
(cluster 96
(nodes 6 12 18 22 28 33 41)
)
(cluster 97
(nodes 123..127 130)
)
(cluster 98
(nodes 131..135 138)
)
(cluster 99
(nodes 139..143 145)
)
(cluster 100
(nodes 72 78 81 84 87 94)
)
)
)
(cluster 422
(nodes 0 7 10 13 19..20 25 36..37 42..46 48 51..54 56..63 71 74 92 96..98 105 129 137 152..157)
(edges 32 39..40 42 72 102 105 108 125..127 129..136 143 167 175 190..192 206..208 215 229..232 235 240 263..269)
)
(cluster 423
(nodes 1 3 11 16 23 26..27 32 39)
)
(cluster 424
(nodes 2 6 12 14 18 22 28 33 41)
)
(cluster 425
(nodes 111..114 49 115..116)
)
(cluster 426
(nodes 121..122 50 117..120)
)
(cluster 427
(nodes 64..70)
)
(cluster 428
(nodes 99..104)
)
(cluster 429
(nodes 110 47 106..109)
)
(cluster 430
(nodes 77 80 83 86 90 93)
)
(cluster 431
(nodes 4 9 17 21 30 35 40)
)
(cluster 432
(nodes 55 146..151)
)
(cluster 433
(nodes 73 79 82 85 88 91 95)
)
(cluster 434
(nodes 5 8 15 24 29 31 34 38)
)
(cluster 435
(nodes 123..128 130)
)
(cluster 436
(nodes 131..136 138)
)
(cluster 437
(nodes 139..145)
)
(cluster 438
(nodes 72 78 81 84 87 89 94)
)
(cluster 439
(nodes 75..76)
)
)
(property  0 bool "boundaryCondition"
(default "false" "false")
)
(property  0 int "charge"
(default "0" "0")
)
(property  0 vector<string> "chebi_id"
(default "()" "()")
(node 0 "(\"kegg.compound:c00638\")")
(node 1 "(\"kegg.compound:c05280\")")
(node 2 "(\"kegg.compound:c03561\")")
(node 3 "(\"chebi:15453\")")
(node 4 "(\"kegg.compound:c00877\")")
(node 5 "(\"pdb-ccd:caa\", \"chebi:15345\")")
(node 6 "(\"kegg.compound:c00136\")")
(node 7 "(\"chebi:18359\")")
(node 8 "(\"chebi:27648\")")
(node 9 "(\"chebi:28706\")")
(node 10 "(\"chebi:15346\")")
(node 11 "(\"chebi:28276\")")
(node 12 "(\"chebi:27540\")")
(node 13 "(\"kegg.compound:c00173\")")
(node 14 "(\"chebi:28387\")")
(node 15 "(\"chebi:28264\")")
(node 16 "(\"kegg.compound:c05266\")")
(node 17 "(\"kegg.compound:c05276\")")
(node 18 "(\"cas:1264-52-4\", \"chebi:15533\")")
(node 19 "(\"chebi:37577\")")
(node 20 "(\"kegg.compound:c00340\")")
(node 21 "(\"kegg.compound:c05275\")")
(node 22 "(\"chebi:28493\")")
(node 23 "(\"chebi:28325\")")
(node 24 "(\"kegg.compound:c05265\")")
(node 25 "(\"kegg.compound:c00435\")")
(node 26 "(\"kegg.compound:c00226\")")
(node 27 "(\"chebi:27668\")")
(node 28 "(\"pdb-ccd:dcc\", \"chebi:15521\")")
(node 29 "(\"chebi:27868\")")
(node 30 "(\"chebi:15471\")")
(node 31 "(\"chebi:17478\")")
(node 32 "(\"kegg.compound:c05260\")")
(node 33 "(\"kegg.compound:c02593\")")
(node 34 "(\"kegg.compound:c05261\")")
(node 35 "(\"chebi:27721\")")
(node 36 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 37 "(\"kegg.compound:c00016\")")
(node 38 "(\"kegg.compound:c05259\")")
(node 39 "(\"kegg.compound:c05258\")")
(node 40 "(\"chebi:28935\")")
(node 41 "(\"kegg.compound:c00154\")")
(node 42 "(\"pdb-ccd:plm\", \"chebi:7896\")")
(node 43 "(\"chebi:17877\")")
(node 45 "(\"chebi:15346\")")
(node 46 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 47 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 49 "(\"kegg.compound:c00016\")")
(node 50 "(\"chebi:17877\")")
(node 51 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 52 "(\"chebi:15846\")")
(node 53 "(\"chebi:16908\")")
(node 54 "(\"chebi:15378\")")
(node 55 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 56 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 57 "(\"chebi:15422\")")
(node 58 "(\"cas:61-19-8\", \"chebi:456215\")")
(node 59 "(\"cas:2466-09-3\", \"chebi:35782\")")
(node 61 "(\"chebi:36586\")")
(node 62 "(\"chebi:15846\")")
(node 63 "(\"chebi:16908\")")
(node 98 "(\"chebi:15346\")")
(node 99 "(\"chebi:15346\")")
(node 100 "(\"chebi:15346\")")
(node 101 "(\"chebi:15346\")")
(node 102 "(\"chebi:15346\")")
(node 103 "(\"chebi:15346\")")
(node 104 "(\"chebi:15346\")")
(node 105 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 106 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 107 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 108 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 109 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 110 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 111 "(\"kegg.compound:c00016\")")
(node 112 "(\"kegg.compound:c00016\")")
(node 113 "(\"kegg.compound:c00016\")")
(node 114 "(\"kegg.compound:c00016\")")
(node 115 "(\"kegg.compound:c00016\")")
(node 116 "(\"kegg.compound:c00016\")")
(node 117 "(\"chebi:17877\")")
(node 118 "(\"chebi:17877\")")
(node 119 "(\"chebi:17877\")")
(node 120 "(\"chebi:17877\")")
(node 121 "(\"chebi:17877\")")
(node 122 "(\"chebi:17877\")")
(node 123 "(\"chebi:15846\")")
(node 124 "(\"chebi:15846\")")
(node 125 "(\"chebi:15846\")")
(node 126 "(\"chebi:15846\")")
(node 127 "(\"chebi:15846\")")
(node 128 "(\"chebi:15846\")")
(node 129 "(\"chebi:15846\")")
(node 130 "(\"chebi:15846\")")
(node 131 "(\"chebi:16908\")")
(node 132 "(\"chebi:16908\")")
(node 133 "(\"chebi:16908\")")
(node 134 "(\"chebi:16908\")")
(node 135 "(\"chebi:16908\")")
(node 136 "(\"chebi:16908\")")
(node 137 "(\"chebi:16908\")")
(node 138 "(\"chebi:16908\")")
(node 139 "(\"chebi:15378\")")
(node 140 "(\"chebi:15378\")")
(node 141 "(\"chebi:15378\")")
(node 142 "(\"chebi:15378\")")
(node 143 "(\"chebi:15378\")")
(node 144 "(\"chebi:15378\")")
(node 145 "(\"chebi:15378\")")
(node 146 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 147 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 148 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 149 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 150 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 151 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 152 "(\"chebi:15422\")")
(node 153 "(\"cas:61-19-8\", \"chebi:456215\")")
(node 154 "(\"cas:2466-09-3\", \"chebi:35782\")")
(node 155 "(\"chebi:15378\")")
(node 158 "(\"kegg.compound:c00016\")")
(node 159 "(\"chebi:17877\")")
(node 161 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 162 "(\"cas:7732-18-5\", \"chebi:29375\")")
(node 164 "(\"chebi:15346\")")
(node 165 "(\"pdb-ccd:aco\", \"chebi:15351\")")
(node 167 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 168 "(\"chebi:61902\")")
(node 169 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 170 "(\"chebi:15846\")")
(node 171 "(\"chebi:16908\")")
(node 172 "(\"chebi:15378\")")
)
(property  0 string "class"
(default "" "")
(node 0 "simple chemical")
(node 1 "simple chemical")
(node 2 "simple chemical")
(node 3 "simple chemical")
(node 4 "simple chemical")
(node 5 "simple chemical")
(node 6 "simple chemical")
(node 7 "simple chemical")
(node 8 "simple chemical")
(node 9 "simple chemical")
(node 10 "simple chemical")
(node 11 "simple chemical")
(node 12 "simple chemical")
(node 13 "simple chemical")
(node 14 "simple chemical")
(node 15 "simple chemical")
(node 16 "simple chemical")
(node 17 "simple chemical")
(node 18 "simple chemical")
(node 20 "simple chemical")
(node 21 "simple chemical")
(node 22 "simple chemical")
(node 23 "simple chemical")
(node 24 "simple chemical")
(node 25 "simple chemical")
(node 26 "simple chemical")
(node 27 "simple chemical")
(node 28 "simple chemical")
(node 29 "simple chemical")
(node 30 "simple chemical")
(node 31 "simple chemical")
(node 32 "simple chemical")
(node 33 "simple chemical")
(node 34 "simple chemical")
(node 35 "simple chemical")
(node 38 "simple chemical")
(node 39 "simple chemical")
(node 40 "simple chemical")
(node 41 "simple chemical")
(node 42 "simple chemical")
(node 47 "simple chemical")
(node 49 "simple chemical")
(node 50 "simple chemical")
(node 52 "simple chemical")
(node 53 "simple chemical")
(node 54 "simple chemical")
(node 55 "simple chemical")
(node 57 "simple chemical")
(node 58 "simple chemical")
(node 59 "simple chemical")
(node 64 "process")
(node 65 "process")
(node 66 "process")
(node 67 "process")
(node 68 "process")
(node 69 "process")
(node 70 "process")
(node 71 "process")
(node 72 "process")
(node 73 "process")
(node 74 "process")
(node 75 "process")
(node 76 "process")
(node 77 "process")
(node 78 "process")
(node 79 "process")
(node 80 "process")
(node 81 "process")
(node 82 "process")
(node 83 "process")
(node 84 "process")
(node 85 "process")
(node 86 "process")
(node 87 "process")
(node 88 "process")
(node 89 "process")
(node 90 "process")
(node 91 "process")
(node 92 "process")
(node 93 "process")
(node 94 "process")
(node 95 "process")
(node 96 "process")
(node 97 "process")
(node 98 "simple chemical")
(node 99 "simple chemical")
(node 100 "simple chemical")
(node 101 "simple chemical")
(node 102 "simple chemical")
(node 103 "simple chemical")
(node 104 "simple chemical")
(node 105 "simple chemical")
(node 106 "simple chemical")
(node 107 "simple chemical")
(node 108 "simple chemical")
(node 109 "simple chemical")
(node 110 "simple chemical")
(node 111 "simple chemical")
(node 112 "simple chemical")
(node 113 "simple chemical")
(node 114 "simple chemical")
(node 115 "simple chemical")
(node 116 "simple chemical")
(node 117 "simple chemical")
(node 118 "simple chemical")
(node 119 "simple chemical")
(node 120 "simple chemical")
(node 121 "simple chemical")
(node 122 "simple chemical")
(node 123 "simple chemical")
(node 124 "simple chemical")
(node 125 "simple chemical")
(node 126 "simple chemical")
(node 127 "simple chemical")
(node 128 "simple chemical")
(node 129 "simple chemical")
(node 130 "simple chemical")
(node 131 "simple chemical")
(node 132 "simple chemical")
(node 133 "simple chemical")
(node 134 "simple chemical")
(node 135 "simple chemical")
(node 136 "simple chemical")
(node 137 "simple chemical")
(node 138 "simple chemical")
(node 139 "simple chemical")
(node 140 "simple chemical")
(node 141 "simple chemical")
(node 142 "simple chemical")
(node 143 "simple chemical")
(node 144 "simple chemical")
(node 145 "simple chemical")
(node 146 "simple chemical")
(node 147 "simple chemical")
(node 148 "simple chemical")
(node 149 "simple chemical")
(node 150 "simple chemical")
(node 151 "simple chemical")
(node 152 "simple chemical")
(node 153 "simple chemical")
(node 154 "simple chemical")
)
(property  0 bool "clone"
(default "false" "false")
(node 10 "true")
(node 47 "true")
(node 49 "true")
(node 50 "true")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 98 "true")
(node 99 "true")
(node 100 "true")
(node 101 "true")
(node 102 "true")
(node 103 "true")
(node 104 "true")
(node 105 "true")
(node 106 "true")
(node 107 "true")
(node 108 "true")
(node 109 "true")
(node 110 "true")
(node 111 "true")
(node 112 "true")
(node 113 "true")
(node 114 "true")
(node 115 "true")
(node 116 "true")
(node 117 "true")
(node 118 "true")
(node 119 "true")
(node 120 "true")
(node 121 "true")
(node 122 "true")
(node 123 "true")
(node 124 "true")
(node 125 "true")
(node 126 "true")
(node 127 "true")
(node 128 "true")
(node 129 "true")
(node 130 "true")
(node 131 "true")
(node 132 "true")
(node 133 "true")
(node 134 "true")
(node 135 "true")
(node 136 "true")
(node 137 "true")
(node 138 "true")
(node 139 "true")
(node 140 "true")
(node 141 "true")
(node 142 "true")
(node 143 "true")
(node 144 "true")
(node 145 "true")
(node 146 "true")
(node 147 "true")
(node 148 "true")
(node 149 "true")
(node 150 "true")
(node 151 "true")
(node 152 "true")
(node 153 "true")
(node 154 "true")
(node 158 "true")
(node 159 "true")
(node 162 "true")
(node 164 "true")
(node 165 "true")
(node 170 "true")
(node 171 "true")
(node 172 "true")
)
(property  0 string "compartment"
(default "" "")
(node 0 "default")
(node 1 "default")
(node 2 "default")
(node 3 "default")
(node 4 "default")
(node 5 "default")
(node 6 "default")
(node 7 "default")
(node 8 "default")
(node 9 "default")
(node 10 "default")
(node 11 "default")
(node 12 "default")
(node 13 "default")
(node 14 "default")
(node 15 "default")
(node 16 "default")
(node 17 "default")
(node 18 "default")
(node 19 "default")
(node 20 "default")
(node 21 "default")
(node 22 "default")
(node 23 "default")
(node 24 "default")
(node 25 "default")
(node 26 "default")
(node 27 "default")
(node 28 "default")
(node 29 "default")
(node 30 "default")
(node 31 "default")
(node 32 "default")
(node 33 "default")
(node 34 "default")
(node 35 "default")
(node 36 "default")
(node 37 "default")
(node 38 "default")
(node 39 "default")
(node 40 "default")
(node 41 "default")
(node 42 "default")
(node 43 "default")
(node 45 "default")
(node 46 "default")
(node 47 "default")
(node 49 "default")
(node 50 "default")
(node 51 "default")
(node 52 "default")
(node 53 "default")
(node 54 "default")
(node 55 "default")
(node 56 "default")
(node 57 "default")
(node 58 "default")
(node 59 "default")
(node 61 "default")
(node 62 "default")
(node 63 "default")
(node 98 "default")
(node 99 "default")
(node 100 "default")
(node 101 "default")
(node 102 "default")
(node 103 "default")
(node 104 "default")
(node 105 "default")
(node 106 "default")
(node 107 "default")
(node 108 "default")
(node 109 "default")
(node 110 "default")
(node 111 "default")
(node 112 "default")
(node 113 "default")
(node 114 "default")
(node 115 "default")
(node 116 "default")
(node 117 "default")
(node 118 "default")
(node 119 "default")
(node 120 "default")
(node 121 "default")
(node 122 "default")
(node 123 "default")
(node 124 "default")
(node 125 "default")
(node 126 "default")
(node 127 "default")
(node 128 "default")
(node 129 "default")
(node 130 "default")
(node 131 "default")
(node 132 "default")
(node 133 "default")
(node 134 "default")
(node 135 "default")
(node 136 "default")
(node 137 "default")
(node 138 "default")
(node 139 "default")
(node 140 "default")
(node 141 "default")
(node 142 "default")
(node 143 "default")
(node 144 "default")
(node 145 "default")
(node 146 "default")
(node 147 "default")
(node 148 "default")
(node 149 "default")
(node 150 "default")
(node 151 "default")
(node 152 "default")
(node 153 "default")
(node 154 "default")
(node 155 "default")
(node 158 "default")
(node 159 "default")
(node 161 "default")
(node 162 "default")
(node 164 "default")
(node 165 "default")
(node 167 "default")
(node 168 "default")
(node 169 "default")
(node 170 "default")
(node 171 "default")
(node 172 "default")
)
(property  0 bool "constant"
(default "false" "false")
)
(property  0 string "ecNumber"
(default "" "")
)
(property  0 vector<string> "encodes"
(default "()" "()")
)
(property  0 bool "fastReaction"
(default "false" "false")
)
(property  0 string "geneAssociation"
(default "" "")
(node 44 " or  or  or  or  or  or ")
(node 166 " or  or  or  or  or ")
(node 156 " or  or  or  or  or  or ")
(node 157 " or ")
(node 48 " or  or  or  or  or ")
(node 60 " or  or  or  or  or  or ")
(node 160 " or  or  or  or  or  or ")
(node 173 " or  or  or  or  or ")
(node 163 " or  or  or  or  or  or ")
)
(property  0 bool "hasOnlySubstanceUnits"
(default "false" "false")
)
(property  0 bool "hasOutsideConnections"
(default "false" "false")
)
(property  0 vector<string> "hasPart"
(default "()" "()")
)
(property  0 vector<string> "hasProperty"
(default "()" "()")
)
(property  0 vector<string> "hasVersion"
(default "()" "()")
)
(property  0 string "id"
(default "" "")
(node 0 "Higher_fatty_acid")
(node 1 "ciscis36DodecadienoylCoA")
(node 2 "SId_R3HydroxybutanoylCoA")
(node 3 "SId_S3HydroxybutyrylCoA")
(node 4 "CrotonylCoA")
(node 5 "AcetoacetylCoA")
(node 6 "ButyrylCoA")
(node 7 "ACP")
(node 8 "SId_OxohexanoylCoA")
(node 9 "SId_2EHexenoylCoA")
(node 10 "CoA")
(node 11 "SId_SHydroxyhexanoylCoA")
(node 12 "HexanoylCoA")
(node 13 "Acylacylcarrier_protein")
(node 14 "transcisLauro26dienoylCoA")
(node 15 "SId_OxooctanoylCoA")
(node 16 "SId_SHydroxyoctanoylCoA")
(node 17 "SId_2EOctenoylCoA")
(node 18 "OctanoylCoA")
(node 19 "meta_ciscis36DodecadienoylCoA")
(node 20 "Reduced_rubredoxin")
(node 21 "SId_2EDecenoylCoA")
(node 22 "DecanoylCoA")
(node 23 "SId_SHydroxydecanoylCoA")
(node 24 "SId_OxodecanoylCoA")
(node 25 "Oxidized_rubredoxin")
(node 26 "SId_Alcohol")
(node 27 "SId_S3HydroxydodecanoylCoA")
(node 28 "LauroylCoA")
(node 29 "SId_OxododecanoylCoA")
(node 30 "SId_2EDodecenoylCoA")
(node 31 "RCHO")
(node 32 "SId_S3HydroxytetradecanoylCoA")
(node 33 "MyristoylCoA")
(node 34 "SId_OxotetradecanoylCoA")
(node 35 "SId_2ETetradecenoylCoA")
(node 36 "meta_SId_R3HydroxybutanoylCoA")
(node 37 "meta_FAD")
(node 38 "SId_OxopalmitoylCoA")
(node 39 "SId_S3HydroxyhexadecanoylCoA")
(node 40 "SId_2EHexadecenoylCoA")
(node 41 "PalmitoylCoA")
(node 42 "Palmitate")
(node 43 "meta_FADH2")
(node 44 "meta_rnR01279")
(node 45 "meta_CoA")
(node 46 "meta_AcetylCoA")
(node 47 "AcetylCoA")
(node 48 "meta_rnR01177")
(node 49 "FAD")
(node 50 "FADH2")
(node 51 "meta_CrotonylCoA")
(node 52 "NAD")
(node 53 "NADH")
(node 54 "H")
(node 55 "H2O")
(node 56 "meta_H2O")
(node 57 "ATP")
(node 58 "AMP")
(node 59 "PPi")
(node 60 "meta_rnR03026")
(node 61 "meta_AcetoacetylCoA")
(node 62 "meta_NAD")
(node 63 "meta_NADH")
(node 64 "rnR01279")
(node 65 "rnR03990")
(node 66 "rnR03857")
(node 67 "rnR04754")
(node 68 "rnR03777")
(node 69 "rnR04751")
(node 70 "rnR01175")
(node 71 "rnR00238")
(node 72 "rnR01975")
(node 73 "rnR03026")
(node 74 "rnR01406")
(node 75 "rnR04756")
(node 76 "rnR03276")
(node 77 "rnR01177")
(node 78 "rnR04748")
(node 79 "rnR04749")
(node 80 "rnR04747")
(node 81 "rnR04745")
(node 82 "rnR04746")
(node 83 "rnR03778")
(node 84 "rnR04743")
(node 85 "rnR04744")
(node 86 "rnR04742")
(node 87 "rnR04741")
(node 88 "rnR04170")
(node 89 "rnR00623")
(node 90 "rnR03858")
(node 91 "rnR04740")
(node 92 "rnR04739")
(node 93 "rnR03991")
(node 94 "rnR04737")
(node 95 "rnR04738")
(node 96 "rnR01280")
(node 97 "rnR02000")
(node 98 "CoA")
(node 99 "CoA")
(node 100 "CoA")
(node 101 "CoA")
(node 102 "CoA")
(node 103 "CoA")
(node 104 "CoA")
(node 105 "AcetylCoA")
(node 106 "AcetylCoA")
(node 107 "AcetylCoA")
(node 108 "AcetylCoA")
(node 109 "AcetylCoA")
(node 110 "AcetylCoA")
(node 111 "FAD")
(node 112 "FAD")
(node 113 "FAD")
(node 114 "FAD")
(node 115 "FAD")
(node 116 "FAD")
(node 117 "FADH2")
(node 118 "FADH2")
(node 119 "FADH2")
(node 120 "FADH2")
(node 121 "FADH2")
(node 122 "FADH2")
(node 123 "NAD")
(node 124 "NAD")
(node 125 "NAD")
(node 126 "NAD")
(node 127 "NAD")
(node 128 "NAD")
(node 129 "NAD")
(node 130 "NAD")
(node 131 "NADH")
(node 132 "NADH")
(node 133 "NADH")
(node 134 "NADH")
(node 135 "NADH")
(node 136 "NADH")
(node 137 "NADH")
(node 138 "NADH")
(node 139 "H")
(node 140 "H")
(node 141 "H")
(node 142 "H")
(node 143 "H")
(node 144 "H")
(node 145 "H")
(node 146 "H2O")
(node 147 "H2O")
(node 148 "H2O")
(node 149 "H2O")
(node 150 "H2O")
(node 151 "H2O")
(node 152 "ATP")
(node 153 "AMP")
(node 154 "PPi")
(node 155 "meta_H")
(node 156 "meta_rnR01975")
(node 157 "meta_rnR04756")
(node 158 "meta_FAD")
(node 159 "meta_FADH2")
(node 160 "meta_rnR01279")
(node 161 "meta_AcetoacetylCoA")
(node 162 "meta_H2O")
(node 163 "meta_rnR03026")
(node 164 "meta_CoA")
(node 165 "meta_AcetylCoA")
(node 166 "meta_rnR01177")
(node 167 "meta_CrotonylCoA")
(node 168 "meta_SId_S3HydroxybutyrylCoA")
(node 169 "meta_ButyrylCoA")
(node 170 "meta_NAD")
(node 171 "meta_NADH")
(node 172 "meta_H")
(node 173 "meta_rnR01975")
)
(property  0 double "initialAmount"
(default "0" "0")
(node 0 "1")
(node 1 "1")
(node 2 "1")
(node 3 "1")
(node 4 "1")
(node 5 "1")
(node 6 "1")
(node 7 "1")
(node 8 "1")
(node 9 "1")
(node 10 "1")
(node 11 "1")
(node 12 "1")
(node 13 "1")
(node 14 "1")
(node 15 "1")
(node 16 "1")
(node 17 "1")
(node 18 "1")
(node 19 "1")
(node 20 "1")
(node 21 "1")
(node 22 "1")
(node 23 "1")
(node 24 "1")
(node 25 "1")
(node 26 "1")
(node 27 "1")
(node 28 "1")
(node 29 "1")
(node 30 "1")
(node 31 "1")
(node 32 "1")
(node 33 "1")
(node 34 "1")
(node 35 "1")
(node 36 "1")
(node 37 "1")
(node 38 "1")
(node 39 "1")
(node 40 "1")
(node 41 "1")
(node 42 "1")
(node 43 "1")
(node 45 "1")
(node 46 "1")
(node 47 "1")
(node 49 "1")
(node 50 "1")
(node 51 "1")
(node 52 "1")
(node 53 "1")
(node 54 "1")
(node 55 "1")
(node 56 "1")
(node 57 "1")
(node 58 "1")
(node 59 "1")
(node 61 "1")
(node 62 "1")
(node 63 "1")
(node 98 "1")
(node 99 "1")
(node 100 "1")
(node 101 "1")
(node 102 "1")
(node 103 "1")
(node 104 "1")
(node 105 "1")
(node 106 "1")
(node 107 "1")
(node 108 "1")
(node 109 "1")
(node 110 "1")
(node 111 "1")
(node 112 "1")
(node 113 "1")
(node 114 "1")
(node 115 "1")
(node 116 "1")
(node 117 "1")
(node 118 "1")
(node 119 "1")
(node 120 "1")
(node 121 "1")
(node 122 "1")
(node 123 "1")
(node 124 "1")
(node 125 "1")
(node 126 "1")
(node 127 "1")
(node 128 "1")
(node 129 "1")
(node 130 "1")
(node 131 "1")
(node 132 "1")
(node 133 "1")
(node 134 "1")
(node 135 "1")
(node 136 "1")
(node 137 "1")
(node 138 "1")
(node 139 "1")
(node 140 "1")
(node 141 "1")
(node 142 "1")
(node 143 "1")
(node 144 "1")
(node 145 "1")
(node 146 "1")
(node 147 "1")
(node 148 "1")
(node 149 "1")
(node 150 "1")
(node 151 "1")
(node 152 "1")
(node 153 "1")
(node 154 "1")
(node 155 "1")
(node 158 "1")
(node 159 "1")
(node 161 "1")
(node 162 "1")
(node 164 "1")
(node 165 "1")
(node 167 "1")
(node 168 "1")
(node 169 "1")
(node 170 "1")
(node 171 "1")
(node 172 "1")
)
(property  0 double "initialConcentration"
(default "0" "0")
)
(property  0 vector<string> "is"
(default "()" "()")
(node 0 "(\"http://identifiers.org/kegg.compound/C00638\")")
(node 1 "(\"http://identifiers.org/kegg.compound/C05280\")")
(node 2 "(\"http://identifiers.org/kegg.compound/C03561\")")
(node 3 "(\"http://identifiers.org/obo.chebi/CHEBI:15453\")")
(node 4 "(\"http://identifiers.org/kegg.compound/C00877\")")
(node 5 "(\"http://identifiers.org/pdb-ccd/CAA\", \"http://identifiers.org/obo.chebi/chebi:15345\")")
(node 6 "(\"http://identifiers.org/kegg.compound/C00136\")")
(node 7 "(\"http://identifiers.org/obo.chebi/CHEBI:18359\")")
(node 8 "(\"http://identifiers.org/obo.chebi/CHEBI:27648\")")
(node 9 "(\"http://identifiers.org/obo.chebi/CHEBI:28706\")")
(node 10 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 11 "(\"http://identifiers.org/obo.chebi/CHEBI:28276\")")
(node 12 "(\"http://identifiers.org/obo.chebi/CHEBI:27540\")")
(node 13 "(\"http://identifiers.org/kegg.compound/C00173\")")
(node 14 "(\"http://identifiers.org/obo.chebi/CHEBI:28387\")")
(node 15 "(\"http://identifiers.org/obo.chebi/CHEBI:28264\")")
(node 16 "(\"http://identifiers.org/kegg.compound/C05266\")")
(node 17 "(\"http://identifiers.org/kegg.compound/C05276\")")
(node 18 "(\"http://identifiers.org/cas/1264-52-4\", \"http://identifiers.org/obo.chebi/chebi:15533\")")
(node 20 "(\"http://identifiers.org/kegg.compound/C00340\")")
(node 21 "(\"http://identifiers.org/kegg.compound/C05275\")")
(node 22 "(\"http://identifiers.org/obo.chebi/CHEBI:28493\")")
(node 23 "(\"http://identifiers.org/obo.chebi/CHEBI:28325\")")
(node 24 "(\"http://identifiers.org/kegg.compound/C05265\")")
(node 25 "(\"http://identifiers.org/kegg.compound/C00435\")")
(node 26 "(\"http://identifiers.org/kegg.compound/C00226\")")
(node 27 "(\"http://identifiers.org/obo.chebi/CHEBI:27668\")")
(node 28 "(\"http://identifiers.org/pdb-ccd/DCC\", \"http://identifiers.org/obo.chebi/chebi:15521\")")
(node 29 "(\"http://identifiers.org/obo.chebi/CHEBI:27868\")")
(node 30 "(\"http://identifiers.org/obo.chebi/CHEBI:15471\")")
(node 31 "(\"http://identifiers.org/obo.chebi/CHEBI:17478\")")
(node 32 "(\"http://identifiers.org/kegg.compound/C05260\")")
(node 33 "(\"http://identifiers.org/kegg.compound/C02593\")")
(node 34 "(\"http://identifiers.org/kegg.compound/C05261\")")
(node 35 "(\"http://identifiers.org/obo.chebi/CHEBI:27721\")")
(node 38 "(\"http://identifiers.org/kegg.compound/C05259\")")
(node 39 "(\"http://identifiers.org/kegg.compound/C05258\")")
(node 40 "(\"http://identifiers.org/obo.chebi/CHEBI:28935\")")
(node 41 "(\"http://identifiers.org/kegg.compound/C00154\")")
(node 42 "(\"http://identifiers.org/pdb-ccd/PLM\", \"http://identifiers.org/obo.chebi/chebi:7896\")")
(node 47 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 49 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 50 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 52 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 53 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 54 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 55 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 57 "(\"http://identifiers.org/obo.chebi/CHEBI:15422\")")
(node 58 "(\"http://identifiers.org/cas/61-19-8\", \"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 59 "(\"http://identifiers.org/cas/2466-09-3\", \"http://identifiers.org/obo.chebi/chebi:35782\")")
(node 64 "(\"http://identifiers.org/kegg.reaction/R01279\")")
(node 65 "(\"http://identifiers.org/kegg.reaction/R03990\")")
(node 66 "(\"http://identifiers.org/kegg.reaction/R03857\")")
(node 67 "(\"http://identifiers.org/kegg.reaction/R04754\")")
(node 68 "(\"http://identifiers.org/kegg.reaction/R03777\")")
(node 69 "(\"http://identifiers.org/kegg.reaction/R04751\")")
(node 70 "(\"http://identifiers.org/kegg.reaction/R01175\")")
(node 71 "(\"http://identifiers.org/kegg.reaction/R00238\")")
(node 72 "(\"http://identifiers.org/kegg.reaction/R01975\")")
(node 73 "(\"http://identifiers.org/kegg.reaction/R03026\")")
(node 74 "(\"http://identifiers.org/kegg.reaction/R01406\")")
(node 75 "(\"http://identifiers.org/kegg.reaction/R04756\")")
(node 76 "(\"http://identifiers.org/kegg.reaction/R03276\")")
(node 77 "(\"http://identifiers.org/kegg.reaction/R01177\")")
(node 78 "(\"http://identifiers.org/kegg.reaction/R04748\")")
(node 79 "(\"http://identifiers.org/kegg.reaction/R04749\")")
(node 80 "(\"http://identifiers.org/kegg.reaction/R04747\")")
(node 81 "(\"http://identifiers.org/kegg.reaction/R04745\")")
(node 82 "(\"http://identifiers.org/kegg.reaction/R04746\")")
(node 83 "(\"http://identifiers.org/kegg.reaction/R03778\")")
(node 84 "(\"http://identifiers.org/kegg.reaction/R04743\")")
(node 85 "(\"http://identifiers.org/kegg.reaction/R04744\")")
(node 86 "(\"http://identifiers.org/kegg.reaction/R04742\")")
(node 87 "(\"http://identifiers.org/kegg.reaction/R04741\")")
(node 88 "(\"http://identifiers.org/kegg.reaction/R04170\")")
(node 89 "(\"http://identifiers.org/kegg.reaction/R00623\")")
(node 90 "(\"http://identifiers.org/kegg.reaction/R03858\")")
(node 91 "(\"http://identifiers.org/kegg.reaction/R04740\")")
(node 92 "(\"http://identifiers.org/kegg.reaction/R04739\")")
(node 93 "(\"http://identifiers.org/kegg.reaction/R03991\")")
(node 94 "(\"http://identifiers.org/kegg.reaction/R04737\")")
(node 95 "(\"http://identifiers.org/kegg.reaction/R04738\")")
(node 96 "(\"http://identifiers.org/kegg.reaction/R01280\")")
(node 97 "(\"http://identifiers.org/kegg.reaction/R02000\")")
(node 98 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 99 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 100 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 101 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 102 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 103 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 104 "(\"http://identifiers.org/obo.chebi/CHEBI:15346\")")
(node 105 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 106 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 107 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 108 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 109 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 110 "(\"http://identifiers.org/pdb-ccd/ACO\", \"http://identifiers.org/obo.chebi/chebi:15351\")")
(node 111 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 112 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 113 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 114 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 115 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 116 "(\"http://identifiers.org/kegg.compound/C00016\")")
(node 117 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 118 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 119 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 120 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 121 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 122 "(\"http://identifiers.org/obo.chebi/CHEBI:17877\")")
(node 123 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 124 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 125 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 126 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 127 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 128 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 129 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 130 "(\"http://identifiers.org/obo.chebi/CHEBI:15846\")")
(node 131 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 132 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 133 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 134 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 135 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 136 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 137 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 138 "(\"http://identifiers.org/obo.chebi/CHEBI:16908\")")
(node 139 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 140 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 141 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 142 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 143 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 144 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 145 "(\"http://identifiers.org/obo.chebi/CHEBI:15378\")")
(node 146 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 147 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 148 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 149 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 150 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 151 "(\"http://identifiers.org/cas/7732-18-5\", \"http://identifiers.org/obo.chebi/chebi:29375\")")
(node 152 "(\"http://identifiers.org/obo.chebi/CHEBI:15422\")")
(node 153 "(\"http://identifiers.org/cas/61-19-8\", \"http://identifiers.org/obo.chebi/chebi:456215\")")
(node 154 "(\"http://identifiers.org/cas/2466-09-3\", \"http://identifiers.org/obo.chebi/chebi:35782\")")
)
(property  0 vector<string> "isDescribedBy"
(default "()" "()")
(node 64 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 65 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 66 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 67 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 68 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 69 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 70 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 71 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 72 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 73 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 74 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 75 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 76 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 77 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 78 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 79 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 80 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 81 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 82 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 83 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 84 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 85 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 86 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 87 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 88 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 89 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 90 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 91 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 92 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 93 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 94 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 95 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 96 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
(node 97 "(\"http://identifiers.org/obo.eco/ECO:0000313\")")
)
(property  0 vector<string> "isEncodedBy"
(default "()" "()")
)
(property  0 vector<string> "isHomologTo"
(default "()" "()")
)
(property  0 vector<string> "isPartOf"
(default "()" "()")
)
(property  0 vector<string> "isPropertyOf"
(default "()" "()")
)
(property  0 vector<string> "isVersionOf"
(default "()" "()")
(node 64 "(\"_.5.0.0.True\")")
(node 65 "(\"_.5.1.0.True\")")
(node 66 "(\"_.5.2.0.True\")")
(node 67 "(\"_.5.3.0.True\")")
(node 68 "(\"_.5.4.0.True\")")
(node 69 "(\"_.5.5.0.True\")")
(node 70 "(\"_.5.6.0.True\")")
(node 71 "(\"_.6.0.0.True\")")
(node 72 "(\"_.4.0.0.True\")")
(node 73 "(\"_.2.0.0.True\")")
(node 74 "(\"_.8.0.0.True\")")
(node 75 "(\"_.7.0.0.True\")")
(node 76 "(\"_.7.1.0.True\")")
(node 77 "(\"_.0.0.0.True\")")
(node 78 "(\"_.4.1.0.True\")")
(node 79 "(\"_.2.1.0.True\")")
(node 80 "(\"_.0.1.0.True\")")
(node 81 "(\"_.4.2.0.True\")")
(node 82 "(\"_.2.2.0.True\")")
(node 83 "(\"_.0.2.0.True\")")
(node 84 "(\"_.4.3.0.True\")")
(node 85 "(\"_.2.3.0.True\")")
(node 86 "(\"_.0.3.0.True\")")
(node 87 "(\"_.4.4.0.True\")")
(node 88 "(\"_.2.4.0.True\")")
(node 89 "(\"_.8.5.0.True\")")
(node 90 "(\"_.0.4.0.True\")")
(node 91 "(\"_.2.5.0.True\")")
(node 92 "(\"_.3.0.0.True\")")
(node 93 "(\"_.0.5.0.True\")")
(node 94 "(\"_.4.5.0.True\")")
(node 95 "(\"_.2.6.0.True\")")
(node 96 "(\"_.1.0.0.True\")")
(node 97 "(\"_.7.0.0.True\")")
)
(property  0 vector<int> "listOfProducts"
(default "()" "()")
(node 64 "(50, 60)")
(node 65 "(45, 60)")
(node 66 "(40, 60)")
(node 67 "(31, 60)")
(node 68 "(27, 60)")
(node 69 "(19, 60)")
(node 70 "(14, 60)")
(node 71 "(15, 20)")
(node 72 "(15, 63, 64)")
(node 73 "(14, 65)")
(node 74 "(23, 68, 69)")
(node 75 "(24)")
(node 76 "(12)")
(node 77 "(20, 18)")
(node 78 "(18, 63, 64)")
(node 79 "(19, 65)")
(node 80 "(20, 25)")
(node 81 "(25, 63, 64)")
(node 82 "(27, 65)")
(node 83 "(34, 20)")
(node 84 "(34, 63, 64)")
(node 85 "(31, 65)")
(node 86 "(20, 39)")
(node 87 "(39, 63, 64)")
(node 88 "(40, 65)")
(node 89 "(41, 63, 64)")
(node 90 "(44, 20)")
(node 91 "(45, 65)")
(node 92 "(44, 63)")
(node 93 "(48, 20)")
(node 94 "(48, 63, 64)")
(node 95 "(50, 65)")
(node 96 "(51, 68, 69)")
(node 97 "(35, 63, 64)")
)
(property  0 vector<int> "listOfReactants"
(default "()" "()")
(node 64 "(51, 59)")
(node 65 "(43, 59)")
(node 66 "(38, 59)")
(node 67 "(32, 59)")
(node 68 "(28, 59)")
(node 69 "(22, 59)")
(node 70 "(16, 59)")
(node 71 "(57)")
(node 72 "(13, 62)")
(node 73 "(13)")
(node 74 "(17, 10, 67)")
(node 75 "(11)")
(node 76 "(13)")
(node 77 "(57, 16)")
(node 78 "(21, 62)")
(node 79 "(21)")
(node 80 "(57, 22)")
(node 81 "(26, 62)")
(node 82 "(26)")
(node 83 "(57, 28)")
(node 84 "(33, 62)")
(node 85 "(33)")
(node 86 "(57, 32)")
(node 87 "(37, 62)")
(node 88 "(37)")
(node 89 "(36, 62)")
(node 90 "(57, 38)")
(node 91 "(42)")
(node 92 "(42, 62)")
(node 93 "(57, 43)")
(node 94 "(49, 62)")
(node 95 "(49)")
(node 96 "(52, 67, 20)")
(node 97 "(30, 62)")
)
(property  0 bool "membrane"
(default "false" "false")
)
(property  0 int "membranePos"
(default "-1" "0")
)
(property  0 string "name"
(default "" "")
(node 0 "Higher fatty acid")
(node 1 "cis,cis-3,6-Dodecadienoyl-CoA")
(node 2 "(R)-3-Hydroxybutanoyl-CoA")
(node 3 "(S)-3-Hydroxybutyryl-CoA")
(node 4 "Crotonyl-CoA")
(node 5 "Acetoacetyl-CoA")
(node 6 "Butyryl-CoA")
(node 7 "ACP")
(node 8 "3-Oxohexanoyl-CoA")
(node 9 "(2E)-Hexenoyl-CoA")
(node 10 "CoA")
(node 11 "(S)-Hydroxyhexanoyl-CoA")
(node 12 "Hexanoyl-CoA")
(node 13 "Acyl-[acyl-carrier protein]")
(node 14 "trans,cis-Lauro-2,6-dienoyl-CoA")
(node 15 "3-Oxooctanoyl-CoA")
(node 16 "(S)-Hydroxyoctanoyl-CoA")
(node 17 "(2E)-Octenoyl-CoA")
(node 18 "Octanoyl-CoA")
(node 19 "heteroatomic molecular entity, but not carbonyl compound, nor fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 20 "Reduced rubredoxin")
(node 21 "(2E)-Decenoyl-CoA")
(node 22 "Decanoyl-CoA")
(node 23 "(S)-Hydroxydecanoyl-CoA")
(node 24 "3-Oxodecanoyl-CoA")
(node 25 "Oxidized rubredoxin")
(node 26 "1-Alcohol")
(node 27 "(S)-3-Hydroxydodecanoyl-CoA")
(node 28 "Lauroyl-CoA")
(node 29 "3-Oxododecanoyl-CoA")
(node 30 "(2E)-Dodecenoyl-CoA")
(node 31 "RCHO")
(node 32 "(S)-3-Hydroxytetradecanoyl-CoA")
(node 33 "Myristoyl-CoA")
(node 34 "3-Oxotetradecanoyl-CoA")
(node 35 "(2E)-Tetradecenoyl-CoA")
(node 36 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA")
(node 37 "FAD")
(node 38 "3-Oxopalmitoyl-CoA")
(node 39 "(S)-3-Hydroxyhexadecanoyl-CoA")
(node 40 "(2E)-Hexadecenoyl-CoA")
(node 41 "Palmitoyl-CoA")
(node 42 "Palmitate")
(node 43 "FADH2")
(node 44 "generalized rn:R01279")
(node 45 "CoA")
(node 46 "Acetyl-CoA")
(node 47 "Acetyl-CoA")
(node 48 "generalized rn:R01177")
(node 49 "FAD")
(node 50 "FADH2")
(node 51 "unsaturated fatty acyl-CoA")
(node 52 "NAD")
(node 53 "NADH")
(node 54 "H+")
(node 55 "H2O")
(node 56 "H2O")
(node 57 "ATP")
(node 58 "AMP")
(node 59 "PPi")
(node 60 "generalized rn:R03026")
(node 61 "carbonyl compound, but not fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 62 "NAD")
(node 63 "NADH")
(node 64 "rn:R01279")
(node 65 "rn:R03990")
(node 66 "rn:R03857")
(node 67 "rn:R04754")
(node 68 "rn:R03777")
(node 69 "rn:R04751")
(node 70 "rn:R01175")
(node 71 "rn:R00238")
(node 72 "rn:R01975")
(node 73 "rn:R03026")
(node 74 "rn:R01406")
(node 75 "rn:R04756")
(node 76 "rn:R03276")
(node 77 "rn:R01177")
(node 78 "rn:R04748")
(node 79 "rn:R04749")
(node 80 "rn:R04747")
(node 81 "rn:R04745")
(node 82 "rn:R04746")
(node 83 "rn:R03778")
(node 84 "rn:R04743")
(node 85 "rn:R04744")
(node 86 "rn:R04742")
(node 87 "rn:R04741")
(node 88 "rn:R04170")
(node 89 "rn:R00623")
(node 90 "rn:R03858")
(node 91 "rn:R04740")
(node 92 "rn:R04739")
(node 93 "rn:R03991")
(node 94 "rn:R04737")
(node 95 "rn:R04738")
(node 96 "rn:R01280")
(node 97 "rn:R02000")
(node 98 "CoA")
(node 99 "CoA")
(node 100 "CoA")
(node 101 "CoA")
(node 102 "CoA")
(node 103 "CoA")
(node 104 "CoA")
(node 105 "Acetyl-CoA")
(node 106 "Acetyl-CoA")
(node 107 "Acetyl-CoA")
(node 108 "Acetyl-CoA")
(node 109 "Acetyl-CoA")
(node 110 "Acetyl-CoA")
(node 111 "FAD")
(node 112 "FAD")
(node 113 "FAD")
(node 114 "FAD")
(node 115 "FAD")
(node 116 "FAD")
(node 117 "FADH2")
(node 118 "FADH2")
(node 119 "FADH2")
(node 120 "FADH2")
(node 121 "FADH2")
(node 122 "FADH2")
(node 123 "NAD")
(node 124 "NAD")
(node 125 "NAD")
(node 126 "NAD")
(node 127 "NAD")
(node 128 "NAD")
(node 129 "NAD")
(node 130 "NAD")
(node 131 "NADH")
(node 132 "NADH")
(node 133 "NADH")
(node 134 "NADH")
(node 135 "NADH")
(node 136 "NADH")
(node 137 "NADH")
(node 138 "NADH")
(node 139 "H+")
(node 140 "H+")
(node 141 "H+")
(node 142 "H+")
(node 143 "H+")
(node 144 "H+")
(node 145 "H+")
(node 146 "H2O")
(node 147 "H2O")
(node 148 "H2O")
(node 149 "H2O")
(node 150 "H2O")
(node 151 "H2O")
(node 152 "ATP")
(node 153 "AMP")
(node 154 "PPi")
(node 155 "H+")
(node 156 "generalized rn:R01975")
(node 157 "generalized rn:R04756")
(node 158 "FAD")
(node 159 "FADH2")
(node 160 "generalized rn:R01279")
(node 161 "3-oxo-fatty acyl-CoA(4-)")
(node 162 "H2O")
(node 163 "generalized rn:R03026")
(node 164 "CoA")
(node 165 "Acetyl-CoA")
(node 166 "generalized rn:R01177")
(node 167 "unsaturated fatty acyl-CoA")
(node 168 "hydroxy fatty acyl-CoA")
(node 169 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 170 "NAD")
(node 171 "NADH")
(node 172 "H+")
(node 173 "generalized rn:R01975")
)
(property  0 int "nbClones"
(default "0" "0")
(node 7 "1")
(node 10 "8")
(node 13 "1")
(node 47 "7")
(node 49 "7")
(node 50 "7")
(node 52 "9")
(node 53 "9")
(node 54 "8")
(node 55 "7")
(node 57 "2")
(node 58 "2")
(node 59 "2")
(node 98 "8")
(node 99 "8")
(node 100 "8")
(node 101 "8")
(node 102 "8")
(node 103 "8")
(node 104 "8")
(node 105 "7")
(node 106 "7")
(node 107 "7")
(node 108 "7")
(node 109 "7")
(node 110 "7")
(node 111 "7")
(node 112 "7")
(node 113 "7")
(node 114 "7")
(node 115 "7")
(node 116 "7")
(node 117 "7")
(node 118 "7")
(node 119 "7")
(node 120 "7")
(node 121 "7")
(node 122 "7")
(node 123 "9")
(node 124 "9")
(node 125 "9")
(node 126 "9")
(node 127 "9")
(node 128 "9")
(node 129 "9")
(node 130 "9")
(node 131 "9")
(node 132 "9")
(node 133 "9")
(node 134 "9")
(node 135 "9")
(node 136 "9")
(node 137 "9")
(node 138 "9")
(node 139 "8")
(node 140 "8")
(node 141 "8")
(node 142 "8")
(node 143 "8")
(node 144 "8")
(node 145 "8")
(node 146 "7")
(node 147 "7")
(node 148 "7")
(node 149 "7")
(node 150 "7")
(node 151 "7")
(node 152 "2")
(node 153 "2")
(node 154 "2")
)
(property  0 vector<string> "occursIn"
(default "()" "()")
(node 64 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 65 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 66 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 67 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 68 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 69 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 70 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 71 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn00072\", \"http://identifiers.org/kegg.pathway/rn00280\", \"http://identifiers.org/kegg.pathway/rn00310\", \"http://identifiers.org/kegg.pathway/rn00362\", \"http://identifiers.org/kegg.pathway/rn00380\", \"http://identifiers.org/kegg.pathway/rn00620\", \"http://identifiers.org/kegg.pathway/rn00630\", \"http://identifiers.org/kegg.pathway/rn00640\", \"http://identifiers.org/kegg.pathway/rn00650\", \"http://identifiers.org/kegg.pathway/rn00720\", \"http://identifiers.org/kegg.pathway/rn00900\", \"http://identifiers.org/kegg.pathway/rn01100\", \"http://identifiers.org/kegg.pathway/rn01110\", \"http://identifiers.org/kegg.pathway/rn01120\")")
(node 72 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn00310\", \"http://identifiers.org/kegg.pathway/rn00380\", \"http://identifiers.org/kegg.pathway/rn00650\", \"http://identifiers.org/kegg.pathway/rn00720\", \"http://identifiers.org/kegg.pathway/rn01100\", \"http://identifiers.org/kegg.pathway/rn01120\")")
(node 73 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn00310\", \"http://identifiers.org/kegg.pathway/rn00362\", \"http://identifiers.org/kegg.pathway/rn00380\", \"http://identifiers.org/kegg.pathway/rn00627\", \"http://identifiers.org/kegg.pathway/rn00650\", \"http://identifiers.org/kegg.pathway/rn00720\", \"http://identifiers.org/kegg.pathway/rn01100\", \"http://identifiers.org/kegg.pathway/rn01120\")")
(node 74 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
(node 75 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
(node 76 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn00650\")")
(node 77 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 78 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 79 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 80 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 81 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 82 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 83 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 84 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 85 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 86 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 87 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 88 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 89 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
(node 90 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 91 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 92 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 93 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 94 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 95 "(\"http://identifiers.org/kegg.pathway/rn00062\", \"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 96 "(\"http://identifiers.org/kegg.pathway/rn00071\", \"http://identifiers.org/kegg.pathway/rn01100\")")
(node 97 "(\"http://identifiers.org/kegg.pathway/rn00071\")")
)
(property  0 string "outsideCompartment"
(default "" "")
)
(property  0 bool "outsideMembrane"
(default "false" "false")
)
(property  0 string "proteinAssociation"
(default "" "")
)
(property  0 bool "reaction"
(default "false" "false")
(node 44 "true")
(node 48 "true")
(node 60 "true")
(node 64 "true")
(node 65 "true")
(node 66 "true")
(node 67 "true")
(node 68 "true")
(node 69 "true")
(node 70 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
(node 96 "true")
(node 97 "true")
(node 156 "true")
(node 157 "true")
(node 160 "true")
(node 163 "true")
(node 166 "true")
(node 173 "true")
)
(property  0 bool "reversible"
(default "false" "false")
(node 48 "true")
(node 60 "true")
(node 71 "true")
(node 72 "true")
(node 73 "true")
(node 74 "true")
(node 75 "true")
(node 76 "true")
(node 77 "true")
(node 78 "true")
(node 79 "true")
(node 80 "true")
(node 81 "true")
(node 82 "true")
(node 83 "true")
(node 84 "true")
(node 85 "true")
(node 86 "true")
(node 87 "true")
(node 88 "true")
(node 89 "true")
(node 90 "true")
(node 91 "true")
(node 92 "true")
(node 93 "true")
(node 94 "true")
(node 95 "true")
(node 96 "true")
(node 97 "true")
(node 156 "true")
(node 157 "true")
(node 163 "true")
(node 166 "true")
(node 173 "true")
(edge 29 "true")
(edge 31 "true")
(edge 33 "true")
(edge 36 "true")
(edge 37 "true")
(edge 39 "true")
(edge 40 "true")
(edge 42 "true")
(edge 45 "true")
(edge 46 "true")
(edge 47 "true")
(edge 48 "true")
(edge 50 "true")
(edge 52 "true")
(edge 53 "true")
(edge 55 "true")
(edge 58 "true")
(edge 59 "true")
(edge 62 "true")
(edge 64 "true")
(edge 65 "true")
(edge 67 "true")
(edge 70 "true")
(edge 71 "true")
(edge 74 "true")
(edge 75 "true")
(edge 77 "true")
(edge 79 "true")
(edge 82 "true")
(edge 83 "true")
(edge 86 "true")
(edge 88 "true")
(edge 89 "true")
(edge 91 "true")
(edge 94 "true")
(edge 95 "true")
(edge 97 "true")
(edge 99 "true")
(edge 103 "true")
(edge 104 "true")
(edge 106 "true")
(edge 107 "true")
(edge 109 "true")
(edge 111 "true")
(edge 113 "true")
(edge 114 "true")
(edge 115 "true")
(edge 117 "true")
(edge 119 "true")
(edge 122 "true")
(edge 123 "true")
(edge 124 "true")
(edge 125 "true")
(edge 126 "true")
(edge 127 "true")
(edge 128 "true")
(edge 129 "true")
(edge 130 "true")
(edge 131 "true")
(edge 132 "true")
(edge 133 "true")
(edge 134 "true")
(edge 135 "true")
(edge 136 "true")
(edge 137 "true")
(edge 138 "true")
(edge 139 "true")
(edge 140 "true")
(edge 141 "true")
(edge 142 "true")
(edge 143 "true")
(edge 144 "true")
(edge 145 "true")
(edge 146 "true")
(edge 147 "true")
(edge 148 "true")
(edge 161 "true")
(edge 162 "true")
(edge 163 "true")
(edge 164 "true")
(edge 165 "true")
(edge 166 "true")
(edge 167 "true")
(edge 168 "true")
(edge 169 "true")
(edge 170 "true")
(edge 171 "true")
(edge 172 "true")
(edge 173 "true")
(edge 174 "true")
(edge 175 "true")
(edge 176 "true")
(edge 177 "true")
(edge 178 "true")
(edge 179 "true")
(edge 180 "true")
(edge 181 "true")
(edge 182 "true")
(edge 183 "true")
(edge 184 "true")
(edge 185 "true")
(edge 186 "true")
(edge 187 "true")
(edge 188 "true")
(edge 189 "true")
(edge 190 "true")
(edge 191 "true")
(edge 192 "true")
)
(property  0 string "sboTerm"
(default "" "")
(node 44 "SBO:0000176")
(node 48 "SBO:0000176")
(node 60 "SBO:0000176")
(node 64 "SBO:0000176")
(node 65 "SBO:0000176")
(node 66 "SBO:0000176")
(node 67 "SBO:0000176")
(node 68 "SBO:0000176")
(node 69 "SBO:0000176")
(node 70 "SBO:0000176")
(node 71 "SBO:0000176")
(node 72 "SBO:0000176")
(node 73 "SBO:0000176")
(node 74 "SBO:0000176")
(node 75 "SBO:0000176")
(node 76 "SBO:0000176")
(node 77 "SBO:0000176")
(node 78 "SBO:0000176")
(node 79 "SBO:0000176")
(node 80 "SBO:0000176")
(node 81 "SBO:0000176")
(node 82 "SBO:0000176")
(node 83 "SBO:0000176")
(node 84 "SBO:0000176")
(node 85 "SBO:0000176")
(node 86 "SBO:0000176")
(node 87 "SBO:0000176")
(node 88 "SBO:0000176")
(node 89 "SBO:0000176")
(node 90 "SBO:0000176")
(node 91 "SBO:0000176")
(node 92 "SBO:0000176")
(node 93 "SBO:0000176")
(node 94 "SBO:0000176")
(node 95 "SBO:0000176")
(node 96 "SBO:0000176")
(node 97 "SBO:0000176")
(node 156 "SBO:0000176")
(node 157 "SBO:0000176")
(node 160 "SBO:0000176")
(node 163 "SBO:0000176")
(node 166 "SBO:0000176")
(node 173 "SBO:0000176")
)
(property  0 string "speciesType"
(default "" "")
(node 0 "Higher fatty acid")
(node 1 "cis,cis-3,6-Dodecadienoyl-CoA")
(node 2 "(R)-3-Hydroxybutanoyl-CoA")
(node 3 "(S)-3-Hydroxybutyryl-CoA")
(node 4 "Crotonyl-CoA")
(node 5 "Acetoacetyl-CoA")
(node 6 "Butyryl-CoA")
(node 7 "ACP")
(node 8 "3-Oxohexanoyl-CoA")
(node 9 "(2E)-Hexenoyl-CoA")
(node 10 "CoA")
(node 11 "(S)-Hydroxyhexanoyl-CoA")
(node 12 "Hexanoyl-CoA")
(node 13 "Acyl-[acyl-carrier protein]")
(node 14 "trans,cis-Lauro-2,6-dienoyl-CoA")
(node 15 "3-Oxooctanoyl-CoA")
(node 16 "(S)-Hydroxyoctanoyl-CoA")
(node 17 "(2E)-Octenoyl-CoA")
(node 18 "Octanoyl-CoA")
(node 19 "cis,cis-3,6-Dodecadienoyl-CoA")
(node 20 "Reduced rubredoxin")
(node 21 "(2E)-Decenoyl-CoA")
(node 22 "Decanoyl-CoA")
(node 23 "(S)-Hydroxydecanoyl-CoA")
(node 24 "3-Oxodecanoyl-CoA")
(node 25 "Oxidized rubredoxin")
(node 26 "1-Alcohol")
(node 27 "(S)-3-Hydroxydodecanoyl-CoA")
(node 28 "Lauroyl-CoA")
(node 29 "3-Oxododecanoyl-CoA")
(node 30 "(2E)-Dodecenoyl-CoA")
(node 31 "RCHO")
(node 32 "(S)-3-Hydroxytetradecanoyl-CoA")
(node 33 "Myristoyl-CoA")
(node 34 "3-Oxotetradecanoyl-CoA")
(node 35 "(2E)-Tetradecenoyl-CoA")
(node 36 "(R)-3-Hydroxybutanoyl-CoA")
(node 37 "FAD")
(node 38 "3-Oxopalmitoyl-CoA")
(node 39 "(S)-3-Hydroxyhexadecanoyl-CoA")
(node 40 "(2E)-Hexadecenoyl-CoA")
(node 41 "Palmitoyl-CoA")
(node 42 "Palmitate")
(node 43 "FADH2")
(node 45 "CoA")
(node 46 "Acetyl-CoA")
(node 47 "Acetyl-CoA")
(node 49 "FAD")
(node 50 "FADH2")
(node 51 "Crotonyl-CoA")
(node 52 "NAD")
(node 53 "NADH")
(node 54 "H+")
(node 55 "H2O")
(node 56 "H2O")
(node 57 "ATP")
(node 58 "AMP")
(node 59 "PPi")
(node 61 "Acetoacetyl-CoA")
(node 62 "NAD")
(node 63 "NADH")
(node 98 "CoA")
(node 99 "CoA")
(node 100 "CoA")
(node 101 "CoA")
(node 102 "CoA")
(node 103 "CoA")
(node 104 "CoA")
(node 105 "Acetyl-CoA")
(node 106 "Acetyl-CoA")
(node 107 "Acetyl-CoA")
(node 108 "Acetyl-CoA")
(node 109 "Acetyl-CoA")
(node 110 "Acetyl-CoA")
(node 111 "FAD")
(node 112 "FAD")
(node 113 "FAD")
(node 114 "FAD")
(node 115 "FAD")
(node 116 "FAD")
(node 117 "FADH2")
(node 118 "FADH2")
(node 119 "FADH2")
(node 120 "FADH2")
(node 121 "FADH2")
(node 122 "FADH2")
(node 123 "NAD")
(node 124 "NAD")
(node 125 "NAD")
(node 126 "NAD")
(node 127 "NAD")
(node 128 "NAD")
(node 129 "NAD")
(node 130 "NAD")
(node 131 "NADH")
(node 132 "NADH")
(node 133 "NADH")
(node 134 "NADH")
(node 135 "NADH")
(node 136 "NADH")
(node 137 "NADH")
(node 138 "NADH")
(node 139 "H+")
(node 140 "H+")
(node 141 "H+")
(node 142 "H+")
(node 143 "H+")
(node 144 "H+")
(node 145 "H+")
(node 146 "H2O")
(node 147 "H2O")
(node 148 "H2O")
(node 149 "H2O")
(node 150 "H2O")
(node 151 "H2O")
(node 152 "ATP")
(node 153 "AMP")
(node 154 "PPi")
(node 155 "H+")
(node 158 "FAD")
(node 159 "FADH2")
(node 161 "Acetoacetyl-CoA")
(node 162 "H2O")
(node 164 "CoA")
(node 165 "Acetyl-CoA")
(node 167 "Crotonyl-CoA")
(node 168 "(S)-3-Hydroxybutyryl-CoA")
(node 169 "Butyryl-CoA")
(node 170 "NAD")
(node 171 "NADH")
(node 172 "H+")
)
(property  0 double "stoichiometry"
(default "0" "0")
(edge 0 "1")
(edge 1 "1")
(edge 2 "1")
(edge 3 "1")
(edge 4 "1")
(edge 5 "1")
(edge 6 "1")
(edge 7 "1")
(edge 8 "1")
(edge 9 "1")
(edge 10 "1")
(edge 11 "1")
(edge 12 "1")
(edge 13 "1")
(edge 14 "1")
(edge 15 "1")
(edge 16 "1")
(edge 17 "1")
(edge 18 "1")
(edge 19 "1")
(edge 20 "1")
(edge 21 "1")
(edge 22 "1")
(edge 23 "1")
(edge 24 "1")
(edge 25 "1")
(edge 26 "1")
(edge 27 "1")
(edge 28 "1")
(edge 29 "1")
(edge 30 "1")
(edge 31 "1")
(edge 32 "1")
(edge 33 "1")
(edge 34 "1")
(edge 35 "1")
(edge 36 "1")
(edge 37 "1")
(edge 38 "1")
(edge 39 "1")
(edge 40 "1")
(edge 41 "1")
(edge 42 "1")
(edge 43 "1")
(edge 44 "1")
(edge 45 "1")
(edge 46 "1")
(edge 47 "1")
(edge 48 "1")
(edge 49 "1")
(edge 50 "1")
(edge 51 "1")
(edge 52 "1")
(edge 53 "1")
(edge 54 "1")
(edge 55 "1")
(edge 56 "1")
(edge 57 "1")
(edge 58 "1")
(edge 59 "1")
(edge 60 "1")
(edge 61 "1")
(edge 62 "1")
(edge 63 "1")
(edge 64 "1")
(edge 65 "1")
(edge 66 "1")
(edge 67 "1")
(edge 68 "1")
(edge 69 "1")
(edge 70 "1")
(edge 71 "1")
(edge 72 "1")
(edge 73 "1")
(edge 74 "1")
(edge 75 "1")
(edge 76 "1")
(edge 77 "1")
(edge 78 "1")
(edge 79 "1")
(edge 80 "1")
(edge 81 "1")
(edge 82 "1")
(edge 83 "1")
(edge 84 "1")
(edge 85 "1")
(edge 86 "1")
(edge 87 "1")
(edge 88 "1")
(edge 89 "1")
(edge 90 "1")
(edge 91 "1")
(edge 92 "1")
(edge 93 "1")
(edge 94 "1")
(edge 95 "1")
(edge 96 "1")
(edge 97 "1")
(edge 98 "1")
(edge 99 "1")
(edge 100 "1")
(edge 101 "1")
(edge 102 "1")
(edge 103 "1")
(edge 104 "1")
(edge 105 "1")
(edge 106 "1")
(edge 107 "1")
(edge 108 "1")
(edge 109 "1")
(edge 110 "1")
(edge 111 "1")
(edge 112 "1")
(edge 113 "1")
(edge 114 "1")
(edge 115 "1")
(edge 116 "1")
(edge 117 "1")
(edge 118 "1")
(edge 119 "1")
(edge 120 "1")
(edge 121 "1")
(edge 122 "1")
(edge 123 "1")
(edge 124 "1")
(edge 125 "1")
(edge 126 "1")
(edge 127 "1")
(edge 128 "1")
(edge 129 "1")
(edge 130 "1")
(edge 131 "2")
(edge 132 "1")
(edge 133 "2")
(edge 134 "1")
(edge 135 "1")
(edge 136 "1")
(edge 137 "1")
(edge 138 "1")
(edge 139 "1")
(edge 140 "1")
(edge 141 "1")
(edge 142 "1")
(edge 143 "2")
(edge 144 "1")
(edge 145 "1")
(edge 146 "1")
(edge 147 "1")
(edge 148 "1")
(edge 149 "1")
(edge 150 "1")
(edge 151 "1")
(edge 152 "1")
(edge 153 "1")
(edge 154 "1")
(edge 155 "1")
(edge 156 "1")
(edge 157 "1")
(edge 158 "1")
(edge 159 "1")
(edge 160 "1")
(edge 161 "1")
(edge 162 "1")
(edge 163 "1")
(edge 164 "1")
(edge 165 "1")
(edge 166 "1")
(edge 167 "1")
(edge 168 "1")
(edge 169 "1")
(edge 170 "1")
(edge 171 "1")
(edge 172 "1")
(edge 173 "1")
(edge 174 "1")
(edge 175 "1")
(edge 176 "1")
(edge 177 "1")
(edge 178 "1")
(edge 179 "1")
(edge 180 "1")
(edge 181 "1")
(edge 182 "1")
(edge 183 "1")
(edge 184 "1")
(edge 185 "1")
(edge 186 "1")
(edge 187 "1")
(edge 188 "1")
(edge 189 "1")
(edge 190 "1")
(edge 191 "1")
(edge 192 "1")
(edge 193 "1")
(edge 194 "1")
(edge 195 "1")
(edge 196 "1")
(edge 197 "1")
(edge 198 "1")
(edge 199 "1")
(edge 200 "1")
(edge 201 "1")
(edge 202 "1")
(edge 203 "1")
(edge 204 "1")
(edge 205 "1")
(edge 206 "1")
(edge 207 "1")
(edge 208 "1")
(edge 209 "1")
(edge 210 "1")
(edge 211 "1")
(edge 212 "1")
(edge 213 "1")
(edge 214 "1")
(edge 215 "1")
(edge 216 "1")
(edge 217 "1")
(edge 218 "1")
(edge 219 "1")
(edge 220 "1")
(edge 221 "1")
(edge 222 "1")
(edge 223 "1")
(edge 224 "1")
(edge 225 "1")
(edge 226 "1")
(edge 227 "1")
(edge 228 "1")
(edge 229 "1")
(edge 230 "1")
(edge 231 "1")
(edge 232 "1")
(edge 233 "1")
(edge 234 "1")
(edge 235 "1")
(edge 236 "1")
(edge 237 "1")
(edge 238 "1")
(edge 239 "1")
(edge 240 "1")
(edge 241 "1")
(edge 242 "1")
(edge 243 "1")
(edge 244 "1")
(edge 245 "1")
(edge 246 "1")
(edge 247 "1")
(edge 248 "1")
(edge 249 "1")
(edge 250 "1")
(edge 251 "1")
(edge 252 "1")
(edge 253 "1")
(edge 254 "1")
(edge 255 "1")
(edge 256 "1")
(edge 257 "1")
(edge 258 "1")
(edge 259 "1")
(edge 260 "1")
(edge 261 "1")
(edge 262 "1")
(edge 263 "1")
(edge 264 "1")
(edge 265 "1")
(edge 266 "1")
(edge 267 "1")
(edge 268 "1")
(edge 269 "1")
(edge 270 "1")
(edge 271 "1")
(edge 272 "1")
(edge 273 "1")
(edge 274 "1")
(edge 275 "1")
(edge 276 "1")
(edge 277 "1")
(edge 278 "1")
(edge 279 "1")
(edge 280 "1")
(edge 281 "1")
(edge 282 "1")
(edge 283 "1")
(edge 284 "1")
(edge 285 "1")
(edge 286 "1")
(edge 287 "1")
(edge 288 "1")
(edge 289 "1")
(edge 290 "1")
(edge 291 "1")
(edge 292 "1")
(edge 293 "1")
(edge 294 "1")
(edge 295 "1")
(edge 296 "1")
(edge 297 "1")
(edge 298 "1")
(edge 299 "1")
(edge 300 "1")
(edge 301 "1")
(edge 302 "1")
(edge 303 "1")
(edge 304 "1")
(edge 305 "1")
(edge 306 "1")
(edge 307 "1")
(edge 308 "1")
(edge 309 "1")
(edge 310 "1")
(edge 311 "1")
(edge 312 "1")
(edge 313 "1")
(edge 314 "1")
(edge 315 "1")
(edge 316 "1")
(edge 317 "1")
(edge 318 "1")
(edge 319 "1")
(edge 320 "1")
(edge 321 "1")
(edge 322 "1")
(edge 323 "1")
(edge 324 "1")
(edge 325 "1")
(edge 326 "1")
(edge 327 "1")
(edge 328 "1")
(edge 329 "1")
(edge 330 "1")
(edge 331 "1")
(edge 332 "1")
(edge 333 "1")
(edge 334 "1")
(edge 335 "1")
(edge 336 "1")
(edge 337 "1")
(edge 338 "1")
(edge 339 "1")
(edge 340 "1")
(edge 341 "1")
(edge 342 "1")
(edge 343 "1")
(edge 344 "1")
(edge 345 "1")
(edge 346 "1")
(edge 347 "1")
(edge 348 "1")
(edge 349 "1")
(edge 350 "1")
(edge 351 "1")
(edge 352 "1")
(edge 353 "1")
(edge 354 "1")
(edge 355 "1")
(edge 356 "1")
(edge 357 "1")
(edge 358 "1")
(edge 359 "1")
(edge 360 "1")
(edge 361 "1")
(edge 362 "1")
(edge 363 "1")
(edge 364 "1")
(edge 365 "1")
(edge 366 "1")
(edge 367 "1")
(edge 368 "1")
(edge 369 "1")
(edge 370 "1")
(edge 371 "1")
(edge 372 "1")
(edge 373 "1")
(edge 374 "1")
(edge 375 "1")
(edge 376 "1")
(edge 377 "1")
(edge 378 "1")
(edge 379 "1")
(edge 380 "1")
(edge 381 "1")
(edge 382 "1")
(edge 383 "1")
(edge 384 "1")
(edge 385 "1")
(edge 386 "1")
(edge 387 "1")
(edge 388 "1")
(edge 389 "1")
(edge 390 "1")
(edge 391 "1")
(edge 392 "1")
)
(property  0 vector<string> "subSystem"
(default "()" "()")
)
(property  0 bool "ubiquitous"
(default "false" "false")
(node 7 "true")
(node 10 "true")
(node 13 "true")
(node 37 "true")
(node 43 "true")
(node 45 "true")
(node 46 "true")
(node 47 "true")
(node 49 "true")
(node 50 "true")
(node 52 "true")
(node 53 "true")
(node 54 "true")
(node 55 "true")
(node 56 "true")
(node 57 "true")
(node 58 "true")
(node 59 "true")
(node 62 "true")
(node 63 "true")
(node 98 "true")
(node 99 "true")
(node 100 "true")
(node 101 "true")
(node 102 "true")
(node 103 "true")
(node 104 "true")
(node 105 "true")
(node 106 "true")
(node 107 "true")
(node 108 "true")
(node 109 "true")
(node 110 "true")
(node 111 "true")
(node 112 "true")
(node 113 "true")
(node 114 "true")
(node 115 "true")
(node 116 "true")
(node 117 "true")
(node 118 "true")
(node 119 "true")
(node 120 "true")
(node 121 "true")
(node 122 "true")
(node 123 "true")
(node 124 "true")
(node 125 "true")
(node 126 "true")
(node 127 "true")
(node 128 "true")
(node 129 "true")
(node 130 "true")
(node 131 "true")
(node 132 "true")
(node 133 "true")
(node 134 "true")
(node 135 "true")
(node 136 "true")
(node 137 "true")
(node 138 "true")
(node 139 "true")
(node 140 "true")
(node 141 "true")
(node 142 "true")
(node 143 "true")
(node 144 "true")
(node 145 "true")
(node 146 "true")
(node 147 "true")
(node 148 "true")
(node 149 "true")
(node 150 "true")
(node 151 "true")
(node 152 "true")
(node 153 "true")
(node 154 "true")
(node 155 "true")
(node 158 "true")
(node 159 "true")
(node 162 "true")
(node 164 "true")
(node 165 "true")
(node 170 "true")
(node 171 "true")
(node 172 "true")
)
(property  0 color "viewBorderColor"
(default "(0,0,0,255)" "(0,0,0,255)")
(node 0 "(220,220,220,255)")
(node 96 "(220,220,220,255)")
(node 97 "(220,220,220,255)")
(node 98 "(220,220,220,255)")
(node 52 "(220,220,220,255)")
(node 53 "(220,220,220,255)")
(node 54 "(220,220,220,255)")
(node 7 "(220,220,220,255)")
(node 57 "(220,220,220,255)")
(node 10 "(220,220,220,255)")
(node 152 "(220,220,220,255)")
(node 105 "(220,220,220,255)")
(node 58 "(220,220,220,255)")
(node 153 "(220,220,220,255)")
(node 59 "(220,220,220,255)")
(node 154 "(220,220,220,255)")
(node 13 "(220,220,220,255)")
(node 158 "(220,220,220,255)")
(node 159 "(220,220,220,255)")
(node 160 "(220,220,220,255)")
(node 20 "(220,220,220,255)")
(node 161 "(220,220,220,255)")
(node 162 "(220,220,220,255)")
(node 163 "(220,220,220,255)")
(node 164 "(220,220,220,255)")
(node 71 "(220,220,220,255)")
(node 165 "(220,220,220,255)")
(node 25 "(220,220,220,255)")
(node 166 "(220,220,220,255)")
(node 167 "(220,220,220,255)")
(node 74 "(220,220,220,255)")
(node 168 "(220,220,220,255)")
(node 169 "(220,220,220,255)")
(node 170 "(220,220,220,255)")
(node 171 "(220,220,220,255)")
(node 172 "(220,220,220,255)")
(node 173 "(220,220,220,255)")
(node 129 "(220,220,220,255)")
(node 42 "(220,220,220,255)")
(node 137 "(220,220,220,255)")
(node 92 "(220,220,220,255)")
)
(property  0 double "viewBorderWidth"
(default "1" "1")
(node 0 "0")
(node 96 "0")
(node 97 "0")
(node 98 "0")
(node 52 "0")
(node 53 "0")
(node 54 "0")
(node 7 "0")
(node 57 "0")
(node 10 "0")
(node 152 "0")
(node 105 "0")
(node 58 "0")
(node 153 "0")
(node 59 "0")
(node 154 "0")
(node 13 "0")
(node 158 "0")
(node 159 "0")
(node 160 "0")
(node 20 "0")
(node 161 "0")
(node 162 "0")
(node 163 "0")
(node 164 "0")
(node 71 "0")
(node 165 "0")
(node 25 "0")
(node 166 "0")
(node 167 "0")
(node 74 "0")
(node 168 "0")
(node 169 "0")
(node 170 "0")
(node 171 "0")
(node 172 "0")
(node 173 "0")
(node 129 "0")
(node 42 "0")
(node 137 "0")
(node 92 "0")
)
(property  0 color "viewColor"
(default "(255,0,0,255)" "(0,0,0,255)")
(node 0 "(211,211,211,255)")
(node 7 "(220,220,220,255)")
(node 10 "(220,220,220,255)")
(node 13 "(220,220,220,255)")
(node 19 "(204,102,102,255)")
(node 20 "(211,211,211,255)")
(node 25 "(211,211,211,255)")
(node 36 "(102,204,204,255)")
(node 37 "(211,211,211,255)")
(node 42 "(170,204,102,255)")
(node 43 "(211,211,211,255)")
(node 44 "(211,211,211,255)")
(node 45 "(211,211,211,255)")
(node 46 "(211,211,211,255)")
(node 48 "(211,211,211,255)")
(node 51 "(153,102,204,255)")
(node 52 "(220,220,220,255)")
(node 53 "(220,220,220,255)")
(node 54 "(220,220,220,255)")
(node 56 "(211,211,211,255)")
(node 57 "(220,220,220,255)")
(node 58 "(220,220,220,255)")
(node 59 "(220,220,220,255)")
(node 60 "(211,211,211,255)")
(node 61 "(153,204,102,255)")
(node 62 "(211,211,211,255)")
(node 63 "(211,211,211,255)")
(node 64 "(0,255,0,255)")
(node 65 "(0,255,0,255)")
(node 66 "(0,255,0,255)")
(node 67 "(0,255,0,255)")
(node 68 "(0,255,0,255)")
(node 69 "(0,255,0,255)")
(node 70 "(0,255,0,255)")
(node 71 "(204,102,189,255)")
(node 72 "(0,255,0,255)")
(node 73 "(0,255,0,255)")
(node 74 "(220,220,220,255)")
(node 75 "(0,255,0,255)")
(node 76 "(0,255,0,255)")
(node 77 "(0,255,0,255)")
(node 78 "(0,255,0,255)")
(node 79 "(0,255,0,255)")
(node 80 "(0,255,0,255)")
(node 81 "(0,255,0,255)")
(node 82 "(0,255,0,255)")
(node 83 "(0,255,0,255)")
(node 84 "(0,255,0,255)")
(node 85 "(0,255,0,255)")
(node 86 "(0,255,0,255)")
(node 87 "(0,255,0,255)")
(node 88 "(0,255,0,255)")
(node 89 "(0,255,0,255)")
(node 90 "(0,255,0,255)")
(node 91 "(0,255,0,255)")
(node 92 "(204,102,142,255)")
(node 93 "(0,255,0,255)")
(node 94 "(0,255,0,255)")
(node 95 "(0,255,0,255)")
(node 96 "(220,220,220,255)")
(node 97 "(220,220,220,255)")
(node 98 "(220,220,220,255)")
(node 105 "(220,220,220,255)")
(node 129 "(220,220,220,255)")
(node 137 "(220,220,220,255)")
(node 152 "(220,220,220,255)")
(node 153 "(220,220,220,255)")
(node 154 "(220,220,220,255)")
(node 155 "(211,211,211,255)")
(node 156 "(211,211,211,255)")
(node 157 "(211,211,211,255)")
(node 158 "(220,220,220,255)")
(node 159 "(220,220,220,255)")
(node 160 "(142,204,102,255)")
(node 161 "(204,102,189,255)")
(node 162 "(220,220,220,255)")
(node 163 "(142,102,204,255)")
(node 164 "(220,220,220,255)")
(node 165 "(220,220,220,255)")
(node 166 "(204,102,183,255)")
(node 167 "(102,142,204,255)")
(node 168 "(102,204,160,255)")
(node 169 "(102,183,204,255)")
(node 170 "(220,220,220,255)")
(node 171 "(220,220,220,255)")
(node 172 "(220,220,220,255)")
(node 173 "(204,102,142,255)")
(edge 0 "(153,102,204,255)")
(edge 1 "(102,142,204,255)")
(edge 2 "(153,102,204,255)")
(edge 3 "(183,102,204,255)")
(edge 4 "(153,102,204,255)")
(edge 5 "(102,204,142,255)")
(edge 6 "(153,102,204,255)")
(edge 7 "(102,142,204,255)")
(edge 8 "(153,102,204,255)")
(edge 9 "(183,102,204,255)")
(edge 10 "(153,102,204,255)")
(edge 11 "(102,204,142,255)")
(edge 12 "(153,102,204,255)")
(edge 13 "(183,102,204,255)")
(edge 14 "(153,102,204,255)")
(edge 15 "(102,204,142,255)")
(edge 16 "(153,102,204,255)")
(edge 17 "(183,102,204,255)")
(edge 18 "(153,102,204,255)")
(edge 19 "(102,204,142,255)")
(edge 20 "(153,102,204,255)")
(edge 21 "(183,102,204,255)")
(edge 22 "(153,102,204,255)")
(edge 23 "(183,102,204,255)")
(edge 24 "(153,102,204,255)")
(edge 25 "(153,102,204,255)")
(edge 26 "(153,102,204,255)")
(edge 27 "(153,102,204,255)")
(edge 28 "(102,204,142,255)")
(edge 30 "(102,204,142,255)")
(edge 31 "(102,204,204,255)")
(edge 33 "(102,204,204,255)")
(edge 34 "(183,102,204,255)")
(edge 35 "(102,204,142,255)")
(edge 36 "(153,204,102,255)")
(edge 37 "(153,204,102,255)")
(edge 38 "(102,142,204,255)")
(edge 41 "(204,102,102,255)")
(edge 43 "(183,204,102,255)")
(edge 44 "(204,102,102,255)")
(edge 45 "(102,142,204,255)")
(edge 46 "(102,142,204,255)")
(edge 47 "(102,142,204,255)")
(edge 48 "(102,142,204,255)")
(edge 49 "(183,204,102,255)")
(edge 50 "(204,102,102,255)")
(edge 51 "(102,142,204,255)")
(edge 52 "(204,102,102,255)")
(edge 53 "(102,204,204,255)")
(edge 54 "(204,102,102,255)")
(edge 55 "(102,204,204,255)")
(edge 56 "(183,204,102,255)")
(edge 57 "(204,102,102,255)")
(edge 58 "(153,204,102,255)")
(edge 59 "(153,204,102,255)")
(edge 60 "(183,204,102,255)")
(edge 61 "(204,102,102,255)")
(edge 62 "(204,102,102,255)")
(edge 63 "(183,204,102,255)")
(edge 64 "(204,102,102,255)")
(edge 65 "(102,204,204,255)")
(edge 66 "(204,102,102,255)")
(edge 67 "(102,204,204,255)")
(edge 68 "(183,204,102,255)")
(edge 69 "(204,102,102,255)")
(edge 70 "(153,204,102,255)")
(edge 71 "(153,204,102,255)")
(edge 73 "(204,102,102,255)")
(edge 74 "(204,102,102,255)")
(edge 75 "(204,102,102,255)")
(edge 76 "(204,102,102,255)")
(edge 77 "(102,204,204,255)")
(edge 78 "(204,102,102,255)")
(edge 79 "(102,204,204,255)")
(edge 80 "(204,102,102,255)")
(edge 81 "(204,102,102,255)")
(edge 82 "(153,204,102,255)")
(edge 83 "(153,204,102,255)")
(edge 84 "(204,102,102,255)")
(edge 85 "(204,102,102,255)")
(edge 86 "(204,102,102,255)")
(edge 87 "(204,102,102,255)")
(edge 88 "(204,102,102,255)")
(edge 89 "(102,204,204,255)")
(edge 90 "(204,102,102,255)")
(edge 91 "(102,204,204,255)")
(edge 92 "(204,102,102,255)")
(edge 93 "(204,102,102,255)")
(edge 94 "(153,204,102,255)")
(edge 95 "(153,204,102,255)")
(edge 96 "(204,102,102,255)")
(edge 97 "(183,102,204,255)")
(edge 98 "(204,102,102,255)")
(edge 99 "(183,102,204,255)")
(edge 100 "(204,102,102,255)")
(edge 101 "(204,102,102,255)")
(edge 102 "(204,102,102,255)")
(edge 103 "(204,102,102,255)")
(edge 104 "(204,102,102,255)")
(edge 105 "(204,102,102,255)")
(edge 106 "(153,204,102,255)")
(edge 107 "(153,204,102,255)")
(edge 108 "(204,102,102,255)")
(edge 110 "(204,102,102,255)")
(edge 112 "(204,102,102,255)")
(edge 113 "(204,102,102,255)")
(edge 114 "(204,102,102,255)")
(edge 115 "(204,102,102,255)")
(edge 116 "(204,102,102,255)")
(edge 117 "(102,204,204,255)")
(edge 118 "(204,102,102,255)")
(edge 119 "(102,204,204,255)")
(edge 120 "(204,102,102,255)")
(edge 121 "(204,102,102,255)")
(edge 122 "(153,204,102,255)")
(edge 123 "(153,204,102,255)")
(edge 124 "(153,204,102,255)")
(edge 136 "(204,102,189,255)")
(edge 137 "(204,102,102,255)")
(edge 138 "(204,102,102,255)")
(edge 139 "(204,102,102,255)")
(edge 140 "(204,102,102,255)")
(edge 141 "(204,102,102,255)")
(edge 142 "(204,102,102,255)")
(edge 143 "(204,102,189,255)")
(edge 144 "(204,102,102,255)")
(edge 145 "(204,102,102,255)")
(edge 146 "(204,102,102,255)")
(edge 147 "(204,102,102,255)")
(edge 148 "(204,102,102,255)")
(edge 149 "(153,102,204,255)")
(edge 150 "(153,102,204,255)")
(edge 151 "(153,102,204,255)")
(edge 152 "(153,102,204,255)")
(edge 153 "(153,102,204,255)")
(edge 154 "(153,102,204,255)")
(edge 155 "(153,102,204,255)")
(edge 156 "(153,102,204,255)")
(edge 157 "(153,102,204,255)")
(edge 158 "(153,102,204,255)")
(edge 159 "(153,102,204,255)")
(edge 160 "(153,102,204,255)")
(edge 161 "(102,204,204,255)")
(edge 162 "(102,204,204,255)")
(edge 163 "(102,204,204,255)")
(edge 164 "(102,204,204,255)")
(edge 165 "(102,204,204,255)")
(edge 166 "(183,102,204,255)")
(edge 167 "(204,102,142,255)")
(edge 168 "(102,204,204,255)")
(edge 169 "(102,204,204,255)")
(edge 170 "(102,204,204,255)")
(edge 171 "(102,204,204,255)")
(edge 172 "(102,204,204,255)")
(edge 173 "(102,204,204,255)")
(edge 174 "(183,102,204,255)")
(edge 175 "(204,102,142,255)")
(edge 176 "(102,204,204,255)")
(edge 177 "(102,204,204,255)")
(edge 178 "(102,204,204,255)")
(edge 179 "(102,204,204,255)")
(edge 180 "(102,204,204,255)")
(edge 181 "(102,204,204,255)")
(edge 182 "(183,102,204,255)")
(edge 183 "(102,204,204,255)")
(edge 184 "(153,204,102,255)")
(edge 185 "(153,204,102,255)")
(edge 186 "(153,204,102,255)")
(edge 187 "(153,204,102,255)")
(edge 188 "(153,204,102,255)")
(edge 189 "(153,204,102,255)")
(edge 193 "(183,204,102,255)")
(edge 194 "(183,204,102,255)")
(edge 195 "(183,204,102,255)")
(edge 196 "(183,204,102,255)")
(edge 197 "(183,204,102,255)")
(edge 198 "(183,204,102,255)")
(edge 199 "(183,204,102,255)")
(edge 200 "(183,204,102,255)")
(edge 201 "(183,204,102,255)")
(edge 202 "(183,204,102,255)")
(edge 203 "(183,204,102,255)")
(edge 204 "(183,204,102,255)")
(edge 205 "(183,204,102,255)")
(edge 206 "(183,204,102,255)")
(edge 207 "(183,204,102,255)")
(edge 208 "(183,204,102,255)")
(edge 209 "(183,204,102,255)")
(edge 210 "(183,204,102,255)")
(edge 211 "(183,204,102,255)")
(edge 212 "(183,204,102,255)")
(edge 213 "(183,204,102,255)")
(edge 214 "(102,204,142,255)")
(edge 215 "(204,102,102,255)")
(edge 216 "(102,204,142,255)")
(edge 217 "(102,204,142,255)")
(edge 218 "(102,204,142,255)")
(edge 219 "(102,204,142,255)")
(edge 220 "(102,204,142,255)")
(edge 221 "(102,204,142,255)")
(edge 222 "(102,204,142,255)")
(edge 223 "(102,204,142,255)")
(edge 224 "(102,204,142,255)")
(edge 225 "(102,204,142,255)")
(edge 226 "(102,204,142,255)")
(edge 227 "(102,204,142,255)")
(edge 228 "(102,204,142,255)")
(edge 229 "(102,204,142,255)")
(edge 230 "(102,204,142,255)")
(edge 231 "(102,204,142,255)")
(edge 233 "(183,102,204,255)")
(edge 234 "(183,102,204,255)")
(edge 235 "(183,204,102,255)")
(edge 236 "(183,102,204,255)")
(edge 237 "(183,102,204,255)")
(edge 238 "(183,102,204,255)")
(edge 239 "(183,102,204,255)")
(edge 241 "(183,102,204,255)")
(edge 242 "(183,102,204,255)")
(edge 243 "(183,102,204,255)")
(edge 244 "(183,102,204,255)")
(edge 245 "(183,102,204,255)")
(edge 246 "(183,102,204,255)")
(edge 247 "(183,102,204,255)")
(edge 248 "(183,102,204,255)")
(edge 249 "(183,102,204,255)")
(edge 250 "(183,102,204,255)")
(edge 251 "(183,102,204,255)")
(edge 252 "(183,102,204,255)")
(edge 253 "(183,102,204,255)")
(edge 254 "(183,102,204,255)")
(edge 255 "(183,102,204,255)")
(edge 256 "(183,102,204,255)")
(edge 257 "(183,102,204,255)")
(edge 258 "(183,102,204,255)")
(edge 259 "(183,102,204,255)")
(edge 260 "(183,102,204,255)")
(edge 261 "(183,102,204,255)")
(edge 262 "(183,102,204,255)")
(edge 263 "(183,102,204,255)")
(edge 264 "(183,102,204,255)")
(edge 265 "(183,102,204,255)")
(edge 266 "(183,102,204,255)")
(edge 267 "(183,102,204,255)")
(edge 268 "(102,142,204,255)")
(edge 269 "(102,142,204,255)")
(edge 270 "(153,102,204,255)")
(edge 271 "(153,102,204,255)")
(edge 272 "(153,102,204,255)")
(edge 273 "(153,102,204,255)")
(edge 274 "(153,102,204,255)")
(edge 275 "(153,102,204,255)")
(edge 276 "(153,102,204,255)")
(edge 277 "(153,102,204,255)")
(edge 278 "(153,102,204,255)")
(edge 279 "(153,102,204,255)")
(edge 280 "(153,102,204,255)")
(edge 281 "(153,102,204,255)")
(edge 282 "(153,102,204,255)")
(edge 283 "(153,102,204,255)")
(edge 284 "(153,102,204,255)")
(edge 285 "(153,102,204,255)")
(edge 286 "(142,204,102,255)")
(edge 287 "(142,204,102,255)")
(edge 288 "(153,102,204,255)")
(edge 289 "(153,102,204,255)")
(edge 290 "(153,102,204,255)")
(edge 291 "(153,102,204,255)")
(edge 292 "(153,102,204,255)")
(edge 293 "(153,102,204,255)")
(edge 294 "(153,102,204,255)")
(edge 295 "(153,102,204,255)")
(edge 296 "(153,102,204,255)")
(edge 297 "(153,102,204,255)")
(edge 298 "(153,102,204,255)")
(edge 299 "(153,102,204,255)")
(edge 300 "(204,102,189,255)")
(edge 301 "(102,204,204,255)")
(edge 302 "(204,102,102,255)")
(edge 303 "(102,204,204,255)")
(edge 304 "(204,102,102,255)")
(edge 305 "(102,204,204,255)")
(edge 306 "(204,102,102,255)")
(edge 307 "(102,204,204,255)")
(edge 308 "(204,102,102,255)")
(edge 309 "(102,204,204,255)")
(edge 310 "(204,102,102,255)")
(edge 311 "(204,102,142,255)")
(edge 312 "(204,102,102,255)")
(edge 313 "(102,204,204,255)")
(edge 314 "(153,204,102,255)")
(edge 315 "(153,204,102,255)")
(edge 316 "(153,204,102,255)")
(edge 317 "(153,204,102,255)")
(edge 318 "(153,204,102,255)")
(edge 319 "(153,204,102,255)")
(edge 320 "(153,204,102,255)")
(edge 321 "(153,204,102,255)")
(edge 322 "(153,204,102,255)")
(edge 323 "(142,102,204,255)")
(edge 324 "(153,204,102,255)")
(edge 325 "(153,204,102,255)")
(edge 326 "(153,204,102,255)")
(edge 327 "(153,204,102,255)")
(edge 328 "(153,204,102,255)")
(edge 329 "(153,204,102,255)")
(edge 330 "(153,204,102,255)")
(edge 331 "(153,204,102,255)")
(edge 332 "(153,204,102,255)")
(edge 333 "(153,204,102,255)")
(edge 334 "(153,204,102,255)")
(edge 335 "(153,204,102,255)")
(edge 336 "(204,102,102,255)")
(edge 337 "(204,102,102,255)")
(edge 338 "(204,102,102,255)")
(edge 339 "(204,102,102,255)")
(edge 340 "(204,102,102,255)")
(edge 341 "(204,102,102,255)")
(edge 342 "(204,102,102,255)")
(edge 343 "(204,102,102,255)")
(edge 344 "(204,102,102,255)")
(edge 345 "(204,102,102,255)")
(edge 346 "(204,102,102,255)")
(edge 347 "(204,102,102,255)")
(edge 348 "(204,102,102,255)")
(edge 349 "(204,102,183,255)")
(edge 350 "(204,102,183,255)")
(edge 351 "(204,102,183,255)")
(edge 352 "(204,102,102,255)")
(edge 353 "(204,102,102,255)")
(edge 354 "(204,102,102,255)")
(edge 355 "(204,102,102,255)")
(edge 356 "(204,102,102,255)")
(edge 357 "(142,204,102,255)")
(edge 358 "(142,102,204,255)")
(edge 359 "(102,204,204,255)")
(edge 360 "(142,102,204,255)")
(edge 361 "(102,204,204,255)")
(edge 362 "(102,204,204,255)")
(edge 363 "(102,204,204,255)")
(edge 364 "(102,204,204,255)")
(edge 365 "(204,102,142,255)")
(edge 366 "(102,204,204,255)")
(edge 367 "(142,204,102,255)")
(edge 368 "(204,102,183,255)")
(edge 370 "(102,204,204,255)")
(edge 371 "(102,204,204,255)")
(edge 372 "(102,204,204,255)")
(edge 373 "(102,204,204,255)")
(edge 374 "(102,204,204,255)")
(edge 375 "(102,204,204,255)")
(edge 376 "(102,204,204,255)")
(edge 377 "(102,204,204,255)")
(edge 378 "(102,204,204,255)")
(edge 379 "(102,204,204,255)")
(edge 380 "(102,204,204,255)")
(edge 381 "(102,204,204,255)")
(edge 382 "(102,204,204,255)")
(edge 383 "(102,204,204,255)")
(edge 384 "(102,204,204,255)")
(edge 385 "(102,204,204,255)")
(edge 386 "(102,204,204,255)")
(edge 387 "(102,204,204,255)")
(edge 388 "(204,102,142,255)")
(edge 389 "(204,102,142,255)")
(edge 390 "(204,102,142,255)")
(edge 391 "(204,102,142,255)")
(edge 392 "(204,102,142,255)")
)
(property  0 string "viewFont"
(default "TulipBitmapDir/font.ttf" "TulipBitmapDir/font.ttf")
)
(property  0 int "viewFontSize"
(default "18" "18")
(node 0 "52")
(node 96 "6")
(node 97 "6")
(node 98 "10")
(node 52 "10")
(node 53 "10")
(node 54 "10")
(node 7 "10")
(node 57 "10")
(node 10 "10")
(node 152 "10")
(node 105 "10")
(node 58 "10")
(node 153 "10")
(node 59 "10")
(node 154 "10")
(node 13 "10")
(node 158 "10")
(node 159 "10")
(node 160 "6")
(node 20 "52")
(node 161 "52")
(node 162 "10")
(node 163 "6")
(node 164 "10")
(node 71 "6")
(node 165 "10")
(node 25 "52")
(node 166 "6")
(node 167 "52")
(node 74 "6")
(node 168 "52")
(node 169 "52")
(node 170 "10")
(node 171 "10")
(node 172 "10")
(node 173 "6")
(node 129 "10")
(node 42 "52")
(node 137 "10")
(node 92 "6")
)
(property  0 string "viewLabel"
(default "" "")
(node 0 "LCFA")
(node 1 "cis,cis-3,6-Dodecadienoyl-CoA")
(node 2 "(R)-3-Hydroxybutanoyl-CoA")
(node 3 "(S)-3-Hydroxybutyryl-CoA")
(node 4 "Crotonyl-CoA")
(node 5 "Acetoacetyl-CoA")
(node 6 "Butyryl-CoA")
(node 7 "ACP")
(node 8 "3-Oxohexanoyl-CoA")
(node 9 "(2E)-Hexenoyl-CoA")
(node 10 "CoA")
(node 11 "(S)-Hydroxyhexanoyl-CoA")
(node 12 "Hexanoyl-CoA")
(node 13 "Acyl-")
(node 14 "trans,cis-Lauro-2,6-dienoyl-CoA")
(node 15 "3-Oxooctanoyl-CoA")
(node 16 "(S)-Hydroxyoctanoyl-CoA")
(node 17 "(2E)-Octenoyl-CoA")
(node 18 "Octanoyl-CoA")
(node 19 "heteroatomic molecular entity, but not carbonyl compound, nor fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 20 "Reduced\nrubredo-\nxin")
(node 21 "(2E)-Decenoyl-CoA")
(node 22 "Decanoyl-CoA")
(node 23 "(S)-Hydroxydecanoyl-CoA")
(node 24 "3-Oxodecanoyl-CoA")
(node 25 "Oxidized\nrubredo-\nxin")
(node 26 "1-Alcohol")
(node 27 "(S)-3-Hydroxydodecanoyl-CoA")
(node 28 "Lauroyl-CoA")
(node 29 "3-Oxododecanoyl-CoA")
(node 30 "(2E)-Dodecenoyl-CoA")
(node 31 "RCHO")
(node 32 "(S)-3-Hydroxytetradecanoyl-CoA")
(node 33 "Myristoyl-CoA")
(node 34 "3-Oxotetradecanoyl-CoA")
(node 35 "(2E)-Tetradecenoyl-CoA")
(node 36 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA")
(node 37 "FAD")
(node 38 "3-Oxopalmitoyl-CoA")
(node 39 "(S)-3-Hydroxyhexadecanoyl-CoA")
(node 40 "(2E)-Hexadecenoyl-CoA")
(node 41 "Palmitoyl-CoA")
(node 42 "Palmi-\ntate")
(node 43 "FADH2")
(node 44 "generalized rn:R01279")
(node 45 "CoA")
(node 46 "Acetyl-CoA")
(node 47 "Acetyl-CoA")
(node 48 "generalized rn:R01177")
(node 49 "FAD")
(node 50 "FADH2")
(node 51 "unsaturated fatty acyl-CoA")
(node 52 "NAD")
(node 53 "NADH")
(node 54 "H")
(node 55 "H2O")
(node 56 "H2O")
(node 57 "ATP")
(node 58 "AMP")
(node 59 "PPi")
(node 60 "generalized rn:R03026")
(node 61 "carbonyl compound, but not fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 62 "NAD")
(node 63 "NADH")
(node 64 "rn:R01279")
(node 65 "rn:R03990")
(node 66 "rn:R03857")
(node 67 "rn:R04754")
(node 68 "rn:R03777")
(node 69 "rn:R04751")
(node 70 "rn:R01175")
(node 71 "rn:R002-\n38")
(node 72 "rn:R01975")
(node 73 "rn:R03026")
(node 74 "rn:R014-\n06")
(node 75 "rn:R04756")
(node 76 "rn:R03276")
(node 77 "rn:R01177")
(node 78 "rn:R04748")
(node 79 "rn:R04749")
(node 80 "rn:R04747")
(node 81 "rn:R04745")
(node 82 "rn:R04746")
(node 83 "rn:R03778")
(node 84 "rn:R04743")
(node 85 "rn:R04744")
(node 86 "rn:R04742")
(node 87 "rn:R04741")
(node 88 "rn:R04170")
(node 89 "rn:R00623")
(node 90 "rn:R03858")
(node 91 "rn:R04740")
(node 92 "rn:R047-\n39")
(node 93 "rn:R03991")
(node 94 "rn:R04737")
(node 95 "rn:R04738")
(node 96 "rn:R012-\n80")
(node 97 "rn:R020-\n00")
(node 98 "CoA")
(node 99 "CoA")
(node 100 "CoA")
(node 101 "CoA")
(node 102 "CoA")
(node 103 "CoA")
(node 104 "CoA")
(node 105 "Acetyl-\nCoA")
(node 106 "Acetyl-CoA")
(node 107 "Acetyl-CoA")
(node 108 "Acetyl-CoA")
(node 109 "Acetyl-CoA")
(node 110 "Acetyl-CoA")
(node 111 "FAD")
(node 112 "FAD")
(node 113 "FAD")
(node 114 "FAD")
(node 115 "FAD")
(node 116 "FAD")
(node 117 "FADH2")
(node 118 "FADH2")
(node 119 "FADH2")
(node 120 "FADH2")
(node 121 "FADH2")
(node 122 "FADH2")
(node 123 "NAD")
(node 124 "NAD")
(node 125 "NAD")
(node 126 "NAD")
(node 127 "NAD")
(node 128 "NAD")
(node 129 "NAD")
(node 130 "NAD")
(node 131 "NADH")
(node 132 "NADH")
(node 133 "NADH")
(node 134 "NADH")
(node 135 "NADH")
(node 136 "NADH")
(node 137 "NADH")
(node 138 "NADH")
(node 139 "H+")
(node 140 "H+")
(node 141 "H+")
(node 142 "H+")
(node 143 "H+")
(node 144 "H+")
(node 145 "H+")
(node 146 "H2O")
(node 147 "H2O")
(node 148 "H2O")
(node 149 "H2O")
(node 150 "H2O")
(node 151 "H2O")
(node 152 "ATP")
(node 153 "AMP")
(node 154 "PPi")
(node 155 "H+")
(node 156 "generalized rn:R01975")
(node 157 "generalized rn:R04756")
(node 158 "FAD")
(node 159 "FADH2")
(node 160 "rn:R012-\n79")
(node 161 "3-ketoa-\ncyl-CoA")
(node 162 "H2O")
(node 163 "rn:R030-\n26")
(node 164 "CoA")
(node 165 "Acetyl-\nCoA")
(node 166 "rn:R011-\n77")
(node 167 "dehydro-\nacyl-CoA")
(node 168 "hydroxy\nFA-CoA")
(node 169 "fatty\nacyl-\nCoA")
(node 170 "NAD")
(node 171 "NADH")
(node 172 "H")
(node 173 "rn:R019-\n75")
)
(property  0 color "viewLabelColor"
(default "(0,0,0,255)" "(0,0,0,255)")
)
(property  0 int "viewLabelPosition"
(default "0" "0")
)
(property  0 layout "viewLayout"
(default "(0,0,0)" "()")
(node 0 "(-259.25,5,0)")
(node 1 "(-243.25,0,0)")
(node 2 "(184.25,-25,0)")
(node 3 "(184.25,-4,0)")
(node 4 "(208.25,-25,0)")
(node 5 "(96.25,-25,0)")
(node 6 "(196.25,-4,0)")
(node 7 "(-251.25,5,0)")
(node 8 "(160.25,-25,0)")
(node 9 "(128.25,-25,0)")
(node 10 "(30.5049,-4.14267,0)")
(node 11 "(144.25,-4,0)")
(node 12 "(96.25,-4,0)")
(node 13 "(-255.25,-15,0)")
(node 14 "(-243.25,-10,0)")
(node 15 "(64.25,-25,0)")
(node 16 "(48.25,-4,0)")
(node 17 "(32.25,-25,0)")
(node 18 "(16.25,-4,0)")
(node 19 "(-243.25,0,0)")
(node 20 "(178.393,74.372,0)")
(node 21 "(-31.75,-25,0)")
(node 22 "(-47.75,-4,0)")
(node 23 "(-15.75,-4,0)")
(node 24 "(0.25,-25,0)")
(node 25 "(178.393,54.372,0)")
(node 26 "(243.25,5,0)")
(node 27 "(-79.75,-4,0)")
(node 28 "(-111.75,-4,0)")
(node 29 "(-63.75,-25,0)")
(node 30 "(-95.75,-25,0)")
(node 31 "(243.25,-15,0)")
(node 32 "(-143.75,-4,0)")
(node 33 "(-175.75,-4,0)")
(node 34 "(-127.75,-25,0)")
(node 35 "(-159.75,-25,0)")
(node 36 "(184.25,-25,0)")
(node 37 "(-235.75,-10,0)")
(node 38 "(-191.75,-25,0)")
(node 39 "(-207.75,-4,0)")
(node 40 "(-223.75,-25,0)")
(node 41 "(-231.75,-4,0)")
(node 42 "(26.5049,-21.3247,0)")
(node 43 "(-235.75,-19,0)")
(node 44 "(-231.75,-14.5,0)")
(node 45 "(164.25,-19,0)")
(node 46 "(164.25,-10,0)")
(node 47 "(-187.75,-10,0)")
(node 48 "(168.25,-14.5,0)")
(node 49 "(212.25,-10,0)")
(node 50 "(212.25,-19,0)")
(node 51 "(208.25,-25,0)")
(node 52 "(174.393,68.872,0)")
(node 53 "(174.393,59.872,0)")
(node 54 "(182.393,59.872,0)")
(node 55 "(-219.75,-19,0)")
(node 56 "(196.25,-19,0)")
(node 57 "(22.5049,-4.14267,0)")
(node 58 "(22.5049,-13.1427,0)")
(node 59 "(30.5049,-13.1427,0)")
(node 60 "(200.25,-14.5,0)")
(node 61 "(96.25,-25,0)")
(node 62 "(100.25,-10,0)")
(node 63 "(100.25,-19,0)")
(node 64 "(-231.75,-14.5,0)")
(node 65 "(-167.75,-14.5,0)")
(node 66 "(-103.75,-14.5,0)")
(node 67 "(-39.75,-14.5,0)")
(node 68 "(24.25,-14.5,0)")
(node 69 "(120.25,-14.5,0)")
(node 70 "(216.25,-14.5,0)")
(node 71 "(-4.9021,25.7417,0)")
(node 72 "(104.25,-14.5,0)")
(node 73 "(200.25,-14.5,0)")
(node 74 "(-255.25,-5,0)")
(node 75 "(-243.25,-5,0)")
(node 76 "(184.25,-14.5,0)")
(node 77 "(168.25,-14.5,0)")
(node 78 "(152.25,-14.5,0)")
(node 79 "(136.25,-14.5,0)")
(node 80 "(72.25,-14.5,0)")
(node 81 "(56.25,-14.5,0)")
(node 82 "(40.25,-14.5,0)")
(node 83 "(8.25,-14.5,0)")
(node 84 "(-7.75,-14.5,0)")
(node 85 "(-23.75,-14.5,0)")
(node 86 "(-55.75,-14.5,0)")
(node 87 "(-71.75,-14.5,0)")
(node 88 "(-87.75,-14.5,0)")
(node 89 "(243.25,-5,0)")
(node 90 "(-119.75,-14.5,0)")
(node 91 "(-151.75,-14.5,0)")
(node 92 "(19.232,33.0665,0)")
(node 93 "(-183.75,-14.5,0)")
(node 94 "(-199.75,-14.5,0)")
(node 95 "(-215.75,-14.5,0)")
(node 96 "(26.5049,-8.64267,0)")
(node 97 "(178.393,64.372,0)")
(node 98 "(-11.6414,23.234,0)")
(node 99 "(164.25,-19,0)")
(node 100 "(68.25,-19,0)")
(node 101 "(4.25,-19,0)")
(node 102 "(-59.75,-19,0)")
(node 103 "(-123.75,-19,0)")
(node 104 "(-187.75,-19,0)")
(node 105 "(-11.5311,28.1776,0)")
(node 106 "(164.25,-10,0)")
(node 107 "(68.25,-10,0)")
(node 108 "(4.25,-10,0)")
(node 109 "(-59.75,-10,0)")
(node 110 "(-123.75,-10,0)")
(node 111 "(-235.75,-10,0)")
(node 112 "(-171.75,-10,0)")
(node 113 "(-107.75,-10,0)")
(node 114 "(-43.75,-10,0)")
(node 115 "(20.25,-10,0)")
(node 116 "(116.25,-10,0)")
(node 117 "(-235.75,-19,0)")
(node 118 "(-171.75,-19,0)")
(node 119 "(-107.75,-19,0)")
(node 120 "(-43.75,-19,0)")
(node 121 "(20.25,-19,0)")
(node 122 "(116.25,-19,0)")
(node 123 "(100.25,-10,0)")
(node 124 "(148.25,-10,0)")
(node 125 "(52.25,-10,0)")
(node 126 "(-11.75,-10,0)")
(node 127 "(-75.75,-10,0)")
(node 128 "(239.25,-0.5,0)")
(node 129 "(17.4493,37.9991,0)")
(node 130 "(-203.75,-10,0)")
(node 131 "(100.25,-19,0)")
(node 132 "(148.25,-19,0)")
(node 133 "(52.25,-19,0)")
(node 134 "(-11.75,-19,0)")
(node 135 "(-75.75,-19,0)")
(node 136 "(239.25,-9.5,0)")
(node 137 "(14.363,34.433,0)")
(node 138 "(-203.75,-19,0)")
(node 139 "(108.25,-19,0)")
(node 140 "(156.25,-19,0)")
(node 141 "(60.25,-19,0)")
(node 142 "(-3.75,-19,0)")
(node 143 "(-67.75,-19,0)")
(node 144 "(247.25,-9.5,0)")
(node 145 "(-195.75,-19,0)")
(node 146 "(196.25,-19,0)")
(node 147 "(132.25,-19,0)")
(node 148 "(36.25,-19,0)")
(node 149 "(-27.75,-19,0)")
(node 150 "(-91.75,-19,0)")
(node 151 "(-155.75,-19,0)")
(node 152 "(-259.25,-0.5,0)")
(node 153 "(-259.25,-9.5,0)")
(node 154 "(-251.25,-9.5,0)")
(node 155 "(108.25,-19,0)")
(node 156 "(104.25,-14.5,0)")
(node 157 "(-243.25,-5,0)")
(node 158 "(48.0513,1.00722,0)")
(node 159 "(51.7584,4.71433,0)")
(node 160 "(41.8039,10.3662,0)")
(node 161 "(4.699,25.7356,0)")
(node 162 "(48.9463,48.2473,0)")
(node 163 "(41.8039,41.1049,0)")
(node 164 "(5.71109,0.70948,0)")
(node 165 "(2.00399,4.41659,0)")
(node 166 "(11.0652,10.3662,0)")
(node 167 "(48.1701,25.7356,0)")
(node 168 "(26.4346,47.4711,0)")
(node 169 "(26.4346,4,0)")
(node 170 "(0.713539,43.7747,0)")
(node 171 "(4.07163,47.8007,0)")
(node 172 "(8.09761,51.1588,0)")
(node 173 "(11.0652,41.1049,0)")
)
(property  0 graph "viewMetaGraph"
(default "" "()")
(node 37 "425")
(node 43 "426")
(node 44 "427")
(node 155 "437")
(node 45 "428")
(node 156 "438")
(node 46 "429")
(node 157 "439")
(node 158 "85")
(node 48 "430")
(node 159 "86")
(node 160 "87")
(node 161 "88")
(node 162 "89")
(node 51 "431")
(node 163 "90")
(node 164 "91")
(node 165 "92")
(node 166 "93")
(node 19 "423")
(node 56 "432")
(node 167 "94")
(node 168 "95")
(node 169 "96")
(node 170 "97")
(node 60 "433")
(node 171 "98")
(node 61 "434")
(node 172 "99")
(node 62 "435")
(node 173 "100")
(node 63 "436")
(node 36 "424")
(edge 1 "(45 )")
(edge 3 "(31 )")
(edge 5 "(36 )")
(edge 7 "(47 )")
(edge 9 "(53 )")
(edge 11 "(58 )")
(edge 13 "(65 )")
(edge 15 "(70 )")
(edge 17 "(77 )")
(edge 19 "(82 )")
(edge 21 "(97 )")
(edge 23 "(89 )")
(edge 28 "(94 )")
(edge 30 "(106 )")
(edge 32 "(109 )")
(edge 34 "(117 )")
(edge 35 "(122 )")
(edge 38 "(48 )")
(edge 41 "(24 )")
(edge 43 "(50 )")
(edge 44 "(20 )")
(edge 49 "(62 )")
(edge 51 "(46 )")
(edge 54 "(16 )")
(edge 56 "(74 )")
(edge 57 "(12 )")
(edge 60 "(86 )")
(edge 61 "(8 )")
(edge 63 "(103 )")
(edge 66 "(4 )")
(edge 68 "(114 )")
(edge 69 "(0 )")
(edge 72 "(128 )")
(edge 73 "(149 )")
(edge 76 "(150 )")
(edge 78 "(151 )")
(edge 80 "(152 )")
(edge 81 "(153 )")
(edge 84 "(25 )")
(edge 85 "(154 )")
(edge 87 "(160 )")
(edge 90 "(27 )")
(edge 92 "(155 )")
(edge 93 "(156 )")
(edge 96 "(157 )")
(edge 98 "(158 )")
(edge 100 "(159 )")
(edge 101 "(2 )")
(edge 102 "(41 44 54 57 61 66 69 )")
(edge 105 "(73 76 78 80 81 84 85 )")
(edge 108 "(87 90 92 93 96 98 100 )")
(edge 110 "(6 )")
(edge 112 "(10 )")
(edge 116 "(14 )")
(edge 118 "(18 )")
(edge 120 "(22 )")
(edge 121 "(26 )")
(edge 193 "(137 )")
(edge 194 "(138 )")
(edge 195 "(139 )")
(edge 196 "(140 )")
(edge 197 "(141 )")
(edge 198 "(142 )")
(edge 199 "(113 )")
(edge 200 "(144 )")
(edge 201 "(145 )")
(edge 202 "(146 )")
(edge 203 "(147 )")
(edge 204 "(148 )")
(edge 205 "(52 )")
(edge 206 "(43 49 56 60 63 68 )")
(edge 207 "(193 194 195 196 197 198 )")
(edge 208 "(199 200 201 202 203 204 )")
(edge 209 "(64 )")
(edge 210 "(75 )")
(edge 211 "(88 )")
(edge 212 "(104 )")
(edge 213 "(115 )")
(edge 214 "(37 )")
(edge 215 "(101 110 112 116 118 120 121 )")
(edge 216 "(59 )")
(edge 217 "(71 )")
(edge 218 "(83 )")
(edge 219 "(95 )")
(edge 220 "(107 )")
(edge 221 "(123 )")
(edge 222 "(184 )")
(edge 223 "(185 )")
(edge 224 "(186 )")
(edge 225 "(187 )")
(edge 226 "(188 )")
(edge 227 "(189 )")
(edge 228 "(124 )")
(edge 229 "(5 11 15 19 28 30 35 )")
(edge 230 "(214 216 217 218 219 220 221 )")
(edge 231 "(222 223 224 225 226 227 228 )")
(edge 232 "(29 )")
(edge 233 "(33 )")
(edge 234 "(55 )")
(edge 235 "(205 209 210 211 212 213 )")
(edge 236 "(67 )")
(edge 237 "(79 )")
(edge 238 "(91 )")
(edge 239 "(99 )")
(edge 240 "(111 )")
(edge 241 "(119 )")
(edge 242 "(161 )")
(edge 243 "(162 )")
(edge 244 "(163 )")
(edge 245 "(164 )")
(edge 246 "(165 )")
(edge 247 "(166 )")
(edge 248 "(168 )")
(edge 249 "(169 )")
(edge 250 "(170 )")
(edge 251 "(171 )")
(edge 252 "(172 )")
(edge 253 "(173 )")
(edge 254 "(174 )")
(edge 255 "(176 )")
(edge 256 "(177 )")
(edge 257 "(178 )")
(edge 258 "(179 )")
(edge 259 "(180 )")
(edge 260 "(181 )")
(edge 261 "(182 )")
(edge 262 "(183 )")
(edge 263 "(3 9 13 17 21 23 34 )")
(edge 264 "(233 234 236 237 238 239 241 )")
(edge 265 "(242 243 244 245 246 247 248 )")
(edge 266 "(249 250 251 252 253 254 255 )")
(edge 267 "(256 257 258 259 260 261 262 )")
(edge 268 "(1 7 )")
(edge 269 "(38 51 )")
(edge 270 "(149 )")
(edge 271 "(150 )")
(edge 272 "(151 )")
(edge 273 "(152 )")
(edge 274 "(153 )")
(edge 275 "(25 )")
(edge 276 "(154 )")
(edge 277 "(159 )")
(edge 278 "(160 )")
(edge 279 "(27 )")
(edge 280 "(155 )")
(edge 281 "(156 )")
(edge 282 "(157 )")
(edge 283 "(158 )")
(edge 284 "(0 )")
(edge 285 "(2 )")
(edge 286 "(270 271 272 273 274 275 276 )")
(edge 287 "(277 278 279 280 281 282 283 )")
(edge 288 "(4 )")
(edge 289 "(6 )")
(edge 290 "(8 )")
(edge 291 "(10 )")
(edge 292 "(12 )")
(edge 293 "(14 )")
(edge 294 "(16 )")
(edge 295 "(18 )")
(edge 296 "(20 )")
(edge 297 "(22 )")
(edge 298 "(24 )")
(edge 299 "(26 )")
(edge 300 "(29 )")
(edge 301 "(33 )")
(edge 302 "(52 )")
(edge 303 "(55 )")
(edge 304 "(64 )")
(edge 305 "(67 )")
(edge 306 "(75 )")
(edge 307 "(79 )")
(edge 308 "(88 )")
(edge 309 "(91 )")
(edge 310 "(104 )")
(edge 311 "(111 )")
(edge 312 "(115 )")
(edge 313 "(119 )")
(edge 314 "(124 )")
(edge 315 "(184 )")
(edge 316 "(185 )")
(edge 317 "(186 )")
(edge 318 "(187 )")
(edge 319 "(188 )")
(edge 320 "(189 )")
(edge 321 "(36 )")
(edge 322 "(37 )")
(edge 323 "(314 315 316 317 318 319 320 )")
(edge 324 "(58 )")
(edge 325 "(59 )")
(edge 326 "(70 )")
(edge 327 "(71 )")
(edge 328 "(82 )")
(edge 329 "(83 )")
(edge 330 "(94 )")
(edge 331 "(95 )")
(edge 332 "(106 )")
(edge 333 "(107 )")
(edge 334 "(122 )")
(edge 335 "(123 )")
(edge 336 "(137 )")
(edge 337 "(138 )")
(edge 338 "(139 )")
(edge 339 "(140 )")
(edge 340 "(141 )")
(edge 341 "(142 )")
(edge 342 "(148 )")
(edge 343 "(113 )")
(edge 344 "(144 )")
(edge 345 "(145 )")
(edge 346 "(146 )")
(edge 347 "(147 )")
(edge 348 "(50 )")
(edge 349 "(302 304 306 308 310 312 )")
(edge 350 "(336 337 338 339 340 341 )")
(edge 351 "(342 343 344 345 346 347 )")
(edge 352 "(62 )")
(edge 353 "(74 )")
(edge 354 "(86 )")
(edge 355 "(103 )")
(edge 356 "(114 )")
(edge 357 "(285 289 291 293 295 297 299 )")
(edge 358 "(322 325 327 329 331 333 335 )")
(edge 359 "(31 )")
(edge 360 "(321 324 326 328 330 332 334 )")
(edge 361 "(53 )")
(edge 362 "(65 )")
(edge 363 "(77 )")
(edge 364 "(89 )")
(edge 365 "(109 )")
(edge 366 "(117 )")
(edge 367 "(284 288 290 292 294 296 298 )")
(edge 368 "(348 352 353 354 355 356 )")
(edge 369 "(128 )")
(edge 370 "(161 )")
(edge 371 "(162 )")
(edge 372 "(163 )")
(edge 373 "(164 )")
(edge 374 "(165 )")
(edge 375 "(168 )")
(edge 376 "(169 )")
(edge 377 "(170 )")
(edge 378 "(171 )")
(edge 379 "(172 )")
(edge 380 "(173 )")
(edge 381 "(176 )")
(edge 382 "(177 )")
(edge 383 "(178 )")
(edge 384 "(179 )")
(edge 385 "(180 )")
(edge 386 "(181 )")
(edge 387 "(183 )")
(edge 388 "(301 303 305 307 309 313 )")
(edge 389 "(359 361 362 363 364 366 )")
(edge 390 "(370 371 372 373 374 375 )")
(edge 391 "(376 377 378 379 380 381 )")
(edge 392 "(382 383 384 385 386 387 )")
)
(property  0 double "viewRotation"
(default "0" "0")
)
(property  0 bool "viewSelection"
(default "false" "false")
)
(property  0 int "viewShape"
(default "4" "0")
(node 0 "120")
(node 1 "120")
(node 2 "120")
(node 3 "120")
(node 4 "120")
(node 5 "120")
(node 6 "120")
(node 7 "120")
(node 8 "120")
(node 9 "120")
(node 10 "120")
(node 11 "120")
(node 12 "120")
(node 13 "120")
(node 14 "120")
(node 15 "120")
(node 16 "120")
(node 17 "120")
(node 18 "120")
(node 19 "120")
(node 20 "120")
(node 21 "120")
(node 22 "120")
(node 23 "120")
(node 24 "120")
(node 25 "120")
(node 26 "120")
(node 27 "120")
(node 28 "120")
(node 29 "120")
(node 30 "120")
(node 31 "120")
(node 32 "120")
(node 33 "120")
(node 34 "120")
(node 35 "120")
(node 36 "120")
(node 37 "120")
(node 38 "120")
(node 39 "120")
(node 40 "120")
(node 41 "120")
(node 42 "120")
(node 43 "120")
(node 44 "124")
(node 45 "120")
(node 46 "120")
(node 47 "120")
(node 48 "124")
(node 49 "120")
(node 50 "120")
(node 51 "120")
(node 52 "120")
(node 53 "120")
(node 54 "120")
(node 55 "120")
(node 56 "120")
(node 57 "120")
(node 58 "120")
(node 59 "120")
(node 60 "124")
(node 61 "120")
(node 62 "120")
(node 63 "120")
(node 64 "124")
(node 65 "124")
(node 66 "124")
(node 67 "124")
(node 68 "124")
(node 69 "124")
(node 70 "124")
(node 71 "124")
(node 72 "124")
(node 73 "124")
(node 74 "124")
(node 75 "124")
(node 76 "124")
(node 77 "124")
(node 78 "124")
(node 79 "124")
(node 80 "124")
(node 81 "124")
(node 82 "124")
(node 83 "124")
(node 84 "124")
(node 85 "124")
(node 86 "124")
(node 87 "124")
(node 88 "124")
(node 89 "124")
(node 90 "124")
(node 91 "124")
(node 92 "124")
(node 93 "124")
(node 94 "124")
(node 95 "124")
(node 96 "124")
(node 97 "124")
(node 98 "120")
(node 99 "120")
(node 100 "120")
(node 101 "120")
(node 102 "120")
(node 103 "120")
(node 104 "120")
(node 105 "120")
(node 106 "120")
(node 107 "120")
(node 108 "120")
(node 109 "120")
(node 110 "120")
(node 111 "120")
(node 112 "120")
(node 113 "120")
(node 114 "120")
(node 115 "120")
(node 116 "120")
(node 117 "120")
(node 118 "120")
(node 119 "120")
(node 120 "120")
(node 121 "120")
(node 122 "120")
(node 123 "120")
(node 124 "120")
(node 125 "120")
(node 126 "120")
(node 127 "120")
(node 128 "120")
(node 129 "120")
(node 130 "120")
(node 131 "120")
(node 132 "120")
(node 133 "120")
(node 134 "120")
(node 135 "120")
(node 136 "120")
(node 137 "120")
(node 138 "120")
(node 139 "120")
(node 140 "120")
(node 141 "120")
(node 142 "120")
(node 143 "120")
(node 144 "120")
(node 145 "120")
(node 146 "120")
(node 147 "120")
(node 148 "120")
(node 149 "120")
(node 150 "120")
(node 151 "120")
(node 152 "120")
(node 153 "120")
(node 154 "120")
(node 155 "120")
(node 156 "124")
(node 157 "124")
(node 158 "120")
(node 159 "120")
(node 160 "124")
(node 161 "120")
(node 162 "120")
(node 163 "124")
(node 164 "120")
(node 165 "120")
(node 166 "124")
(node 167 "120")
(node 168 "120")
(node 169 "120")
(node 170 "120")
(node 171 "120")
(node 172 "120")
(node 173 "124")
)
(property  0 size "viewSize"
(default "(1,1,1)" "(0.5,0.5,0)")
(node 0 "(6,6,0)")
(node 1 "(3,3,3)")
(node 2 "(3,3,3)")
(node 3 "(3,3,3)")
(node 4 "(3,3,3)")
(node 5 "(3,3,3)")
(node 6 "(3,3,3)")
(node 7 "(4,4,0)")
(node 8 "(3,3,3)")
(node 9 "(3,3,3)")
(node 10 "(4,4,0)")
(node 11 "(3,3,3)")
(node 12 "(3,3,3)")
(node 13 "(4,4,0)")
(node 14 "(3,3,3)")
(node 15 "(3,3,3)")
(node 16 "(3,3,3)")
(node 17 "(3,3,3)")
(node 18 "(3,3,3)")
(node 19 "(6,6,0)")
(node 20 "(6,6,0)")
(node 21 "(3,3,3)")
(node 22 "(3,3,3)")
(node 23 "(3,3,3)")
(node 24 "(3,3,3)")
(node 25 "(6,6,0)")
(node 26 "(3,3,3)")
(node 27 "(3,3,3)")
(node 28 "(3,3,3)")
(node 29 "(3,3,3)")
(node 30 "(3,3,3)")
(node 31 "(3,3,3)")
(node 32 "(3,3,3)")
(node 33 "(3,3,3)")
(node 34 "(3,3,3)")
(node 35 "(3,3,3)")
(node 36 "(6,6,0)")
(node 37 "(3,3,0)")
(node 38 "(3,3,3)")
(node 39 "(3,3,3)")
(node 40 "(3,3,3)")
(node 41 "(3,3,3)")
(node 42 "(6,6,0)")
(node 43 "(3,3,0)")
(node 44 "(4,4,0)")
(node 45 "(3,3,0)")
(node 46 "(3,3,0)")
(node 47 "(3,3,3)")
(node 48 "(4,4,0)")
(node 49 "(3,3,3)")
(node 50 "(3,3,3)")
(node 51 "(6,6,0)")
(node 52 "(4,4,0)")
(node 53 "(4,4,0)")
(node 54 "(4,4,0)")
(node 55 "(3,3,3)")
(node 56 "(3,3,0)")
(node 57 "(4,4,0)")
(node 58 "(4,4,0)")
(node 59 "(4,4,0)")
(node 60 "(4,4,0)")
(node 61 "(6,6,0)")
(node 62 "(3,3,0)")
(node 63 "(3,3,0)")
(node 71 "(3,3,0)")
(node 74 "(3,3,0)")
(node 92 "(3,3,0)")
(node 96 "(3,3,0)")
(node 97 "(3,3,0)")
(node 98 "(4,4,0)")
(node 99 "(3,3,3)")
(node 100 "(3,3,3)")
(node 101 "(3,3,3)")
(node 102 "(3,3,3)")
(node 103 "(3,3,3)")
(node 104 "(3,3,3)")
(node 105 "(4,4,0)")
(node 106 "(3,3,3)")
(node 107 "(3,3,3)")
(node 108 "(3,3,3)")
(node 109 "(3,3,3)")
(node 110 "(3,3,3)")
(node 111 "(3,3,3)")
(node 112 "(3,3,3)")
(node 113 "(3,3,3)")
(node 114 "(3,3,3)")
(node 115 "(3,3,3)")
(node 116 "(3,3,3)")
(node 117 "(3,3,3)")
(node 118 "(3,3,3)")
(node 119 "(3,3,3)")
(node 120 "(3,3,3)")
(node 121 "(3,3,3)")
(node 122 "(3,3,3)")
(node 123 "(3,3,3)")
(node 124 "(3,3,3)")
(node 125 "(3,3,3)")
(node 126 "(3,3,3)")
(node 127 "(3,3,3)")
(node 128 "(3,3,3)")
(node 129 "(4,4,0)")
(node 130 "(3,3,3)")
(node 131 "(3,3,3)")
(node 132 "(3,3,3)")
(node 133 "(3,3,3)")
(node 134 "(3,3,3)")
(node 135 "(3,3,3)")
(node 136 "(3,3,3)")
(node 137 "(4,4,0)")
(node 138 "(3,3,3)")
(node 139 "(3,3,3)")
(node 140 "(3,3,3)")
(node 141 "(3,3,3)")
(node 142 "(3,3,3)")
(node 143 "(3,3,3)")
(node 144 "(3,3,3)")
(node 145 "(3,3,3)")
(node 146 "(3,3,3)")
(node 147 "(3,3,3)")
(node 148 "(3,3,3)")
(node 149 "(3,3,3)")
(node 150 "(3,3,3)")
(node 151 "(3,3,3)")
(node 152 "(4,4,0)")
(node 153 "(4,4,0)")
(node 154 "(4,4,0)")
(node 155 "(3,3,0)")
(node 156 "(4,4,0)")
(node 157 "(4,4,0)")
(node 158 "(5,5,0)")
(node 159 "(5,5,0)")
(node 160 "(8,8,0)")
(node 161 "(13,13,0)")
(node 162 "(5,5,0)")
(node 163 "(8,8,0)")
(node 164 "(5,5,0)")
(node 165 "(5,5,0)")
(node 166 "(8,8,0)")
(node 167 "(13,13,0)")
(node 168 "(13,13,0)")
(node 169 "(13,13,0)")
(node 170 "(5,5,0)")
(node 171 "(5,5,0)")
(node 172 "(5,5,0)")
(node 173 "(8,8,0)")
)
(property  0 int "viewSrcAnchorShape"
(default "0" "-1")
(edge 31 "50")
(edge 36 "50")
(edge 39 "50")
(edge 40 "50")
(edge 45 "50")
(edge 47 "50")
(edge 50 "50")
(edge 53 "50")
(edge 58 "50")
(edge 62 "50")
(edge 65 "50")
(edge 70 "50")
(edge 74 "50")
(edge 77 "50")
(edge 82 "50")
(edge 86 "50")
(edge 89 "50")
(edge 94 "50")
(edge 97 "50")
(edge 103 "50")
(edge 106 "50")
(edge 109 "50")
(edge 113 "50")
(edge 114 "50")
(edge 117 "50")
(edge 122 "50")
(edge 125 "50")
(edge 126 "50")
(edge 127 "50")
(edge 131 "50")
(edge 132 "50")
(edge 143 "50")
(edge 144 "50")
(edge 145 "50")
(edge 146 "50")
(edge 147 "50")
(edge 148 "50")
(edge 161 "50")
(edge 162 "50")
(edge 163 "50")
(edge 164 "50")
(edge 165 "50")
(edge 166 "50")
(edge 167 "50")
(edge 168 "50")
(edge 190 "50")
)
(property  0 size "viewSrcAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  0 string "viewTexture"
(default "" "")
)
(property  0 int "viewTgtAnchorShape"
(default "0" "50")
(edge 31 "-1")
(edge 36 "-1")
(edge 39 "-1")
(edge 40 "-1")
(edge 45 "-1")
(edge 47 "-1")
(edge 50 "-1")
(edge 53 "-1")
(edge 58 "-1")
(edge 62 "-1")
(edge 65 "-1")
(edge 70 "-1")
(edge 74 "-1")
(edge 77 "-1")
(edge 82 "-1")
(edge 86 "-1")
(edge 89 "-1")
(edge 94 "-1")
(edge 97 "-1")
(edge 103 "-1")
(edge 106 "-1")
(edge 109 "-1")
(edge 113 "-1")
(edge 114 "-1")
(edge 117 "-1")
(edge 122 "-1")
(edge 125 "-1")
(edge 126 "-1")
(edge 127 "-1")
(edge 131 "-1")
(edge 132 "-1")
(edge 143 "-1")
(edge 144 "-1")
(edge 145 "-1")
(edge 146 "-1")
(edge 147 "-1")
(edge 148 "-1")
(edge 161 "-1")
(edge 162 "-1")
(edge 163 "-1")
(edge 164 "-1")
(edge 165 "-1")
(edge 166 "-1")
(edge 167 "-1")
(edge 168 "-1")
(edge 190 "-1")
)
(property  0 size "viewTgtAnchorSize"
(default "(1,1,0)" "(0.25,0.25,0.25)")
)
(property  7 string "ancestor"
(default "" "")
(node 1 "heteroatomic molecular entity, but not carbonyl compound, nor fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 2 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA")
(node 3 "hydroxy fatty acyl-CoA")
(node 4 "unsaturated fatty acyl-CoA")
(node 5 "3-oxo-fatty acyl-CoA(4-)")
(node 6 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 8 "3-oxo-fatty acyl-CoA(4-)")
(node 9 "unsaturated fatty acyl-CoA")
(node 11 "hydroxy fatty acyl-CoA")
(node 12 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 14 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA")
(node 15 "3-oxo-fatty acyl-CoA(4-)")
(node 16 "hydroxy fatty acyl-CoA")
(node 17 "unsaturated fatty acyl-CoA")
(node 18 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 19 "heteroatomic molecular entity, but not carbonyl compound, nor fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 21 "unsaturated fatty acyl-CoA")
(node 22 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 23 "hydroxy fatty acyl-CoA")
(node 24 "3-oxo-fatty acyl-CoA(4-)")
(node 26 "heteroatomic molecular entity, but not carbonyl compound, nor fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 27 "hydroxy fatty acyl-CoA")
(node 28 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 29 "3-oxo-fatty acyl-CoA(4-)")
(node 30 "unsaturated fatty acyl-CoA")
(node 31 "carbonyl compound, but not fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 32 "hydroxy fatty acyl-CoA")
(node 33 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 34 "3-oxo-fatty acyl-CoA(4-)")
(node 35 "unsaturated fatty acyl-CoA")
(node 36 "fatty acyl-CoA, but not unsaturated fatty acyl-CoA")
(node 38 "3-oxo-fatty acyl-CoA(4-)")
(node 39 "hydroxy fatty acyl-CoA")
(node 40 "unsaturated fatty acyl-CoA")
(node 41 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 44 "0.0")
(node 48 "1.0")
(node 51 "unsaturated fatty acyl-CoA")
(node 60 "4.0")
(node 61 "carbonyl compound, but not fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 64 "5.0")
(node 65 "5.0")
(node 66 "5.0")
(node 67 "5.0")
(node 68 "5.0")
(node 69 "5.0")
(node 70 "5.0")
(node 71 "6.0")
(node 72 "4.0")
(node 73 "2.0")
(node 74 "8.0")
(node 75 "7.0")
(node 76 "7.0")
(node 77 "0.0")
(node 78 "4.0")
(node 79 "2.0")
(node 80 "0.0")
(node 81 "4.0")
(node 82 "2.0")
(node 83 "0.0")
(node 84 "4.0")
(node 85 "2.0")
(node 86 "0.0")
(node 87 "4.0")
(node 88 "2.0")
(node 89 "8.0")
(node 90 "0.0")
(node 91 "2.0")
(node 92 "3.0")
(node 93 "0.0")
(node 94 "4.0")
(node 95 "2.0")
(node 96 "1.0")
(node 97 "7.0")
(node 156 "8.0")
(node 157 "7.0")
(node 160 "5.0")
(node 161 "3-oxo-fatty acyl-CoA(4-)")
(node 163 "2.0")
(node 166 "0.0")
(node 167 "unsaturated fatty acyl-CoA")
(node 168 "hydroxy fatty acyl-CoA")
(node 169 "fatty acyl-CoA, but not 3-oxo-fatty acyl-CoA(4-), nor hydroxy fatty acyl-CoA, nor unsaturated fatty acyl-CoA")
(node 173 "4.0")
)
(property  7 vector<string> "ancestor_chebi_id"
(default "()" "()")
(node 1 "(\"chebi:37577\")")
(node 2 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 3 "(\"chebi:61902\")")
(node 4 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 5 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 6 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 8 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 9 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 11 "(\"chebi:61902\")")
(node 12 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 14 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 15 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 16 "(\"chebi:61902\")")
(node 17 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 18 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 21 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 22 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 23 "(\"chebi:61902\")")
(node 24 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 26 "(\"chebi:37577\")")
(node 27 "(\"chebi:61902\")")
(node 28 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 29 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 30 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 31 "(\"chebi:36586\")")
(node 32 "(\"chebi:61902\")")
(node 33 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
(node 34 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 35 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 38 "(\"chebi:57347\", \"metacyc:3-ketoacyl-coa\")")
(node 39 "(\"chebi:61902\")")
(node 40 "(\"chebi:61913\", \"citexplore:13152086\", \"chebi:23917\", \"chebi:23589\", \"chebi:51006\")")
(node 41 "(\"chebi:37554\", \"citexplore:11524729\", \"citexplore:2079609\", \"chebi:4987\", \"chebi:24025\", \"citexplore:20442897\")")
)
(property  421 vector<string> "comprises"
(default "()" "()")
(node 158 "(\"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\")")
(node 159 "(\"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\")")
(node 160 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 161 "(\"Acetoacetyl-CoA\", \"3-Oxohexanoyl-CoA\", \"3-Oxooctanoyl-CoA\", \"3-Oxodecanoyl-CoA\", \"3-Oxododecanoyl-CoA\", \"3-Oxotetradecanoyl-CoA\", \"3-Oxopalmitoyl-CoA\")")
(node 162 "(\"H2O\", \"H2O\", \"H2O\", \"H2O\", \"H2O\", \"H2O\", \"H2O\")")
(node 163 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 164 "(\"CoA\", \"CoA\", \"CoA\", \"CoA\", \"CoA\", \"CoA\")")
(node 165 "(\"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\")")
(node 166 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 167 "(\"Crotonyl-CoA\", \"(2E)-Hexenoyl-CoA\", \"(2E)-Octenoyl-CoA\", \"(2E)-Decenoyl-CoA\", \"(2E)-Dodecenoyl-CoA\", \"(2E)-Tetradecenoyl-CoA\", \"(2E)-Hexadecenoyl-CoA\")")
(node 168 "(\"(S)-3-Hydroxybutyryl-CoA\", \"(S)-Hydroxyhexanoyl-CoA\", \"(S)-Hydroxyoctanoyl-CoA\", \"(S)-Hydroxydecanoyl-CoA\", \"(S)-3-Hydroxydodecanoyl-CoA\", \"(S)-3-Hydroxytetradecanoyl-CoA\", \"(S)-3-Hydroxyhexadecanoyl-CoA\")")
(node 169 "(\"Butyryl-CoA\", \"Hexanoyl-CoA\", \"Octanoyl-CoA\", \"Decanoyl-CoA\", \"Lauroyl-CoA\", \"Myristoyl-CoA\", \"Palmitoyl-CoA\")")
(node 170 "(\"NAD\", \"NAD\", \"NAD\", \"NAD\", \"NAD\", \"NAD\")")
(node 171 "(\"NADH\", \"NADH\", \"NADH\", \"NADH\", \"NADH\", \"NADH\")")
(node 172 "(\"H+\", \"H+\", \"H+\", \"H+\", \"H+\", \"H+\")")
(node 173 "(\"\", \"\", \"\", \"\", \"\", \"\")")
)
(property  84 double "metric"
(default "0" "0")
(node 0 "20")
(node 98 "1")
(node 52 "1")
(node 53 "1")
(node 54 "1")
(node 7 "1")
(node 57 "1")
(node 10 "1")
(node 152 "1")
(node 105 "1")
(node 58 "1")
(node 153 "1")
(node 59 "1")
(node 154 "1")
(node 13 "1")
(node 158 "1")
(node 159 "1")
(node 20 "20")
(node 161 "20")
(node 162 "1")
(node 164 "1")
(node 165 "1")
(node 25 "20")
(node 167 "20")
(node 168 "20")
(node 169 "20")
(node 170 "1")
(node 171 "1")
(node 172 "1")
(node 129 "1")
(node 42 "20")
(node 137 "1")
)
(property  84 vector<color> "multiColor"
(default "()" "()")
(node 0 "((211,211,211,255))")
(node 96 "((220,220,220,255))")
(node 97 "((220,220,220,255))")
(node 98 "((220,220,220,255))")
(node 52 "((220,220,220,255))")
(node 53 "((220,220,220,255))")
(node 54 "((220,220,220,255))")
(node 7 "((220,220,220,255))")
(node 57 "((220,220,220,255))")
(node 10 "((220,220,220,255))")
(node 152 "((220,220,220,255))")
(node 105 "((220,220,220,255))")
(node 58 "((220,220,220,255))")
(node 153 "((220,220,220,255))")
(node 59 "((220,220,220,255))")
(node 154 "((220,220,220,255))")
(node 13 "((220,220,220,255))")
(node 158 "((220,220,220,255))")
(node 159 "((220,220,220,255))")
(node 160 "((142,204,102,255))")
(node 20 "((211,211,211,255))")
(node 161 "((204,102,189,255))")
(node 162 "((220,220,220,255))")
(node 163 "((142,102,204,255))")
(node 164 "((220,220,220,255))")
(node 71 "((204,102,189,255))")
(node 165 "((220,220,220,255))")
(node 166 "((204,102,183,255))")
(node 25 "((211,211,211,255))")
(node 167 "((102,142,204,255))")
(node 74 "((220,220,220,255))")
(node 168 "((102,204,160,255))")
(node 169 "((102,183,204,255))")
(node 170 "((220,220,220,255))")
(node 171 "((220,220,220,255))")
(node 172 "((220,220,220,255))")
(node 173 "((204,102,142,255))")
(node 129 "((220,220,220,255))")
(node 42 "((170,204,102,255))")
(node 137 "((220,220,220,255))")
(node 92 "((204,102,142,255))")
)
(property  84 vector<string> "synonyms"
(default "()" "()")
(node 161 "(\"3-oxo-fatty acyl-CoA(4-)\", \"3-ketoacyl-coenzyme A\", \"3-ketoacyl-CoA\", \"3-oxoacyl-coenzyme A\", \"C24H33N7O18P3SR\", \"CC(C)(COP([O-])(=O)OP([O-])(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP([O-])([O-])=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC(=O)CC([*])=O\")")
(node 0 "(\"long-chain fatty acid\", \"Long-chain fatty acid\", \"CHO2R\", \"long-chain fatty acids\", \"Higher fatty acid\", \"LCFAs\", \"LCFA\", \"OC([*])=O\")")
(node 164 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 98 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 52 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 167 "(\"unsaturated fatty acyl-CoA\", \"dehydroacyl-CoA\", \"dehydroacyl-CoAs\", \"unsaturated fatty acyl-coenzyme A\", \"unsaturated fatty acyl-CoAs\", \"unsaturated acyl-CoA\", \"unsaturated FA-CoA\")")
(node 53 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 7 "(\"holo-[acyl-carrier protein]\", \"HSR\", \"[Acyl-carrier protein]\", \"ACP\", \"holo-[acyl-carrier protein]\", \"Acyl-carrier protein\")")
(node 168 "(\"hydroxy fatty acyl-CoA\", \"hydroxy FA-CoA\", \"hydroxy-fatty acyl-CoAs\", \"hydroxy-fatty acyl-coenzyme A\", \"hydroxy-FA-coenzyme A\")")
(node 54 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 169 "(\"fatty acyl-CoA\", \"C22H35N7O17P3SR\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCSC([*])=O\", \"fatty acyl-coenzyme As\", \"fatty acyl-coenzyme A\", \"Fatty acyl CoA\")")
(node 170 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 10 "(\"coenzyme A\", \"COENZYME A\", \"CoA-SH\", \"CoASH\", \"3'-phosphoadenosine-(5')diphospho(4')pantatheine\", \"Coenzyme A\", \"3'-phosphoadenosine 5'-{3-[(3R)-3-hydroxy-2,2-dimethyl-4-oxo-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)butyl] dihydrogen diphosphate}\", \"CoA\", \"C21H36N7O16P3S\", \"[(2R,3S,4R,5R)-5-(6-amino-9H-purin-9-yl)-4-hydroxy-3-(phosphonooxy)tetrahydrofuran-2-yl]methyl (3R)-3-hydroxy-4-({3-oxo-3-[(2-sulfanylethyl)amino]propyl}amino)-2,2-dimethyl-4-oxobutyl dihydrogen diphosphate\", \"Coenzym A\", \"CC(C)(COP(O)(=O)OP(O)(=O)OC[C@H]1O[C@H]([C@H](O)[C@@H]1OP(O)(O)=O)n1cnc2c(N)ncnc12)[C@@H](O)C(=O)NCCC(=O)NCCS\", \"InChIKey=RGJOEKWQDUBAIZ-IBOSZNHHSA-N\", \"Koenzym A\", \"InChI=1S/C21H36N7O16P3S/c1-21(2,16(31)19(32)24-4-3-12(29)23-5-6-48)8-41-47(38,39)44-46(36,37)40-7-11-15(43-45(33,34)35)14(30)20(42-11)28-10-27-13-17(22)25-9-26-18(13)28/h9-11,14-16,20,30-31,48H,3-8H2,1-2H3,(H,23,29)(H,24,32)(H,36,37)(H,38,39)(H2,22,25,26)(H2,33,34,35)/t11-,14-,15-,16+,20-/m1/s1\", \"HSCoA\")")
(node 171 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
(node 57 "(\"ATP\", \"H4atp\", \"adenosine 5'-(tetrahydrogen triphosphate)\", \"C10H16N5O13P3\", \"Adenosine triphosphate\", \"Adenosine 5'-triphosphate\", \"ADENOSINE-5'-TRIPHOSPHATE\", \"ATP\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-N\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/t4-,6-,7-,10-/m1/s1\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OP(O)(O)=O)[C@@H](O)[C@H]1O\")")
(node 172 "(\"hydron\", \"hydrogen(1+)\", \"hydron\", \"H\", \"InChI=1S/p+1\", \"H+\", \"[H+]\", \"InChIKey=GPRLSGONYQIRFK-UHFFFAOYSA-N\", \"H(+)\")")
(node 13 "(\"acyl-[acyl-carrier protein]\", \"acyl-[acyl-carrier protein]\", \"Acyl-[acyl-carrier protein]\", \"C3H4OSR2\", \"Long-chain-acyl-[acyl-carrier protein]\")")
(node 129 "(\"NAD(+)\", \"NAD+\", \"Nadide\", \"Nicotinamide adenine dinucleotide\", \"NC(=O)c1ccc[n+](c1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"Diphosphopyridine nucleotide\", \"adenosine 5'-{3-[1-(3-carbamoylpyridinio)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"NAD\", \"C21H28N7O14P2\", \"InChI=1S/C21H27N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1-4,7-8,10-11,13-16,20-21,29-32H,5-6H2,(H5-,22,23,24,25,33,34,35,36,37)/p+1/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"DPN\", \"InChIKey=BAWFJGJZGIEFAR-NNYOXOHSSA-O\")")
(node 152 "(\"ATP\", \"H4atp\", \"adenosine 5'-(tetrahydrogen triphosphate)\", \"C10H16N5O13P3\", \"Adenosine triphosphate\", \"Adenosine 5'-triphosphate\", \"ADENOSINE-5'-TRIPHOSPHATE\", \"ATP\", \"InChIKey=ZKHQWZAMYRWXGA-KQYNXXCUSA-N\", \"InChI=1S/C10H16N5O13P3/c11-8-5-9(13-2-12-8)15(3-14-5)10-7(17)6(16)4(26-10)1-25-30(21,22)28-31(23,24)27-29(18,19)20/h2-4,6-7,10,16-17H,1H2,(H,21,22)(H,23,24)(H2,11,12,13)(H2,18,19,20)/t4-,6-,7-,10-/m1/s1\", \"Nc1ncnc2n(cnc12)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OP(O)(O)=O)[C@@H](O)[C@H]1O\")")
(node 158 "(\"FAD\", \"FAD\", \"Riboflavin 5'-adenosine diphosphate\", \"InChI=1S/C27H33N9O15P2/c1-10-3-12-13(4-11(10)2)35(24-18(32-12)25(42)34-27(43)33-24)5-14(37)19(39)15(38)6-48-52(44,45)51-53(46,47)49-7-16-20(40)21(41)26(50-16)36-9-31-17-22(28)29-8-30-23(17)36/h3-4,8-9,14-16,19-21,26,37-41H,5-7H2,1-2H3,(H,44,45)(H,46,47)(H2,28,29,30)(H,34,42,43)/t14-,15+,16+,19-,20+,21+,26+/m0/s1\", \"Cc1cc2nc3c(nc(=O)[nH]c3=O)n(C[C@H](O)[C@H](O)[C@H](O)COP(O)(=O)OP(O)(=O)OC[C@H]3O[C@H]([C@H](O)[C@@H]3O)n3cnc4c(N)ncnc34)c2cc1C\", \"adenosine 5'-[3-(riboflavin-5'-yl) dihydrogen diphosphate]\", \"FLAVIN-ADENINE DINUCLEOTIDE\", \"Flavin adenine dinucleotide\", \"Adenosine 5'-(trihydrogen pyrophosphate), 5'-5'-ester with riboflavine\", \"Riboflavin 5'-(trihydrogen diphosphate), 5'-5'-ester with adenosine\", \"adenosine 5'-(3-{D-ribo-5-[7,8-dimethyl-2,4-dioxo-3,4-dihydrobenzo[g]pteridin-10(2H)-yl]-2,3,4-trihydroxypentyl} dihydrogen diphosphate)\", \"C27H33N9O15P2\", \"InChIKey=VWWQXMAJTJZDQX-UYBVJOGSSA-N\")")
(node 159 "(\"FADH2\", \"DIHYDROFLAVINE-ADENINE DINUCLEOTIDE\", \"1,5-dihydro-FAD\", \"adenosine 5'-(3-{D-ribo-5-[7,8-dimethyl-2,4-dioxo-1,3,4,5-tetrahydrobenzo[g]pteridin-10(2H)-yl]-2,3,4-trihydroxypentyl} dihydrogen diphosphate)\", \"FADH2\", \"Cc1cc2Nc3c([nH]c(=O)[nH]c3=O)N(C[C@H](O)[C@H](O)[C@H](O)COP(O)(=O)OP(O)(=O)OC[C@H]3O[C@H]([C@H](O)[C@@H]3O)n3cnc4c(N)ncnc34)c2cc1C\", \"flavin adenine dinucleotide (reduced)\", \"C27H35N9O15P2\", \"InChI=1S/C27H35N9O15P2/c1-10-3-12-13(4-11(10)2)35(24-18(32-12)25(42)34-27(43)33-24)5-14(37)19(39)15(38)6-48-52(44,45)51-53(46,47)49-7-16-20(40)21(41)26(50-16)36-9-31-17-22(28)29-8-30-23(17)36/h3-4,8-9,14-16,19-21,26,32,37-41H,5-7H2,1-2H3,(H,44,45)(H,46,47)(H2,28,29,30)(H2,33,34,42,43)/t14-,15+,16+,19-,20+,21+,26+/m0/s1\", \"InChIKey=YPZRHBJKEMOYQH-UYBVJOGSSA-N\")")
(node 137 "(\"NADH\", \"DPNH\", \"NADH\", \"InChIKey=BOPGDPNILDQYTO-NNYOXOHSSA-N\", \"NC(=O)C1=CN(C=CC1)[C@@H]1O[C@H](COP(O)(=O)OP(O)(=O)OC[C@H]2O[C@H]([C@H](O)[C@@H]2O)n2cnc3c(N)ncnc23)[C@@H](O)[C@H]1O\", \"InChI=1S/C21H29N7O14P2/c22-17-12-19(25-7-24-17)28(8-26-12)21-16(32)14(30)11(41-21)6-39-44(36,37)42-43(34,35)38-5-10-13(29)15(31)20(40-10)27-3-1-2-9(4-27)18(23)33/h1,3-4,7-8,10-11,13-16,20-21,29-32H,2,5-6H2,(H2,23,33)(H,34,35)(H,36,37)(H2,22,24,25)/t10-,11-,13-,14-,15-,16-,20-,21-/m1/s1\", \"1,4-DIHYDRONICOTINAMIDE ADENINE DINUCLEOTIDE\", \"adenosine 5'-{3-[1-(3-carbamoyl-1,4-dihydropyridin-1-yl)-1,4-anhydro-D-ribitol-5-yl] dihydrogen diphosphate}\", \"C21H29N7O14P2\", \"nicotinamide adenine dinucleotide (reduced)\")")
)
(property  101 layout "viewLayout"
(default "(0,0,0)" "()")
(node 158 "(45.0738,3.38919,0)")
(node 159 "(48.7809,7.0963,0)")
(node 160 "(41.8039,10.3662,0)")
(node 161 "(4.699,25.7356,0)")
(node 162 "(47.011,46.312,0)")
(node 163 "(41.8039,41.1049,0)")
(node 164 "(7.7953,3.38919,0)")
(node 165 "(4.0882,7.0963,0)")
(node 166 "(11.0652,10.3662,0)")
(node 167 "(48.1701,25.7356,0)")
(node 168 "(26.4346,47.4711,0)")
(node 169 "(26.4346,4,0)")
(node 170 "(2.5,42.286,0)")
(node 171 "(5.85809,46.312,0)")
(node 172 "(9.88407,49.6701,0)")
(node 173 "(11.0652,41.1049,0)")
)
(property  422 vector<string> "comprises"
(default "()" "()")
(node 46 "(\"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\", \"Acetyl-CoA\")")
(node 48 "(\"\", \"\", \"\", \"\", \"\", \"\")")
(node 51 "(\"Crotonyl-CoA\", \"(2E)-Hexenoyl-CoA\", \"(2E)-Octenoyl-CoA\", \"(2E)-Decenoyl-CoA\", \"(2E)-Dodecenoyl-CoA\", \"(2E)-Tetradecenoyl-CoA\", \"(2E)-Hexadecenoyl-CoA\")")
(node 56 "(\"H2O\", \"H2O\", \"H2O\", \"H2O\", \"H2O\", \"H2O\", \"H2O\")")
(node 36 "(\"(R)-3-Hydroxybutanoyl-CoA\", \"Butyryl-CoA\", \"Hexanoyl-CoA\", \"trans,cis-Lauro-2,6-dienoyl-CoA\", \"Octanoyl-CoA\", \"Decanoyl-CoA\", \"Lauroyl-CoA\", \"Myristoyl-CoA\", \"Palmitoyl-CoA\")")
(node 60 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 37 "(\"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\", \"FAD\")")
(node 61 "(\"Acetoacetyl-CoA\", \"3-Oxohexanoyl-CoA\", \"3-Oxooctanoyl-CoA\", \"3-Oxodecanoyl-CoA\", \"3-Oxododecanoyl-CoA\", \"RCHO\", \"3-Oxotetradecanoyl-CoA\", \"3-Oxopalmitoyl-CoA\")")
(node 62 "(\"NAD\", \"NAD\", \"NAD\", \"NAD\", \"NAD\", \"NAD\", \"NAD\")")
(node 63 "(\"NADH\", \"NADH\", \"NADH\", \"NADH\", \"NADH\", \"NADH\", \"NADH\")")
(node 155 "(\"H+\", \"H+\", \"H+\", \"H+\", \"H+\", \"H+\", \"H+\")")
(node 156 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 19 "(\"cis,cis-3,6-Dodecadienoyl-CoA\", \"(S)-3-Hydroxybutyryl-CoA\", \"(S)-Hydroxyhexanoyl-CoA\", \"(S)-Hydroxyoctanoyl-CoA\", \"(S)-Hydroxydecanoyl-CoA\", \"1-Alcohol\", \"(S)-3-Hydroxydodecanoyl-CoA\", \"(S)-3-Hydroxytetradecanoyl-CoA\", \"(S)-3-Hydroxyhexadecanoyl-CoA\")")
(node 157 "(\"\", \"\")")
(node 43 "(\"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\", \"FADH2\")")
(node 44 "(\"\", \"\", \"\", \"\", \"\", \"\", \"\")")
(node 45 "(\"CoA\", \"CoA\", \"CoA\", \"CoA\", \"CoA\", \"CoA\")")
)
(property  422 vector<color> "multiColor"
(default "()" "()")
(node 0 "((211,211,211,255))")
(node 48 "((211,211,211,255))")
(node 96 "((211,211,211,255))")
(node 97 "((211,211,211,255))")
(node 98 "((211,211,211,255))")
(node 51 "((153,102,204,255))")
(node 52 "((211,211,211,255))")
(node 53 "((211,211,211,255))")
(node 54 "((211,211,211,255))")
(node 7 "((211,211,211,255))")
(node 56 "((211,211,211,255))")
(node 57 "((211,211,211,255))")
(node 10 "((211,211,211,255))")
(node 152 "((211,211,211,255))")
(node 105 "((211,211,211,255))")
(node 58 "((211,211,211,255))")
(node 153 "((211,211,211,255))")
(node 59 "((211,211,211,255))")
(node 154 "((211,211,211,255))")
(node 60 "((211,211,211,255))")
(node 13 "((211,211,211,255))")
(node 155 "((211,211,211,255))")
(node 61 "((153,204,102,255))")
(node 62 "((211,211,211,255))")
(node 156 "((211,211,211,255))")
(node 63 "((211,211,211,255))")
(node 157 "((211,211,211,255))")
(node 19 "((204,102,102,255))")
(node 20 "((211,211,211,255))")
(node 71 "((211,211,211,255))")
(node 25 "((211,211,211,255))")
(node 74 "((211,211,211,255))")
(node 129 "((211,211,211,255))")
(node 36 "((102,204,204,255))")
(node 37 "((211,211,211,255))")
(node 42 "((211,211,211,255))")
(node 137 "((211,211,211,255))")
(node 43 "((211,211,211,255))")
(node 44 "((211,211,211,255))")
(node 45 "((211,211,211,255))")
(node 92 "((211,211,211,255))")
(node 46 "((211,211,211,255))")
)
(property  424 vector<string> "comprises"
(default "()" "()")
)
(property  425 vector<string> "comprises"
(default "()" "()")
)
(property  426 vector<string> "comprises"
(default "()" "()")
)
(property  427 vector<string> "comprises"
(default "()" "()")
)
(property  428 vector<string> "comprises"
(default "()" "()")
)
(property  429 vector<string> "comprises"
(default "()" "()")
)
(property  430 vector<string> "comprises"
(default "()" "()")
)
(property  431 vector<string> "comprises"
(default "()" "()")
)
(property  432 vector<string> "comprises"
(default "()" "()")
)
(property  433 vector<string> "comprises"
(default "()" "()")
)
(property  434 vector<string> "comprises"
(default "()" "()")
)
(property  435 vector<string> "comprises"
(default "()" "()")
)
(property  436 vector<string> "comprises"
(default "()" "()")
)
(property  437 vector<string> "comprises"
(default "()" "()")
)
(property  438 vector<string> "comprises"
(default "()" "()")
)
(property  439 vector<string> "comprises"
(default "()" "()")
)
(graph_attributes 0 
(string "name" "Fatty acid metabolism")
(string "id" "BMID000000083160")
(string "compartments" "default")
(string "file" "/Users/anna/Documents/PhD/magnome/model_generalization/paper/models/ecoli_fa.tlp")
(string "outside_compartments" "")
)
(graph_attributes 7 
(string "name" "Fatty acid metabolism")
)
(graph_attributes 386 
(string "name" "similar reactions")
)
(graph_attributes 387 
(string "name" "rn:R01279")
)
(graph_attributes 388 
(string "name" "rn:R01279")
)
(graph_attributes 389 
(string "name" "rn:R03990")
)
(graph_attributes 390 
(string "name" "rn:R03857")
)
(graph_attributes 391 
(string "name" "rn:R04754")
)
(graph_attributes 392 
(string "name" "rn:R03777")
)
(graph_attributes 393 
(string "name" "rn:R04751")
)
(graph_attributes 394 
(string "name" "rn:R01175")
)
(graph_attributes 395 
(string "name" "rn:R01177")
)
(graph_attributes 396 
(string "name" "rn:R01177")
)
(graph_attributes 397 
(string "name" "rn:R04747")
)
(graph_attributes 398 
(string "name" "rn:R03778")
)
(graph_attributes 399 
(string "name" "rn:R04742")
)
(graph_attributes 400 
(string "name" "rn:R03858")
)
(graph_attributes 401 
(string "name" "rn:R03991")
)
(graph_attributes 402 
(string "name" "rn:R03026")
)
(graph_attributes 403 
(string "name" "rn:R03026")
)
(graph_attributes 404 
(string "name" "rn:R04749")
)
(graph_attributes 405 
(string "name" "rn:R04746")
)
(graph_attributes 406 
(string "name" "rn:R04744")
)
(graph_attributes 407 
(string "name" "rn:R04170")
)
(graph_attributes 408 
(string "name" "rn:R04740")
)
(graph_attributes 409 
(string "name" "rn:R04738")
)
(graph_attributes 410 
(string "name" "rn:R04756")
)
(graph_attributes 411 
(string "name" "rn:R04756")
)
(graph_attributes 412 
(string "name" "rn:R03276")
)
(graph_attributes 413 
(string "name" "rn:R01975")
)
(graph_attributes 414 
(string "name" "rn:R01975")
)
(graph_attributes 415 
(string "name" "rn:R04748")
)
(graph_attributes 416 
(string "name" "rn:R04745")
)
(graph_attributes 417 
(string "name" "rn:R04743")
)
(graph_attributes 418 
(string "name" "rn:R04741")
)
(graph_attributes 419 
(string "name" "rn:R00623")
)
(graph_attributes 420 
(string "name" "rn:R04737")
)
(graph_attributes 421 
(string "name" "Fatty acid metabolism")
)
(graph_attributes 1 
(string "name" "Fatty acid metabolism")
)
(graph_attributes 52 
(string "name" "similar reactions")
)
(graph_attributes 53 
(string "name" "rn:R01177")
)
(graph_attributes 54 
(string "name" "rn:R01177")
)
(graph_attributes 55 
(string "name" "rn:R04747")
)
(graph_attributes 56 
(string "name" "rn:R03778")
)
(graph_attributes 57 
(string "name" "rn:R04742")
)
(graph_attributes 58 
(string "name" "rn:R03858")
)
(graph_attributes 59 
(string "name" "rn:R03991")
)
(graph_attributes 60 
(string "name" "rn:R03026")
)
(graph_attributes 61 
(string "name" "rn:R03026")
)
(graph_attributes 62 
(string "name" "rn:R04749")
)
(graph_attributes 63 
(string "name" "rn:R04746")
)
(graph_attributes 64 
(string "name" "rn:R04744")
)
(graph_attributes 65 
(string "name" "rn:R04170")
)
(graph_attributes 66 
(string "name" "rn:R04740")
)
(graph_attributes 67 
(string "name" "rn:R04738")
)
(graph_attributes 68 
(string "name" "rn:R01975")
)
(graph_attributes 69 
(string "name" "rn:R01975")
)
(graph_attributes 70 
(string "name" "rn:R04748")
)
(graph_attributes 71 
(string "name" "rn:R04745")
)
(graph_attributes 72 
(string "name" "rn:R04743")
)
(graph_attributes 73 
(string "name" "rn:R04741")
)
(graph_attributes 74 
(string "name" "rn:R04737")
)
(graph_attributes 75 
(string "name" "rn:R01279")
)
(graph_attributes 76 
(string "name" "rn:R01279")
)
(graph_attributes 77 
(string "name" "rn:R03990")
)
(graph_attributes 78 
(string "name" "rn:R03857")
)
(graph_attributes 79 
(string "name" "rn:R04754")
)
(graph_attributes 80 
(string "name" "rn:R03777")
)
(graph_attributes 81 
(string "name" "rn:R04751")
)
(graph_attributes 82 
(string "name" "rn:R01175")
)
(graph_attributes 83 
(string "name" "Fatty acid metabolism")
)
(graph_attributes 84 
(string "name" "Fatty acid metabolism quotient")
(string "file" "/Users/anna/Documents/PhD/magnome/model_generalization/paper/models/ecoli_fa.tlp")
)
(graph_attributes 101 
(string "name" "unnamed")
)
(graph_attributes 85 
(string "name" "grp_00085")
)
(graph_attributes 86 
(string "name" "grp_00086")
)
(graph_attributes 87 
(string "name" "grp_00087")
)
(graph_attributes 88 
(string "name" "grp_00088")
)
(graph_attributes 89 
(string "name" "grp_00089")
)
(graph_attributes 90 
(string "name" "grp_00090")
)
(graph_attributes 91 
(string "name" "grp_00091")
)
(graph_attributes 92 
(string "name" "grp_00092")
)
(graph_attributes 93 
(string "name" "grp_00093")
)
(graph_attributes 94 
(string "name" "grp_00094")
)
(graph_attributes 95 
(string "name" "grp_00095")
)
(graph_attributes 96 
(string "name" "grp_00096")
)
(graph_attributes 97 
(string "name" "grp_00097")
)
(graph_attributes 98 
(string "name" "grp_00098")
)
(graph_attributes 99 
(string "name" "grp_00099")
)
(graph_attributes 100 
(string "name" "grp_00100")
)
(graph_attributes 422 
(string "name" "Fatty acid metabolism quotient")
(string "file" "/Users/anna/Desktop/models/ecoli_fa.tlp")
)
(graph_attributes 423 
(string "name" "grp_00423")
)
(graph_attributes 424 
(string "name" "grp_00424")
)
(graph_attributes 425 
(string "name" "grp_00425")
)
(graph_attributes 426 
(string "name" "grp_00426")
)
(graph_attributes 427 
(string "name" "grp_00427")
)
(graph_attributes 428 
(string "name" "grp_00428")
)
(graph_attributes 429 
(string "name" "grp_00429")
)
(graph_attributes 430 
(string "name" "grp_00430")
)
(graph_attributes 431 
(string "name" "grp_00431")
)
(graph_attributes 432 
(string "name" "grp_00432")
)
(graph_attributes 433 
(string "name" "grp_00433")
)
(graph_attributes 434 
(string "name" "grp_00434")
)
(graph_attributes 435 
(string "name" "grp_00435")
)
(graph_attributes 436 
(string "name" "grp_00436")
)
(graph_attributes 437 
(string "name" "grp_00437")
)
(graph_attributes 438 
(string "name" "grp_00438")
)
(graph_attributes 439 
(string "name" "grp_00439")
)
(controller 
(DataSet "Tulip Classic" 
(DataSet "views" 
(DataSet "view0" 
(DataSet "Node Link Diagram view" 
(DataSet "data" 
(DataSet "Display" 
(bool "antialiased" true)
(bool "arrow" true)
(bool "displayNodes" true)
(bool "displayEdges" true)
(bool "displayMetaNodes" true)
(bool "nodeLabel" true)
(bool "edgeLabel" false)
(bool "metaLabel" false)
(bool "outScreenLabel" false)
(bool "elementOrdered" false)
(bool "elementZOrdered" false)
(bool "edgeColorInterpolation" true)
(bool "edgeSizeInterpolation" false)
(bool "edge3D" false)
(bool "labelScaled" true)
(int "labelMinSize" 10)
(int "labelMaxSize" 30)
(int "selectedNodesStencil" 2)
(int "selectedMetaNodesStencil" 2)
(int "selectedEdgesStencil" 2)
(int "nodesStencil" 65535)
(int "metaNodesStencil" 65535)
(int "edgesStencil" 65535)
(int "nodesLabelStencil" 65535)
(int "metaNodesLabelStencil" 65535)
(int "edgesLabelStencil" 65535)
(bool "edgesMaxSizeToNodesSize" true)
(color "selectionColor" "(255,0,255,255)")
(int "labelsDensity" 100)
(bool "labelsAreBillboarded" false)
(bool "polylines3DAreBicolored" false)
)
(string "scene" "<?xml version=\"1.0\"?>
<scene>
  <data>
    <viewport>(0,0,715,1032)</viewport>
    <background>(255,255,255,255)</background>
  </data>
  <children>
    <GlLayer name=\"Background\">
      <data>
        <camera>
          <data>
            <center>(-38.4287,27.686,0)</center>
            <eyes>(-38.4287,27.686,444.643)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>444.643</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(-260.75,-20.5,-1.5)</sceneBoundingBox0>
            <sceneBoundingBox1>(183.893,75.872,1.5)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>0</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"background\" type=\"Gl2DRect\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
              <top>0</top>
              <bottom>1</bottom>
              <left>0</left>
              <right>1</right>
              <inPercent>1</inPercent>
              <textureName>TulipBitmapDir/tex_back.png</textureName>
              <xInv>0</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Main\">
      <data>
        <camera>
          <data>
            <center>(20.3677,22.4373,0)</center>
            <eyes>(20.3677,22.4373,444.643)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>6.11591</zoomFactor>
            <sceneRadius>444.643</sceneRadius>
            <d3>1</d3>
            <sceneBoundingBox0>(-262.25,-24.3247,0)</sceneBoundingBox0>
            <sceneBoundingBox1>(184.393,77.372,444.643)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"Hulls\" type=\"GlComposite\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
            </data>
            <children/>
          </GlEntity>
          <GlEntity name=\"graph\" type=\"GlGraphComposite\">
            <data>
              <visible>1</visible>
              <stencil>65535</stencil>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
    <GlLayer name=\"Foreground\">
      <data>
        <camera>
          <data>
            <center>(-38.4287,27.686,0)</center>
            <eyes>(-38.4287,27.686,444.643)</eyes>
            <up>(0,1,0)</up>
            <zoomFactor>1</zoomFactor>
            <sceneRadius>444.643</sceneRadius>
            <d3>0</d3>
            <sceneBoundingBox0>(-262.25,-24.3247,0)</sceneBoundingBox0>
            <sceneBoundingBox1>(184.393,77.372,444.643)</sceneBoundingBox1>
          </data>
        </camera>
        <visible>1</visible>
      </data>
      <children type=\"GlComposite\">
        <data/>
        <children>
          <GlEntity name=\"labrilogo\" type=\"Gl2DRect\">
            <data>
              <visible>0</visible>
              <stencil>65535</stencil>
              <top>55</top>
              <bottom>5</bottom>
              <left>5</left>
              <right>55</right>
              <inPercent>0</inPercent>
              <textureName>TulipBitmapDir/logolabri.jpg</textureName>
              <xInv>1</xInv>
              <yInv>0</yInv>
            </data>
          </GlEntity>
        </children>
      </children>
    </GlLayer>
  </children>
</scene>
")
)
)
(uint "id" 84)
(int "x" 0)
(int "y" 0)
(int "width" 717)
(int "height" 1059)
(bool "maximized" false)
)
(DataSet "view1" 
(DataSet "Python Script view" 
(string "script code" "from tulip import *
import colorsys
import ontology
import os

dir = os.path.dirname(ontology.__file__)
onto = ontology.parse(\"{0}/chebi.obo\".format(dir))
grey = tlp.Color(211, 211, 211)
key2color = {'chebi:13633': tlp.Color(102,183,204,255), 'chebi:13633_chebi:39418': tlp.Color(183,102,204,255), 'chebi:13633_chebi:23589': tlp.Color(142,204,102,255), 'beilstein:10046330_beilstein:10046330_beilstein:3587191_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:13633_chebi:29375': tlp.Color(102,183,204,255), 'beilstein:10046330_beilstein:10046330_beilstein:3587191_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:23589_chebi:29375': tlp.Color(102,204,183,255), 'chebi:23589': tlp.Color(102,142,204,255), 'beilstein:10046330_beilstein:10046330_beilstein:10411862_beilstein:3587191_beilstein:3645734_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:13633_chebi:29375': tlp.Color(102,204,102,255), 'chebi:39418': tlp.Color(102,160,204,255), 'chebi:59202': tlp.Color(131,204,102,255), 'beilstein:10046330_chebi:10744_chebi:13633_chebi:29375_chebi:39418': tlp.Color(183,102,204,255), 'beilstein:10046330_beilstein:10046330_beilstein:3587191_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:13633_chebi:13633_chebi:29375': tlp.Color(204,142,102,255), 'beilstein:10046330_beilstein:10046330_chebi:11868_chebi:13633': tlp.Color(204,102,183,255), 'beilstein:10046330_beilstein:185088_beilstein:3581767_beilstein:54612_chebi:23589_chebi:59202': tlp.Color(102,204,142,255), 'beilstein:10046330_beilstein:185088_beilstein:3581767_beilstein:54612_chebi:13633_chebi:39418': tlp.Color(102,102,204,255), 'chebi:13633_chebi:13633': tlp.Color(204,142,102,255), 'chebi:23589_chebi:29375_chebi:61902': tlp.Color(142,102,204,255), 'beilstein:3587191_chebi:10745_chebi:13633_chebi:23589': tlp.Color(142,204,102,255), 'chebi:23589_chebi:59202': tlp.Color(102,204,142,255), 'chebi:11868_chebi:61902': tlp.Color(204,102,142,255), 'beilstein:10046330_beilstein:10046330_beilstein:10411862_beilstein:3587191_beilstein:3645734_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:23589_chebi:29375': tlp.Color(102,142,204,255), 'chebi:11868': tlp.Color(204,102,189,255), 'chebi:61902': tlp.Color(102,204,160,255), 'beilstein:3865990_beilstein:3869564_chebi:10744_chebi:11868_chebi:61902': tlp.Color(204,102,142,255), 'chebi:23589_chebi:61902': tlp.Color(142,102,204,255), 'chebi:11868_chebi:13633': tlp.Color(204,102,183,255)}

def main(graph):
#	getKey2Color(graph)
#	color(graph)
	appColor(graph)
#	defColor(graph)
	
def defColor(graph):
	viewColor =  graph.getColorProperty(\"viewColor\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	viewColor.setAllNodeValue(grey)
	viewColor.setAllEdgeValue(grey)
	multiColor.setAllNodeValue([grey])
	multiColor.setAllEdgeValue([grey])
	
def appColor(graph):
	viewColor =  graph.getColorProperty(\"viewColor\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
#	defColor(graph)
	
	reaction =  graph.getBooleanProperty(\"reaction\")
	
	for n in graph.getNodes():
		keys = getKeys(n, graph)
		if not keys: continue
		for key in keys:
			if key2color.has_key(key): 
				if reaction[n]:
					for e in graph.getInOutEdges(n):
						viewColor[e] =	key2color[key]
				viewColor[n] = key2color[key]
				multiColor[n] = [viewColor[n]]
				break
		
def getKey2Color(graph):
	viewColor =  graph.getColorProperty(\"viewColor\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	
	key2color = {}
	for n in graph.getNodes():
		if ubiquitous[n]: continue
		for k in getKeys(n, graph):
			key2color[k] = viewColor[n]
	
	print key2color
					
def getKeys(n, graph):
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	name =  graph.getStringProperty(\"name\")	
	reaction =  graph.getBooleanProperty(\"reaction\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	
	if reaction[n]:
		ks, extras = [], []
		transform = lambda nds: \"_\".join(sorted([getKeys(it, graph)[0] for it in nds]))
		return [transform(graph.getInOutNodes(n)),\\
		transform(filter(lambda nd: not ubiquitous[nd], graph.getInOutNodes(n)))]
							
#		if ecNumber[n]: return [ecNumber[n]]
#		return [ancestor[n]] if ancestor[n] else [name[n]]
	else:
		keys = ancestor_chebi_id[n]
		if not keys: keys = chebi_id[n]
		the_key = name[n]
		for k in sorted(keys):
			t = onto.getTerm(k)
			if t: 
				the_key = getPrimaryId(t, onto)
				break
			else:
				the_key = k		
		return [the_key]
		
def getPrimaryId(term, onto):
	ids = set(term.getAllIds())
	for it in onto.getEqualTerms(term):
		ids |= it.getAllIds()
	return sorted(ids)[0] 
	
		
def color(graph): 
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	
	defColor(graph)
	
	chebi2color = dict(\\
	_color(graph, filter(lambda n: not (reaction[n] or ubiquitous[n]), graph.getNodes())).items()\\
	+ _color(graph, filter(lambda n: reaction[n], graph.getNodes())).items()\\
	)	
							
	print chebi2color
	
def _color(graph, ns):
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	
	i = 0
	key2color = {}
	for n in ns:
		keys = getKeys(n, graph)
		if not keys: continue
		color = None
		for k in keys:
			if key2color.has_key(k): 
				color = key2color[k]
				break
		if not color:
			color = i
			i += 1
		for k in keys:
			key2color[k] = color		
	
	colors = [colorsys.hsv_to_rgb(x * 1.0 / i, 0.5, 0.8) for x in range(i)]
	colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
	i2color = dict(zip(range(i), colors))
	
	for n in ns:
		keys = getKeys(n, graph)
		if not keys: continue
		key = keys[0]
		color = i2color[key2color[key]]
		multiColor[n] = [color]
		viewColor[n] = color
	
	return {key:i2color[key2color[key]] for key in key2color.keys()}
")
(DataSet "main_scripts" 
(string "main_script0" "/Users/anna/Documents/PhD/tulip/src/python/new_pipeline.py")
(string "main_script_src0" "from tulip import *
from filter_root import filter_graph
from metabolic_widgets import SpeciesTypeSelectionDialog
from extract_chebi import saveOnto, getOnto
from ontology import save
from shorten_names import shorten
from generalize import generalize
from graph_tools import findSubGraphByName
import sys
import os

def generalizeComps(graph):
	root = graph.getRoot()
	comps = findSubGraphByName(root, \"compartment drawings\")
	pregen(root)
	cNames = set(root.getAttribute(\"compartments\").split(\";\"))
	for comp_name in cNames:
		if not comp_name: continue
		if comp_name.lower() == \"cytoplasm\" or comp_name.lower() == \"cylosol\": continue
		comp = findSubGraphByName(comps, comp_name)
		if not comp or not len(list(comp.getNodes())): continue
		generalizeComp(comp)
	
def pregen(comp):	
	dataSet = tlp.getDefaultPluginParameters(\"ChebiAnnotator\", comp)
	tlp.applyAlgorithm(comp, dataSet, \"ChebiAnnotator\")
	runGraphScript(\"update_chebi_id_values.py\", comp)
	mark_ubiquitous_species(comp)
	
def generalizeComp(comp):
	gr = generalize(comp)
	if not gr: return
#	runGraphScript(\"build_compartments_hierarchy.py\", gr)
#	gc = findSubGraphByName(gr, comp.getName())
#	if not gc: return
##		runGraphScript(\"shorten_names.py\", gc)
#	runGraphScript(\"draw_compartment.py\", gr)	
			
def buildAndDraw(graph):
	root = graph.getRoot()
	runGraphScript(\"draw_arrows.py\", root)
	dataSet = tlp.getDefaultPluginParameters(\"ChebiAnnotator\", root)
	tlp.applyAlgorithm(root, dataSet, \"ChebiAnnotator\")
	runGraphScript(\"build_compartments_hierarchy.py\", root)

	cNames = set(root.getAttribute(\"compartments\").split(\";\"))
	for comp_name in cNames:
		if not comp_name: continue
		if comp_name.lower() == \"cytoplasm\" or comp_name.lower() == \"cylosol\": continue
		comp = findSubGraphByName(root, comp_name)
		if not comp or not len(list(comp.getNodes())): continue
		subs = list(comp.getSubGraphs())
		if subs:
			names = {sub.getName() for sub in subs}
			if names & cNames: continue
			else: 
				comp = subs[0]
				comp_name = comp.getName()
		runGraphScript(\"draw_compartment.py\", comp)
		cd = findSubGraphByName(root, \"compartment drawings\")
		if not cd: continue
		comp = findSubGraphByName(cd, comp_name)
		if not comp: continue
		print comp_name
		qo = findSubGraphByName(comp, \"quotient opened\")
		if not qo: continue
		filter_graph(comp, qo)
		
def main(graph):
#	buildAndDraw(graph)
#	build(graph)
#	runGraphScript(\"draw_compartment.py\", graph)
	generalizeComp(graph)
	
def build(graph):
	runGraphScript(\"draw_arrows.py\", graph)
	dataSet = tlp.getDefaultPluginParameters(\"ChebiAnnotator\", graph)
	tlp.applyAlgorithm(graph, dataSet, \"ChebiAnnotator\")
	runGraphScript(\"build_compartments_hierarchy.py\", graph)

def mark_ubiquitous_species(root):
	ub = root.getBooleanProperty(\"ubiquitous\")
	speciesTypeSelDialog = SpeciesTypeSelectionDialog(root, title=\"Select ubiquitous species\",\\
	condition=\"Mark ubiquitous those with degree greater than: \", left_label=\"Specific species:\",\\
	right_label=\"Ubiquitous species:\")
	speciesTypeSelDialog.exec_()
	ub_sps = speciesTypeSelDialog.getSpeciesTypesToDuplicate()
#	print ub_sps
	for n in root.getNodes():
		if root[\"speciesType\"][n] in ub_sps:
			ub[n] = True
")
(string "main_script1" "/Users/anna/Documents/PhD/tulip/src/python/modules/shorten_names.py")
(string "main_script_src1" "from tulip import *
import ontology
import os

def main(graph): 
	dir = os.path.dirname(ontology.__file__)
	onto = ontology.parse(\"{0}/chebi.obo\".format(dir))
	shorten(graph, onto)

def shorten(graph, onto):	
	chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
	name = graph.getStringProperty(\"name\")
	viewLabel = graph.getStringProperty(\"viewLabel\")
	synonyms = graph.getStringVectorProperty(\"synonyms\")
	
	for n in graph.getNodes():
		if graph[\"reaction\"][n] and graph[\"ecNumber\"][n]:
			graph[\"viewLabel\"][n] = graph[\"ecNumber\"][n]
			continue
		short_name = graph[\"name\"][n]
		if short_name.find(\"[\") != -1: short_name = short_name[:short_name.find(\"[\")]
		ch_id = chebi_id[n]
		if ch_id:
			term = onto.getTerm(ch_id[0])
			if term:
				alts = [term.getName()]
				alts.extend(term.getSynonyms())
				synonyms[n] = alts
				if not short_name: short_name = term.getName()
				for alt in alts:
					if len(alt) < len(short_name):
						short_name = alt
		start, end = short_name.find(\"(\"), short_name.find(\")\")
		if start != -1 and end != -1 and end - start > 5:
			short_name = short_name[:start] + (short_name[end + 1:] if end < len(short_name) else \"\")
		parts = short_name.replace(\"generalized \", \"\").strip().replace(\"(\", \" (\").replace(\"  \", \" \").replace(\"-\", \"- \").replace(\" )\", \")\").split(\" \")
		new_parts = []
		prefix = \"\"
		max_ = max(len(short_name) / 4, 7)
		if parts:
			for part in parts:
				prefix, ps = treat(prefix, part, max_)
				new_parts += ps
			if prefix: new_parts.append(prefix)
		graph[\"viewLabel\"][n] = \"\\n\".join(new_parts)
		
def treat(prefix, part, max_):
	if len(prefix + part) <= 4: return prefix + part, []
	border = max_ - len(prefix)
	if len(prefix + part) <= max_ or len(part[border:]) == 1 : return \"\", [prefix + part]
	if len(prefix) <= 4:
		if prefix and not prefix.endswith(\"-\"): prefix += \" \"
		return part[border:], [prefix + part[:border] + \"-\"]
	p, ps = treat(\"\", part, max_)
	return p, [prefix] + ps

")
(string "main_script2" "/Users/anna/Documents/PhD/tulip/src/python/modules/generalize.py")
(string "main_script_src2" "from tulip import *
from extract_chebi import getOnto
from vertical_merge import markSimilarReactions, getReactions2Factor, alignToVKey
from reaction_clusters_2_metanodes import factor

def getN2term(graph, onto):
	n2term = {}	
	chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
	for n in graph.getNodes():		
		if graph[\"reaction\"][n] or graph[\"ubiquitous\"][n]: continue
		chebi_id_values = chebi_id[n]
		for chebi_id_value in chebi_id_values:
			term = onto.getTerm(chebi_id_value)
			if term: 
				n2term[n] = term
				break
	return n2term

def add2map(m, key, value):
	if m.has_key(key): m[key].add(value)
	else: m[key] = {value}
	
def getReaction2cluster(graph, n2clu):
	rs_clusters = getReactions2Factor(graph, n2clu)	
	r2clu, i = {}, 0
	for rs in rs_clusters:
		for r in rs: r2clu[r] = i
		i += 1
	return r2clu
	
def markAncestors(graph, n2term, term2clu):
	anc = graph.getStringProperty(\"ancestor\")
	anc_id = graph.getStringVectorProperty(\"ancestor_chebi_id\")	
	for n, term in n2term.iteritems():
		if not term2clu.has_key(term): continue
		(name, idd) = term2clu[term]
		anc[n] = name
		anc_id[n] = idd

def maximize(graph, term2clu, n2term):
	n2clu, clu2nodes = {}, {}
	for n, term in n2term.iteritems():
		if term2clu.has_key(term):
			clu = term2clu[term]
			n2clu[n] = clu
			add2map(clu2nodes, clu, n)
			
	r2clu = getReaction2cluster(graph, n2clu)
	alignToVKey(graph, n2clu)
	
	for (clu, nodes) in clu2nodes.iteritems():
		if len(nodes) <=1: continue
		neighbours2terms = {}
		for node in nodes:
			# reactions this species participated in			
			neighbours = set()
			for nn in getClones(graph, node):
				neighbours |= {(\"in\", r2clu[r]) for r in graph.getInNodes(nn)}
				neighbours |= {(\"out\", r2clu[r]) for r in graph.getOutNodes(nn)}
			key = tuple(sorted(neighbours))
			add2map(neighbours2terms, key, n2term[node])		
		cha = True
		lst = neighbours2terms.iteritems()
		new_lst = []
		for neighbours, terms in lst:
			neighbours = set(neighbours)
			to_remove = []
			for (new_neighbours, new_terms) in new_lst:
				if neighbours & new_neighbours:
					neighbours |= new_neighbours
					terms |= new_terms
					to_remove.append((new_neighbours, new_terms))
			new_lst = filter(lambda it: not it in to_remove, new_lst)
			new_lst.append((neighbours, terms))
		if len(new_lst) > 1:
			i = 0
			for neighbours, terms in new_lst:
				n_clu = clu + (i,)
				i += 1
				for t in terms: term2clu[t] = n_clu
	return term2clu

def getClu2term(term2clusters):
	clu2term = {}
	for term, clu in term2clusters.iteritems():
		add2map(clu2term, clu, term)
	return clu2term
	
def computeEq0(interesting_terms):
	return {term: (0,) for term in interesting_terms}

def getReactions(graph, node):
	rs = set()
	for nn in getClones(graph, node):
		rs |= set(graph.getInOutNodes(nn))
	return rs

def getConflicts(graph, terms, term2n, n2term):
	nodes = {term2n[t] for t in terms}
	r2ns = {}
	for n in nodes:
		for r in getReactions(graph, n):
			add2map(r2ns, r, n)
	confs = filter(lambda ns: len(ns) > 1, r2ns.values())
	return [{n2term[n] for n in ns} for ns in confs]

def fixStoich(graph, term2clu, n2term, onto):
	clu2terms = getClu2term(term2clu)
	term2n = {t:n for (n,t) in n2term.iteritems()}
	for clu, terms in clu2terms.iteritems():
		if len(terms) <= 1: continue
		conflicts = getConflicts(graph, terms, term2n, n2term)
		if not conflicts: continue
		print [t.getName() for t in terms]
		print \" >> \", [{n.getName() for n in ns} for ns in conflicts]
		t_sets = partition(terms, onto, conflicts)
		i = 0
		for ts in t_sets:
			print \"---> \", [t.getName() for t in ts]
			i += 1
			n_clu = clu + (i,)
			for t in ts: term2clu[t] = n_clu
	return term2clu

def partition(terms, onto, conflicts):
	Ts = onto.commonPts(terms, includingChildren=False)
	if not Ts: Ts = onto.getRoots()
	
	print [t.getName() for t in Ts]
	
	def good(t_set, conflicts):
		if not t_set: return False
		if len(t_set) <= 1: return True
		good = True
		for c_ts in conflicts:
			if len(t_set & c_ts) > 1:
				good = False
				break 
		return good
		
	psi = set()
	for T in Ts:
		options = {T}
		options |= onto.getAnyChildren(T, direct=False, checked=set())
		for t in options:
			t_set = (onto.getAnyChildren(t, direct=False, checked=set()) | {t}) & terms
			if len(t_set) <= 1: continue
			psi.add(tuple(sorted(t_set)))
			
			compl_set = terms - t_set
			if len(compl_set) <= 1: continue
			psi.add(tuple(sorted(compl_set)))
	
#	print len(psi)
	if len(psi) > 50:	
		psi = {tuple(t) for t in filter(lambda s: good(s, conflicts), [set(it) for it in psi])}
	
	for t in terms:
		psi.add((t,))
		
	to_add = set()
	ps = list(psi)
	i = 0
	for s in psi:
		i += 1
		for ss in ps[i:]:
			sss = tuple(sorted(set(s) - set(ss)))
			if sss and not sss in psi: 
				to_add.add(sss)
			sss = tuple(sorted(set(ss) - set(s)))
			if sss and not sss in psi: 
				to_add.add(sss)
	psi |= to_add		
			
	psi = filter(lambda s: good(s, conflicts), [set(it) for it in psi])
		
#	print \"PARTS: \"
#	for it in sorted(psi, key=lambda s: -len(s)):
#		print \"  \", [t.getName() for t in it]
	parts = list(reversed(greedy(terms, psi)))
	i = 1
	for part in parts:
		for o_part in parts[i:]: 
			if o_part & part: 
				part -= o_part
		i += 1
	return parts
	
def greedy(terms, psi):
	phi = []
	while terms and psi:
		s = max(psi, key=lambda it: len(it & terms))
		phi.append(s)
		terms -= s
		psi.remove(s)
	return phi	
	
def cluster2term(terms, onto):
	return onto.commonPts(terms, includingChildren=False).pop()
	
def computeRepresentatives(term2clu, clu2term, onto):
	clu2t, t2clu = {}, {}
	for clu, terms in clu2term.iteritems():
		T = cluster2term(terms, onto)
		clu2t[clu] = T	
		add2map(t2clu, T, clu)
	Ts = list(t2clu.keys())
	i = 0
	tr = lambda it: onto.getAnyChildren(it, False, set()) | onto.getEqualTerms(it, None, 0, set())
	t2not = {}	
	for t in Ts:
		kids = tr(t)
		i += 1
		for o_t in Ts[i:]:
			if tr(o_t) & kids:
				if o_t in kids:
					add2map(t2not, t, o_t)
				else:
					add2map(t2not, o_t, t)
	for clu, terms in clu2term.iteritems():
		T = clu2t[clu]
		name = T.getName()
		if t2not.has_key(T):
			name = name + \", but not \" + \", nor \".join([t.getName() for t in t2not[T]])
		for t in terms:
			term2clu[t] = (name, list(T.getAllIds()))
	return term2clu

def filterClu2Terms(term2clu):
	clu2term = getClu2term(term2clu)
	for clu, terms in clu2term.iteritems():
		if len(terms) <=1 : del term2clu[terms.pop()]
	
def printClus(term2clu):
	clu2term = getClu2term(term2clu)
	for clu, terms in clu2term.iteritems():
		print clu, \" \", [it.getName() for it in terms]
		print
	
def fixIncompartibilities(graph, onto, n2term, interesting_terms):	
	term2n = {t:n for (n,t) in n2term.iteritems()}
	print \"---eq-0---\"
	term2clu = computeEq0(interesting_terms)	
	print \"---maximize---\"
	term2clu = maximize(graph, term2clu, n2term)
	printClus(term2clu)
	filterClu2Terms(term2clu)
	print \"---stoich---\"
	term2clu = fixStoich(graph, term2clu, n2term, onto)
	printClus(term2clu)
	filterClu2Terms(term2clu)
	print \"---maximize---\"
	term2clu = maximize(graph, term2clu, n2term)
	printClus(term2clu)
	filterClu2Terms(term2clu)
	term2clu = computeRepresentatives(term2clu, getClu2term(term2clu), onto)
	return term2clu

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())			
	
def generalize(graph):
	onto = getOnto(graph)
	n2term = getN2term(graph, onto)
	interesting_terms = set(n2term.values())
	term2clu = fixIncompartibilities(graph, onto, n2term, interesting_terms)
	if not term2clu: return None

	clone = graph.addCloneSubGraph(graph.getName())
	markAncestors(clone, n2term, term2clu)
	markSimilarReactions(clone)
	
	factor(clone)
	grr = None
	for sub in clone.getSubGraphs():
		if ((clone.getName() + \" quotient\") == sub.getName()):
			grr = sub
	print \"-------------------------\\n\"
#	try:
#		dataSet = tlp.getDefaultPluginParameters(\"ChebiColorer\", grr)
#		tlp.applyAlgorithm(grr, dataSet, \"ChebiColorer\")	
#	except Exception: 
#  		pass
	return grr

def cluclu(graph):
	onto = getOnto(graph)
	n2term = getN2term(graph, onto)
	interesting_terms = set(n2term.values())
	term2clu = fixIncompartibilities(graph, onto, n2term, interesting_terms)
	
	n2clu = {}
	for n, term in n2term.iteritems():
		if term2clu.has_key(term):
			(name, idd) = term2clu[term]
			n2clu[n] = name
			
	rs_clusters = getReactions2Factor(graph, n2clu)
	rclu = []
	for rs in rs_clusters:
		if len(rs) <= 1: continue
		r = rs.pop()
		ins, outs = list(graph.getInNodes(r)), list(graph.getOutNodes(r))
		rclu.append((r, ins, outs))
	return n2clu, rclu
")
(string "main_script3" "/Users/anna/Documents/PhD/tulip/src/python/modules/color.py")
(string "main_script_src3" "from tulip import *
import colorsys
import ontology
import os

dir = os.path.dirname(ontology.__file__)
onto = ontology.parse(\"{0}/chebi.obo\".format(dir))
grey = tlp.Color(211, 211, 211)
key2color = {'chebi:13633': tlp.Color(102,183,204,255), 'chebi:13633_chebi:39418': tlp.Color(183,102,204,255), 'chebi:13633_chebi:23589': tlp.Color(142,204,102,255), 'beilstein:10046330_beilstein:10046330_beilstein:3587191_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:13633_chebi:29375': tlp.Color(102,183,204,255), 'beilstein:10046330_beilstein:10046330_beilstein:3587191_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:23589_chebi:29375': tlp.Color(102,204,183,255), 'chebi:23589': tlp.Color(102,142,204,255), 'beilstein:10046330_beilstein:10046330_beilstein:10411862_beilstein:3587191_beilstein:3645734_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:13633_chebi:29375': tlp.Color(102,204,102,255), 'chebi:39418': tlp.Color(102,160,204,255), 'chebi:59202': tlp.Color(131,204,102,255), 'beilstein:10046330_chebi:10744_chebi:13633_chebi:29375_chebi:39418': tlp.Color(183,102,204,255), 'beilstein:10046330_beilstein:10046330_beilstein:3587191_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:13633_chebi:13633_chebi:29375': tlp.Color(204,142,102,255), 'beilstein:10046330_beilstein:10046330_chebi:11868_chebi:13633': tlp.Color(204,102,183,255), 'beilstein:10046330_beilstein:185088_beilstein:3581767_beilstein:54612_chebi:23589_chebi:59202': tlp.Color(102,204,142,255), 'beilstein:10046330_beilstein:185088_beilstein:3581767_beilstein:54612_chebi:13633_chebi:39418': tlp.Color(102,102,204,255), 'chebi:13633_chebi:13633': tlp.Color(204,142,102,255), 'chebi:23589_chebi:29375_chebi:61902': tlp.Color(142,102,204,255), 'beilstein:3587191_chebi:10745_chebi:13633_chebi:23589': tlp.Color(142,204,102,255), 'chebi:23589_chebi:59202': tlp.Color(102,204,142,255), 'chebi:11868_chebi:61902': tlp.Color(204,102,142,255), 'beilstein:10046330_beilstein:10046330_beilstein:10411862_beilstein:3587191_beilstein:3645734_beilstein:3865990_beilstein:3869564_chebi:10744_chebi:10745_chebi:23589_chebi:29375': tlp.Color(102,142,204,255), 'chebi:11868': tlp.Color(204,102,189,255), 'chebi:61902': tlp.Color(102,204,160,255), 'beilstein:3865990_beilstein:3869564_chebi:10744_chebi:11868_chebi:61902': tlp.Color(204,102,142,255), 'chebi:23589_chebi:61902': tlp.Color(142,102,204,255), 'chebi:11868_chebi:13633': tlp.Color(204,102,183,255)}

def main(graph):
#	getKey2Color(graph)
#	color(graph)
	appColor(graph)
#	defColor(graph)
	
def defColor(graph):
	viewColor =  graph.getColorProperty(\"viewColor\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	viewColor.setAllNodeValue(grey)
	viewColor.setAllEdgeValue(grey)
	multiColor.setAllNodeValue([grey])
	multiColor.setAllEdgeValue([grey])
	
def appColor(graph):
	viewColor =  graph.getColorProperty(\"viewColor\")
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
#	defColor(graph)
	
	reaction =  graph.getBooleanProperty(\"reaction\")
	
	for n in graph.getNodes():
		keys = getKeys(n, graph)
		if not keys: continue
		for key in keys:
			if key2color.has_key(key): 
				if reaction[n]:
					for e in graph.getInOutEdges(n):
						viewColor[e] =	key2color[key]
				viewColor[n] = key2color[key]
				multiColor[n] = [viewColor[n]]
				break
		
def getKey2Color(graph):
	viewColor =  graph.getColorProperty(\"viewColor\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	
	key2color = {}
	for n in graph.getNodes():
		if ubiquitous[n]: continue
		for k in getKeys(n, graph):
			key2color[k] = viewColor[n]
	
	print key2color
					
def getKeys(n, graph):
	ancestor =  graph.getStringProperty(\"ancestor\")
	ancestor_chebi_id =  graph.getStringVectorProperty(\"ancestor_chebi_id\")
	chebi_id =  graph.getStringVectorProperty(\"chebi_id\")
	name =  graph.getStringProperty(\"name\")	
	reaction =  graph.getBooleanProperty(\"reaction\")
	ecNumber =  graph.getStringProperty(\"ecNumber\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	
	if reaction[n]:
		ks, extras = [], []
		transform = lambda nds: \"_\".join(sorted([getKeys(it, graph)[0] for it in nds]))
		return [transform(graph.getInOutNodes(n)),\\
		transform(filter(lambda nd: not ubiquitous[nd], graph.getInOutNodes(n)))]
							
#		if ecNumber[n]: return [ecNumber[n]]
#		return [ancestor[n]] if ancestor[n] else [name[n]]
	else:
		keys = ancestor_chebi_id[n]
		if not keys: keys = chebi_id[n]
		the_key = name[n]
		for k in sorted(keys):
			t = onto.getTerm(k)
			if t: 
				the_key = getPrimaryId(t, onto)
				break
			else:
				the_key = k		
		return [the_key]
		
def getPrimaryId(term, onto):
	ids = set(term.getAllIds())
	for it in onto.getEqualTerms(term):
		ids |= it.getAllIds()
	return sorted(ids)[0] 
	
		
def color(graph): 
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	reaction =  graph.getBooleanProperty(\"reaction\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	
	defColor(graph)
	
	chebi2color = dict(\\
	_color(graph, filter(lambda n: not (reaction[n] or ubiquitous[n]), graph.getNodes())).items()\\
	+ _color(graph, filter(lambda n: reaction[n], graph.getNodes())).items()\\
	)	
							
	print chebi2color
	
def _color(graph, ns):
	multiColor =  graph.getColorVectorProperty(\"multiColor\")
	viewColor =  graph.getColorProperty(\"viewColor\")
	
	i = 0
	key2color = {}
	for n in ns:
		keys = getKeys(n, graph)
		if not keys: continue
		color = None
		for k in keys:
			if key2color.has_key(k): 
				color = key2color[k]
				break
		if not color:
			color = i
			i += 1
		for k in keys:
			key2color[k] = color		
	
	colors = [colorsys.hsv_to_rgb(x * 1.0 / i, 0.5, 0.8) for x in range(i)]
	colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
	i2color = dict(zip(range(i), colors))
	
	for n in ns:
		keys = getKeys(n, graph)
		if not keys: continue
		key = keys[0]
		color = i2color[key2color[key]]
		multiColor[n] = [color]
		viewColor[n] = color
	
	return {key:i2color[key2color[key]] for key in key2color.keys()}
")
(string "main_script4" "/Users/anna/Documents/PhD/tulip/src/python/modules/resize.py")
(string "main_script_src4" "from tulip import *

g_ub_size = 5
sp_size = 6
ub_sp_size = 4
r_size = 3
g_sp_size = 13
g_r_size = 8

def main(graph): 
	reaction =  graph.getBooleanProperty(\"reaction\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewSize =  graph.getSizeProperty(\"viewSize\")
	resizeLabels(graph)
	
	for n in graph.getNodes():
		if reaction[n]:
			s = g_r_size if graph.isMetaNode(n) else r_size
		elif ubiquitous[n]:
			s = g_ub_size if graph.isMetaNode(n) else ub_sp_size
		else:
			s = g_sp_size if graph.isMetaNode(n) else sp_size
		viewSize[n] = tlp.Size(s, s)
		
	viewSize.setAllEdgeValue(tlp.Size(0.5, 0.5))
		
def resizeLabels(graph):
	reaction =  graph.getBooleanProperty(\"reaction\")
	ubiquitous =  graph.getBooleanProperty(\"ubiquitous\")
	viewFontSize =  graph.getIntegerProperty(\"viewFontSize\")
	metric = graph.getDoubleProperty(\"metric\")
	viewBorderWidth =  graph.getDoubleProperty(\"viewBorderWidth\")
	viewBorderColor =  graph.getColorProperty(\"viewBorderColor\")

	white = tlp.Color(255,255,255)
	grey = tlp.Color(220,220,220)
	for n in graph.getNodes():
		viewBorderWidth[n] = 0
		viewBorderColor[n] = grey
		if not reaction[n]:
			viewFontSize[n] = 10 if ubiquitous[n] else 52
			metric[n] = 1 if ubiquitous[n] else 20
		else:
			viewFontSize[n] = 6
			metric[n] = 0
			
	
")
(int "main_script_id" 3)
)
(DataSet "modules" 
(string "module0" "/Users/anna/Documents/PhD/tulip/src/python/modules/reaction_clusters_2_metanodes.py")
(string "module_src0" "from tulip import *
import ontology
import os

g_ub_size = 3
sp_size = 3
r_size = 1
g_sp_size = 3
g_r_size = 1

def getClones(graph, node):
	clone = graph.getBooleanProperty(\"clone\")
	id_ = graph.getStringProperty(\"id\")
	clones = [node]
	if not clone[node]: return [node]
	n_id = id_[node]
	return filter(lambda n: n_id == id_[n], graph.getNodes())
		
def factor(graph):
	clone = graph.addCloneSubGraph(graph.getName())
	quotient = graph.addCloneSubGraph(graph.getName() + \" quotient\")
	ancestor2nodes = {}
	for node in quotient.getNodes():
		ancestor = graph[\"ancestor\"][node]
		if ancestor:
			isReaction = graph[\"reaction\"][node]
			if not isReaction: 				
				neighbours = set()
#				for nn in getClones(quotient, node):
#					for n in quotient.getInNodes(nn):
#						neighbours.add((\"in\", graph[\"ancestor\"][n]))
#					for n in quotient.getOutNodes(nn):
#						neighbours.add((\"out\", graph[\"ancestor\"][n]))
				ancestor = ancestor, tuple(sorted(neighbours))
			ancestor = ancestor, isReaction 
			if ancestor2nodes.has_key(ancestor):
				ancestor2nodes[ancestor].append(node)
			else:
				ancestor2nodes[ancestor] = [node]
	
	ancestor2node_neighbours = {}		
	keys = list(ancestor2nodes.keys())
	for (ancestor, isReaction) in keys:
		if isReaction: continue
		nodes = ancestor2nodes[(ancestor, isReaction)]
		del ancestor2nodes[(ancestor, isReaction)]
		ancestor, neighbours = ancestor
		if ancestor2node_neighbours.has_key(ancestor):
			ancestor2node_neighbours[ancestor].append((nodes, set(neighbours)))
		else:
			ancestor2node_neighbours[ancestor] = [(nodes, set(neighbours))]
		
	for ancestor, lst in ancestor2node_neighbours.iteritems():
		changed = True
		while changed:
			changed = False
			new_lst = []
			for (nodes, neighbours) in lst:
				not_found = True
				for (new_nodes, new_neighbours) in new_lst:
					if neighbours & new_neighbours:
						new_neighbours |= neighbours
						new_nodes.extend(nodes)
						not_found = False
						changed = True
						break
				if not_found:
					new_lst.append((nodes, neighbours))
			lst = new_lst
		for (nodes, neighbours) in lst:
			new_ancestor = (ancestor, tuple(sorted(neighbours))), False
			if ancestor2nodes.has_key(new_ancestor):
				ancestor2nodes[new_ancestor].extend(nodes)
			else:
				ancestor2nodes[new_ancestor] = nodes
		
#	dir_ = os.path.dirname(ontology.__file__)
#	onto = ontology.parse(\"{0}/chebi.obo\".format(dir_))
			
	for (ancestor, isReaction), nodes in ancestor2nodes.iteritems():
		if len(nodes) <= 1: continue		
		all_nodes = list(nodes)
		id2ubN = {}
		if isReaction:
			for node in nodes:
				for n in quotient.getInOutNodes(node):
					if quotient.getRoot()[\"ubiquitous\"][n]:
						id_ = quotient.getRoot()[\"id\"][n]
						if id2ubN.has_key(id_): id2ubN[id_].append(n)
						else: id2ubN[id_] = [n]
		
			ubs = list(quotient.getInOutNodes(nodes[0]))
			isUb = quotient.getRoot()[\"ubiquitous\"]
			for n in ubs:
				if not isUb[n]: continue
				id_ = quotient.getRoot()[\"id\"][n]
				metaNode = quotient.createMetaNode(id2ubN[id_], False)
				updateProps(metaNode, n, quotient, clone)
				isUb[metaNode] = True
				quotient[\"viewSize\"][metaNode] = tlp.Size(g_ub_size, g_ub_size) #bb.width(), bb.height())	
				quotient[\"viewLabel\"][metaNode] = clone[\"viewLabel\"][n]
				graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"chebi_id\"][n]
				quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]	
				quotient[\"clone\"][metaNode] = clone[\"clone\"][n]	
				updateComprises(id2ubN[id_], quotient, clone, metaNode)
					
		metaNode = quotient.createMetaNode(all_nodes, False)
		updateProps(metaNode, nodes[0], quotient, clone)
			
		if isReaction:	
			quotient[\"viewSize\"][metaNode] = tlp.Size(g_r_size, g_r_size) #bb.width(), bb.height())
			quotient[\"viewLabel\"][metaNode] = \"generalized {0}\".format(clone[\"name\"][nodes[0]])
			for n in nodes:
				if not clone[\"reversible\"][metaNode]:
					quotient[\"reversible\"][metaNode] = False	
					break
			quotient[\"geneAssociation\"][metaNode] = \" or \".join(clone[\"geneAssociation\"][it] for it in nodes)	
			updateEcNumber(metaNode, nodes, quotient, clone)			
		else:		
			quotient[\"viewSize\"][metaNode] = tlp.Size(g_sp_size, g_sp_size) #bb.width(), bb.height())	
			quotient[\"viewLabel\"][metaNode] = quotient[\"ancestor\"][metaNode]
			graph.getRoot()[\"chebi_id\"][metaNode] = graph[\"ancestor_chebi_id\"][nodes[0]]
#			updateChebiInfo(metaNode, nodes, quotient, clone, onto)	
							
		quotient[\"name\"][metaNode] = quotient[\"viewLabel\"][metaNode]
			
		updateComprises(nodes, quotient, clone, metaNode)
		
def updateComprises(nodes, quotient, clone, metaNode):
	comprises = []
	for it in nodes:
		if not clone.isElement(it):
			print it
			continue
		if clone.getStringVectorProperty(\"comprises\")[it]:
			comprises.extend(clone[\"comprises\"][it])
		else:
			comprises.append(clone[\"speciesType\"][it])
	quotient.getStringVectorProperty(\"comprises\")[metaNode] = comprises

def updateChebiInfo(metaNode, nodes, quotient, clone, onto):
	common_parent = findCommonParent(nodes, clone, onto)
	if common_parent:
		quotient[\"viewLabel\"][metaNode] = common_parent.getName()
		par_id = list(common_parent.getAllIds())
		quotient[\"chebi_id\"][metaNode] = par_id
	
def updateEcNumber(metaNode, nodes, quotient, clone):
	ec = set()
	ecNum = clone.getStringProperty(\"ecNumber\")
	for n in nodes:
		numbers = ecNum[n]
		if numbers:
			numbers = set(numbers.split(\",\"))
			if not ec:
				ec = numbers
			else:
				intersection = ec & numbers
				if not intersection:
					print ec
					print numbers
					concensus = list(ec)[0].split(\".\")
					for num in ec | numbers:
						i = 0
						for it in num.split(\".\"):
							if concensus[i] == '-': break
							if concensus[i] != it:
								if i == 0:
									ec = set()
									break
								while i < 4:
									concensus[i] = '-'
									i += 1
								break
							i += 1
					ec = {'.'.join(concensus)}
				else:
					ec = intersection
	quotient[\"ecNumber\"][metaNode] = \",\".join(ec)
		
def findCommonParent(nodes, clone, onto):
	common_parent = None
	for n in nodes:
		chebi_ids = clone[\"chebi_id\"][n]
		if not chebi_ids: continue
		term = None
		for chebi_id in chebi_ids:
			term = onto.getTerm(chebi_id)
			if term: break
		if not term:
			common_parent = None
			break
		if not common_parent:
			common_parent = term
		else:
			common_parent = onto.commonParent(common_parent, term)
			if not common_parent:
				break
	return common_parent
	
def updateProps(metaNode, node, quotient, clone):
	for prop in [\"ancestor\", \"compartment\", \"outsideCompartment\", \\
	\"reaction\", \"reversible\", \"sboTerm\", \"speciesType\", \"ubiquitous\", \\
	\"viewBorderColor\", \"viewBorderWidth\", \"viewColor\", \"viewFont\", \"viewFontSize\", \\
	\"viewLabelColor\", \"viewLabelPosition\", \"viewLayout\", \"viewRotation\", \"viewSelection\", \\
	\"viewShape\", \"viewTexture\"]:
		quotient[prop][metaNode] = clone[prop][node]
	quotient[\"id\"][metaNode] = \"meta_\" + clone[\"id\"][node]
")
)
(DataSet "plugins" 
(string "plugin0" "/Users/anna/Documents/PhD/tulip/src/python/plugins/ChebiAnnotator.py")
(string "plugin_src0" "from tulip import *
import tulipplugins
from metabolic_widgets import *
import ontology
import os

class ChebiAnnotator(tlp.Algorithm):
	def __init__(self, context):
		tlp.Algorithm.__init__(self, context)
#		self.addStringParameter(\"file::Ontology file\", \"Ontology file in obo format.\", \"\")		
		self.chebi = None

	def check(self):
		dir = os.path.dirname(ontology.__file__)
		self.chebi = ontology.parse(\"{0}/chebi.obo\".format(dir))
#		self.chebi = parse(self.dataSet[\"file::Ontology file\"])		
		return (self.chebi != None, \"Could not parse an ontology file. Make sure that the path you provided exists and the format is obo.\")

	def run(self):
		chebi = self.chebi
		graph = self.graph
		name =  graph.getStringProperty(\"name\")
		id_ = graph.getStringProperty(\"id\")
		is_ =  graph.getStringVectorProperty(\"is\")
		chebi_id = graph.getRoot().getStringVectorProperty(\"chebi_id\")
		isReaction = graph.getBooleanProperty(\"reaction\")
		no_annotation = \"DO NOT ANNOTATE\"
		name2annotation = {}
		byDefault, doNothing = False, False
		for n in graph.getNodes():
			if isReaction[n]: continue
			is_annotation = is_[n]
			found = False
			for ii in is_annotation:
				if ii and chebi.getTerm(ontology.removeMiriamPrefix(ii)):
					found = True
					break
			if not found:
				name_ = name[n]
				end = name_.find(\"[\")
				if end == -1: end = name_.find(\"_\")
				if end != -1: name_ = name_[0:end].strip()
				if name2annotation.has_key(name_): 
					is_annotation = name2annotation[name_]
				else:
					possibilities = chebi.getIdsByName(name_)
					if not possibilities: 
						end = name_.find(\"(\")
						if end != -1: name_ = name_[0:end].strip()
						possibilities = chebi.getIdsByName(name_)
						if not possibilities: continue
					if len(possibilities) > 1 and not byDefault: 
						if doNothing: continue
						# ask user what to choose
						dialog = OptionSelectionDialog(\"Choose an ontology term for {1} ({0})\".format(id_[n], name_))
						dialog.addOptions(sorted(map(lambda id: \"{0} {1}\".format(id, chebi.getTerm(id).getName()), possibilities)))
						dialog.addOption(no_annotation)
						if not dialog.exec_(): continue
						byDefault = dialog.isByDefault()
						doNothing = dialog.isDoNothing()
						result = dialog.getSelectedOption()
						if no_annotation == result: continue					
						is_annotation = result[0:result.find(\" \")]
					else: is_annotation = possibilities.pop()
					name2annotation[name_] = is_annotation
				value = list(is_[n])
				value.append(ontology.addMiriamPrefix(is_annotation))
				is_[n] = value
				vv = list(chebi_id[n])
				vv.append(is_annotation.lower())
				chebi_id[n] = vv
		return True   


tulipplugins.registerAlgorithmPluginOfGroup(\"ChebiAnnotator\", \"ChebiAnnotator\", \"anna\", \"22/02/2012\", \"\", \"1.0\", \"Metabolic\")
")
(string "plugin1" "/Users/anna/Documents/PhD/tulip/src/python/plugins/ChebiColorer.py")
(string "plugin_src1" "from tulip import *
import tulipplugins
import colorsys
from model_utils import *

class ChebiColorer(tlp.Algorithm):
	def __init__(self, context):
		tlp.Algorithm.__init__(self, context)

	def check(self):
		return (True, \"Ok\")

	def run(self):
		graph = self.graph
		isVersionOf =  graph.getStringVectorProperty(\"isVersionOf\")
		viewColor =  graph.getColorProperty(\"viewColor\")
		name =  graph.getStringProperty(\"name\")
		reaction =  graph.getBooleanProperty(\"reaction\")
		multiColor =  graph.getColorVectorProperty(\"multiColor\")
		ubiquitous = graph.getBooleanProperty(\"ubiquitous\")
		
		ns = set(graph.getNodes())
		rs = set(filter(lambda it: graph[\"reaction\"][it], ns))
		sp = ns - rs
		grey = tlp.Color(211, 211, 211)
		vo2node = {}		
		ancestor = graph.getStringProperty(\"ancestor\")
		for n in sp:
			multiColor[n] = [grey]
			viewColor[n] = grey
			if ubiquitous[n]:	continue
			key = ancestor[n]
			if key:
				if not vo2node.has_key(key): vo2node[key] = [n]
				else: vo2node[key].append(n)
						
		n = len(vo2node.keys())
		colors = [colorsys.hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
		colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
		
		for ((vo, nodes), color) in zip(vo2node.iteritems(), colors):
			for node in nodes:
				mc = multiColor[node]
				if mc == [grey]: mc = [color]
				else: mc.append(color)
				multiColor[node] = mc
				viewColor[node] = color
						
		ecNum =  graph.getStringProperty(\"ecNumber\")
		ec2node = {}
		for n in rs:
			viewColor[n] = grey
			multiColor[n] = [grey]
			ec = ecNum[n]
			if ec:
				ecs = ec.split(\",\")
				for ec in ecs:			
					if not ec2node.has_key(ec): ec2node[ec] = [n]
					else: ec2node[ec].append(n)
		
		n = len(ec2node.keys())
		colors = [colorsys.hsv_to_rgb(x * 1.0 / n, 0.5, 0.8) for x in range(n)]
		colors = [tlp.Color(int(255 * r), int(255 *g), int(255 *b)) for (r,g,b) in colors]	
		
		for ((ec, nodes), color) in zip(ec2node.iteritems(), colors):
			for node in nodes:
				mc = multiColor[node]
				if mc == [grey]: mc = [color]
				else: mc.append(color)
				multiColor[node] = mc
				viewColor[node] = color
				for e in graph.getInOutEdges(node):
					mc = multiColor[e]
					if mc == [grey]: mc = [color]
					else: mc.append(color)
					multiColor[e] = mc
					viewColor[e] = color
		return True

# The line below does the magic to register the plugin to the plugin database
# and updates the GUI to make it accessible through the menus.
tulipplugins.registerAlgorithmPluginOfGroup(\"ChebiColorer\", \"ChebiColorer\", \"anna\", \"21/02/2012\", \"\", \"1.0\", \"Metabolic\")
")
)
)
(uint "id" 84)
(int "x" 717)
(int "y" 0)
(int "width" 717)
(int "height" 1059)
(bool "maximized" false)
)
)
)
)
)
